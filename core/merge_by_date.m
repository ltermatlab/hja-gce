function [s,msg] = merge_by_date(s1,s2,datecol1,datecol2,fixflags,calcflags,trim_opt)
%Merges (i.e. concatenates) two GCE data structures to produce a single time series without duplicate date/time records.
%
%Note that if date/time ranges for the two structures overlap, by default records will be removed from the
%structure with the earliest beginning date (regardless of differences in other columns) to facilitate
%automatic overwriting of provisional data values. Use the 'trim_opt' parameter to manually specify which
%structure to remove overlapping records from.
%
%syntax: [s,msg] = merge_by_date(s1,s2,datecol1,datecol2,fixflags,calcflags,trim_opt)
%
%inputs:
%  s1 = GCE data structure to merge
%  s2 = GCE data structure to merge
%  datecol1 = name or index number of serial date column in s1
%    (first floating-point datetime column will be used, or a serial
%    date column will be generated by the 'add_datecolumn' function
%    if necessary)
%  datecol2 = name or index number of serial date column in s2 (see above)
%  fixflags = option to fix flags prior to merging data sets by adding 'manual'
%    to each Q/C criteria string to prevent inappropriate automatic reflagging
%      0 = do not fix (default)
%      1 = fix
%  calcflags = option to recalculate flags after merging data
%    0 = no  (default if fixflags = 1)
%    1 = yes (default if fixflags = 0)
%  trim_opt = option for trimming records with overlapping dates
%    'older' (default) = option to trim records from the chronologically older data set (i.e. overwrite older records)
%    'newer' = option to trim records from the newer data set (i.e. only merge newer records)
%
%outputs:
%  s = merged data structure
%  msg = text of any error messages
%
%
%(c)2002-2011 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 07-Sep-2011

s = [];
msg = '';

if nargin >= 2

   if gce_valid(s1,'data') == 1 && gce_valid(s2,'data') == 1

      %set defaults for omitted parameters
      if exist('trim_opt','var') ~= 1
         trim_opt = 'older';
      elseif strcmpi(trim_opt,'newer') ~= 1
         trim_opt = 'older';
      end

      if exist('fixflags','var') ~= 1
         fixflags = 0;
      end

      if exist('calcflags','var') ~= 1
         if fixflags == 0
            calcflags = 1;
         else
            calcflags = 0;
         end
      end

      %lock flags if requested by adding 'manual' to q/c criteria strings
      if fixflags == 1
         for n = 1:length(s1.criteria)
            crit = s1.criteria{n};
            if isempty(crit)
               crit = 'manual';
            elseif isempty(strfind(crit,'manual'))
               crit = [crit,';manual'];
            end
            s1.criteria{n} = crit;
         end
         for n = 1:length(s2.criteria)
            crit = s2.criteria{n};
            if isempty(crit)
               crit = 'manual';
            elseif isempty(strfind(crit,'manual'))
               crit = [crit,';manual'];
            end
            s2.criteria{n} = crit;
         end
      end

      err = 0;

      if exist('datecol1','var') ~= 1
         datecol1 = [];
      elseif ~isnumeric(datecol1)
         datecol1 = name2col(s1,datecol1);
         if isempty(datecol1)
            err = 1;
            msg = 'invalid date column for first structure';
         end
      end

      if exist('datecol2','var') ~= 1
         datecol2 = [];
      elseif ~isnumeric(datecol2)
         datecol2 = name2col(s2,datecol2);
         if isempty(datecol2)
            err = 1;
            if isempty(msg)
               msg = 'invalid date column for second structure';
            else
               msg = [msg,' and invalid date column for second structure'];
            end
         end
      end

      %check for invalid input
      if err == 0

         %get serial date info for each structure, plus updated structure and serial date columns
         %if serial date column created
         [d1,msg0,s1,datecol1] = get_studydates(s1,datecol1);
         [d2,msg0,s2,datecol2] = get_studydates(s2,datecol2);

         if ~isempty(d1) && ~isempty(d2)

            %remove NaN dates
            d1 = d1(~isnan(d1));
            d2 = d2(~isnan(d2));

            if ~isempty(d1) && ~isempty(d2)

               %determine chronological order of data sets, assign to runtime vars
               if min(d1) <= min(d2)
                  s_top = s1;
                  d_top = d1;
                  dcol_top = datecol1;
                  dcol_bot = datecol2;
                  s_bot = s2;
                  d_bot = d2;
               else
                  s_top = s2;
                  d_top = d2;
                  dcol_top = datecol2;
                  dcol_bot = datecol1;
                  s_bot = s1;
                  d_bot = d1;
               end

               %init overlap error flag
               overlap_error = 0;

               %check for overlap
               if max(d_top) >= min(d_bot)

                  if max(d_top) < max(d_bot)  %check for complete overlap condition

                     %generate appropriate filter statements to trip overlapping records
                     if strcmpi(trim_opt,'older')
                        qstr = [s_top.name{dcol_top},'<',num2str(min(d_bot),'%0.5f')];  %generate query string for trimming
                        s_top = querydata(s_top,qstr);  %trim top structure to exclude overlap region
                     else
                        qstr = [s_bot.name{dcol_bot},'>',num2str(max(d_top),'%0.5f')];  %generate query string for trimming
                        s_bot = querydata(s_bot,qstr);  %trim bottom structure to exclude overlap region
                     end

                  else
                     overlap_error = 1;  %set overlap flag
                  end

               end

               %check for overlap error flag
               if overlap_error == 0

                  %check for non-empty structures from trimming operation, merge data sets
                  if ~isempty(s_bot) && ~isempty(s_top)

                     %perform merge using specified options
                     [s,msg2] = datamerge(s_top,s_bot,1,1,1,fixflags,calcflags);

                     if isempty(s)
                        msg = ['errors occurred performing the merge (',msg2,')'];
                     end

                  else

                     if strcmpi(trim_opt,'older')
                        msg = 'errors occurred trimming the overlapping dates from the earlier structure';
                     else
                        msg = 'errors occurred trimming the overlapping dates from the newer structure';
                     end

                  end

               else
                  msg = 'structure dates completely overlapped - merge cancelled';
               end

            else
               msg = 'one or both structures contained invalid serial date information';
            end

         else
            msg = 'no valid serial date columns could be identified in one or both structures';
         end

      end

   else
      msg = 'one or both input structures are invalid';
   end

else
   msg = 'insufficient arguments for function';
end