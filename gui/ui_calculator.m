function ui_calculator(op,val,h_cb,cb)
%Dialog for adding calculated columns to a GCE Data Structure by evaluating a user-specified MATLAB expression
%
%syntax:  ui_calculator(op,s)
%
%input:
%  op = operation (default = 'init' to initialize dialog)
%  s = data structure
%
%output:
%  none
%
%
%(c)2002-2015 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 05-Apr-2015

%validate arguments
if nargin == 0
   op = 'init';
   val = [];
elseif nargin == 1  %assume 'init' omitted if first argument is structure
   if isstruct(op)
      val = op;
      op = 'init';
   else
      val = [];
   end
end

%check for initialize
if strcmp(op,'init')
   
   %get data structure from second input argument
   s = val;
   
   %set default callback handle and expression if omitted
   if exist('h_cb','var') ~= 1
      h_cb = [];
   end
   
   if exist('cb','var') ~= 1
      cb = '';
   end
   
   %check for valid data structure
   if gce_valid(s,'data')
      
      %check for settings file
      prefs = [];
      if exist('ui_calculator.mat','file') == 2
         try
            v = load('ui_calculator.mat','-mat');
         catch
            v = struct('null','');
         end
         if isfield(v,'prefs')
            prefs = v.prefs;
         end
      end
      
      %init default preferences if omitted
      if isempty(prefs)
         prefs = struct('close_option',1, ...
            'vartype','calculation', ...
            'save_calc',1, ...
            'calculations',[]);
      end
      
      %init variable type lists for popup menu and vartype lookup
      vartypes = { ...
         'data', ...
         'calculation', ...
         'nominal', ...
         'ordinal', ...
         'logical', ...
         'datetime', ...
         'coord', ...
         'code', ...
         'text' ...
         };
      
      vartypelist = { ...
         'measurements (data)'; ...
         'calculations (calculation)'; ...
         'categorical values (nominal)'; ...
         'order/positional values (ordinal)'; ...
         'boolean/true-false (logical)'; ...
         'date or time (datetime)'; ...
         'geographic coordinates (coord)'; ...
         'coded values (code)'; ...
         'free text (text)' ...
         };
      
      %loop up vartype index for popupmenu
      vartypeval = find(strcmp(prefs.vartype,vartypes));
      if isempty(vartypeval)
         vartypeval = 2;
      end
      
      %set screen and font metrics for GUI
      res = get(0,'ScreenSize');
      bgcolor = [0.95 0.95 0.95];
      if strcmp(computer,'PCWIN')
         font = 'Arial';
      else
         font = 'Helvetica';
      end
      
      %create GUI figure
      h_dlg = figure('Visible','off', ...
         'Position',[max(0,0.5.*(res(3)-515)) max(50,0.5.*(res(4)-655)) 655 515], ...
         'Color',[0.9 0.9 0.9], ...
         'KeyPressFcn','figure(gcf)', ...
         'MenuBar','none', ...
         'Name','Add Calculated Column', ...
         'NumberTitle','off', ...
         'Tag','dlgAddCalculated', ...
         'ToolBar','none', ...
         'Resize','off', ...
         'DefaultuicontrolUnits','pixels');
      
      %turn off docking for MATLAB 7+
      if mlversion >= 7
         set(h_dlg,'WindowStyle','normal')
         set(h_dlg,'DockControls','off')
      end
      
      %create UI frames
      uicontrol('Parent',h_dlg, ...
         'Style','frame', ...
         'Position',[5 365 645 145], ...
         'BackgroundColor',bgcolor, ...
         'ForegroundColor',[0 0 0]);
      
      uicontrol('Parent',h_dlg, ...
         'Style','frame', ...
         'Position',[5 270 645 90], ...
         'BackgroundColor',bgcolor, ...
         'ForegroundColor',[0 0 0]);
      
      uicontrol('Parent',h_dlg, ...
         'Style','frame', ...
         'Position',[5 40 645 225], ...
         'BackgroundColor',bgcolor, ...
         'ForegroundColor',[0 0 0]);
      
      %create UI controls
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[14 480 100 20], ...
         'BackgroundColor',bgcolor, ...
         'HorizontalAlignment','left', ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Column Name', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[365 480 90 20], ...
         'BackgroundColor',bgcolor, ...
         'HorizontalAlignment','left', ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Column Units', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[14 450 100 20], ...
         'BackgroundColor',bgcolor, ...
         'HorizontalAlignment','left', ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Description', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[14 385 100 20], ...
         'BackgroundColor',bgcolor, ...
         'HorizontalAlignment','left', ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Variable Type', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[355 385 100 20], ...
         'BackgroundColor',bgcolor, ...
         'HorizontalAlignment','left', ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Flag Criteria', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[14 288 130 20], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Add Math Operator', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[14 324 120 20], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Add Data Column', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[405 324 90 20], ...
         'FontName',font, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Add Constant', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[13 230 176 20], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Expression to Evaluate', ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[25 95 590 40], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',9, ...
         'ForegroundColor',[0 0 0.8], ...
         'String',['(Expression must be a valid MATLAB statement that produces a numerical vector, ', ...
         'character array, or cell array of strings the same length as the data columns, ', ...
         'unless ''Replicate Scalar Values'' is checked)'], ...
         'Tag','label');
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 70 155 20], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'HorizontalAlignment','left', ...
         'String','Add New Column After', ...
         'Tag','label');
      
      h_editName = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[114 480 220 22], ...
         'BackgroundColor',[1 1 1], ...
         'HorizontalAlignment','left', ...
         'FontSize',10, ...
         'String','NewColumn1', ...
         'Tag','editName', ...
         'Callback','ui_calculator(''colname'')', ...
         'UserData',1);
      
      h_editUnits = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[460 480 183 22], ...
         'BackgroundColor',[1 1 1], ...
         'HorizontalAlignment','left', ...
         'FontSize',10, ...
         'String','', ...
         'Tag','editUnits', ...
         'Callback','ui_calculator(''colname'')');
      
      h_editDesc = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[114 420 530 48], ...
         'Min',1, ...
         'Max',3, ...
         'BackgroundColor',[1 1 1], ...
         'HorizontalAlignment','left', ...
         'FontSize',10, ...
         'String','', ...
         'Tag','editDesc');
      
      h_popVartype = uicontrol('Parent',h_dlg, ...
         'Fontsize',10, ...
         'BackgroundColor',[1 1 1], ...
         'Position',[114 387 220 20], ...
         'String',vartypelist, ...
         'Style','popupmenu', ...
         'HorizontalAlignment','left', ...
         'Tag','popVartype', ...
         'UserData',vartypes, ...
         'TooltipString','Variable type (semantic type) of the data set column', ...
         'Value',vartypeval);
      
      h_editCrit = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[444 385 200 22], ...
         'FontSize',10, ...
         'BackgroundColor',[1 1 1], ...
         'String','', ...
         'HorizontalAlignment','left', ...
         'TooltipString','Flag criteria to apply to the calculated column', ...
         'Tag','editCrit');
      
      h_cmdAddConst = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[585 325 55 22], ...
         'FontName',font, ...
         'FontSize',10, ...
         'Callback','ui_calculator(''addconst'')', ...
         'String','Copy', ...
         'TooltipString','Add specified constant to the expression window', ...
         'Tag','cmdAddConst');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[150 289 30 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'',''('')', ...
         'String','(', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[185 289 30 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'','')'')', ...
         'String',')', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[220 289 70 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'',''+'')', ...
         'String','+ (Add)', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[295 289 70 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'',''-'')', ...
         'String','- (Subtract)', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[370 289 70 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'',''.*'')', ...
         'String','* (Multiply)', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[445 289 70 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'',''./'')', ...
         'String','/ (Divide)', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[520 289 70 22], ...
         'FontSize',9, ...
         'FontName',font, ...
         'Callback','ui_calculator(''addsym'',''.^'')', ...
         'String','^ (Power)', ...
         'TooltipString','Add the selected math operator to the expression', ...
         'Tag','cmdSymbol');
      
      h_popVars = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'Position',[135 328 195 20], ...
         'BackgroundColor',[1 1 1], ...
         'FontName',font, ...
         'FontSize',9, ...
         'String',s.name', ...
         'Tag','popVars', ...
         'Value',1);
      
      h_cmdAddCol = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[335 325 55 22], ...
         'FontName',font, ...
         'FontSize',10, ...
         'Callback','ui_calculator(''addcol'')', ...
         'String','Copy', ...
         'TooltipString','Add selected column data to the expression window', ...
         'Tag','cmdAddCol');
      
      h_editConst = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[500 324 80 22], ...
         'BackgroundColor',[1 1 1], ...
         'FontName',font, ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'String','', ...
         'Tag','editConst');
      
      h_cmdUndo = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[510 230 40 22], ...
         'FontName',font, ...
         'FontSize',10, ...
         'String','Undo', ...
         'Value',0, ...
         'Callback','ui_calculator(''undo'')', ...
         'Tag','cmdClear', ...
         'TooltipString','Undo last modification to the expression', ...
         'UserData',[]);
      
      h_cmdClear = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[555 230 40 22], ...
         'FontName',font, ...
         'FontSize',10, ...
         'String','Clear', ...
         'Value',0, ...
         'Callback','ui_calculator(''clear'')', ...
         'TooltipString','Clear the expression window', ...
         'Tag','cmdClear');
      
      h_toggleEdit = uicontrol('Parent',h_dlg, ...
         'Style','togglebutton', ...
         'Position',[600 230 40 22], ...
         'FontName',font, ...
         'FontSize',10, ...
         'String','Edit', ...
         'Value',0, ...
         'Callback','ui_calculator(''manual'')', ...
         'TooltipString','Enable manual editing of the expression (disables other controls)', ...
         'Tag','toggleEdit');
      
      calcs = [{'<select a previously used calculation>'} ; prefs.calculations];
      
      h_popOldCalcs = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'Position',[25 205 620 20], ...
         'BackgroundColor',[1 1 1], ...
         'String',calcs, ...
         'FontSize',9, ...
         'Value',1, ...
         'Callback','ui_calculator(''calcs'')', ...
         'Tag','popOldCalcs');
      
      h_editEqn = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[25 139 620 60], ...
         'BackgroundColor',[1 1 1], ...
         'FontName',font, ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Max',5, ...
         'String','', ...
         'Callback','ui_calculator(''buttons'')', ...
         'Enable','off', ...
         'Tag','editEqn');
      
      h_popPosition = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'Position',[173 74 210 20], ...
         'BackgroundColor',[1 1 1], ...
         'FontName',font, ...
         'FontSize',9, ...
         'String',[{'(before first column)'};s.name'], ...
         'Tag','popPosition', ...
         'Value',length(s.name)+1);
      
      h_chkScalar = uicontrol('Parent',h_dlg, ...
         'Style','checkbox', ...
         'Position',[410 74 161 22], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'String','Replicate Scalar Values', ...
         'Value',1, ...
         'TooltipString','Option to allow scalar (single element) results to be replicated for all rows', ...
         'Tag','chkScalar');
      
      h_chkSaveCalc = uicontrol('Parent',h_dlg, ...
         'Style','checkbox', ...
         'Position',[410 50 180 22], ...
         'BackgroundColor',bgcolor, ...
         'FontName',font, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'String','Save Expression to History', ...
         'Value',prefs.save_calc, ...
         'TooltipString','Option to save the expression for subsequent use', ...
         'Tag','chkSaveCalc');
      
      h_cmdCancel = uicontrol('Parent',h_dlg, ...
         'Position',[15 10 75 24], ...
         'Style','pushbutton', ...
         'Callback','ui_calculator(''cancel'')', ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'String','Cancel', ...
         'TooltipString','Close the dialog', ...
         'Tag','cmdCancel');
      
      h_chkClose = uicontrol('Parent',h_dlg, ...
         'Position',[230 10 190 20], ...
         'Style','checkbox', ...
         'BackgroundColor',[0.9 0.9 0.9], ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'Value',prefs.close_option, ...
         'String','Close dialog on View/Edit', ...
         'TooltipString','Close the calculator dialog when the structure is exported for viewing/editing', ...
         'Tag','chkClose');
      
      h_cmdEval = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[470 10 75 24], ...
         'Enable','off', ...
         'Callback','ui_calculator(''eval'')', ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'String','Evaluate', ...
         'Tag','cmdEval', ...
         'UserData',s, ...
         'TooltipString','Evaluate the expression and add data column');
      
      h_cmdExport = uicontrol('Parent',h_dlg, ...
         'Position',[560 10 75 24], ...
         'Style','pushbutton', ...
         'Enable','off', ...
         'Callback','ui_calculator(''export'')', ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'String','View/Edit', ...
         'TooltipString','View and edit the data structure and save or export the results', ...
         'Tag','cmdExport');
      
      uih = struct('editName',h_editName, ...
         'editUnits',h_editUnits, ...
         'editDesc',h_editDesc, ...
         'popVartype',h_popVartype, ...
         'editCrit',h_editCrit, ...
         'popVars',h_popVars, ...
         'popOldCalcs',h_popOldCalcs, ...
         'cmdAddCol',h_cmdAddCol, ...
         'cmdAddConst',h_cmdAddConst, ...
         'cmdUndo',h_cmdUndo, ...
         'cmdClear',h_cmdClear, ...
         'toggleEdit',h_toggleEdit, ...
         'editConst',h_editConst, ...
         'editEqn',h_editEqn, ...
         'popPosition',h_popPosition, ...
         'chkScalar',h_chkScalar, ...
         'chkSaveCalc',h_chkSaveCalc, ...
         'cmdCancel',h_cmdCancel, ...
         'chkClose',h_chkClose, ...
         'cmdEval',h_cmdEval, ...
         'cmdExport',h_cmdExport, ...
         'h_cb',h_cb, ...
         'cb',cb, ...
         'prefs',prefs);
      
      set(h_dlg,'UserData',uih,'Visible','on')
      drawnow
      
   end
   
else  %handle other callbacks
   
   h_dlg = [];
   
   %get dialog handle
   if length(findobj) > 2
      h_dlg = gcf;
      if ~strcmp(get(h_dlg,'Tag'),'dlgAddCalculated')
         h_dlg = [];
      end
   end
      
   %check for valid callback from active dialog
   if ~isempty(h_dlg)
      
      uih = get(h_dlg,'UserData');
      s = get(uih.cmdEval,'UserData');
      eqn = get(uih.editEqn,'String');
      
      switch op  %handle other callbacks
         
         case 'cancel'
            
            delete(h_dlg)
            ui_aboutgce('reopen')  %check for last window
            
            
         case 'eval'  %evaluate expression
            
            %concatenate multiple lines
            if size(eqn,1) > 1
               str = eqn;
               eqn = '';
               for n = 1:size(str,1)
                  eqn = [eqn,deblank(str(n,:)),' '];
               end
            end
            eqn = deblank(eqn);
            
            if ~isempty(eqn)
               
               %get control values
               scalaropt = get(uih.chkScalar,'Value');
               pos = get(uih.popPosition,'Value');
               colname = get(uih.editName,'String');
               colunits = get(uih.editUnits,'String');
               coldesc = get(uih.editDesc,'String');
               crit = get(uih.editCrit,'String');
               savecalc = get(uih.chkSaveCalc,'Value');
               
               %get variable type
               vartypes = get(uih.popVartype,'UserData');
               Ivartype = get(uih.popVartype,'Value');
               vartype = vartypes{Ivartype};
               
               %evaluate equation to add calculated data column
               [data,msg] = add_calcexpr(s,eqn,colname,colunits,coldesc,pos,scalaropt,crit,vartype);
               
               %check for success
               if ~isempty(data)
                  
                  set(uih.cmdEval,'UserData',data)  %update cache
                  
                  %update variable lists
                  Isel = get(uih.popVars,'Value');
                  set(uih.popVars, ...
                     'String',data.name', ...
                     'Value',find(strcmp(data.name,s.name{Isel})))
                  set(uih.popPosition, ...
                     'String',[{'(before first column)'};data.name'], ...
                     'Value',find(strcmp(data.name,colname))+1)
                  
                  %update column name lists
                  varnum = get(uih.editName,'UserData') + 1;
                  set(uih.editName,'String',['NewColumn',int2str(varnum)],'UserData',varnum)
                  set(uih.editUnits,'String','')
                  set(uih.editDesc,'String','')
                  set(uih.editEqn,'String','')
                  
                  set(uih.cmdExport,'Enable','on')
                  
                  %update preferences and old calcs list
                  uih.prefs.vartype = vartype;
                  uih.prefs.save_calc = savecalc;
                  if savecalc == 1
                     calcs = unique([uih.prefs.calculations ; {eqn}]);
                     uih.prefs.calculations = calcs;
                     set(uih.popOldCalcs, ...
                        'String',[{'<select a previously used calculation>'} ; calcs], ...
                        'Value',1)
                  end
                  set(h_dlg,'UserData',uih)
                  
                  
                  %clear flag criteria
                  set(uih.editCrit,'String','')
                  
                  drawnow
                  
               else
                  
                  messagebox('init', ...
                     ['The expression could not be evaluated (error: ',msg,')'], ...
                     '', ...
                     'Error', ...
                     [.9 .9 .9]);
                  
               end
               
            end
            
         case 'export'  %export ammended structure to ui_editor
            
            %get close option
            closeval = get(uih.chkClose,'Value');
            if closeval == 1
               close(h_dlg)
               drawnow
            end
            
            %update stored preferences
            prefs = uih.prefs;
            prefs.close_option = closeval;
            
            %check for existing preferences file
            fn_prefs = which('ui_calculator.mat');
            if isempty(fn_prefs)
               %generate filename in userdata if not found
               fn_prefs = [gce_homepath,filesep,'settings',filesep,'ui_calculator.mat'];
            end
            
            %save preferences
            if exist(fn_prefs,'file') == 2
               save(fn_prefs,'prefs','-append')
            else
               save(fn_prefs,'prefs')
            end
            
            %execute callback if defined
            err = 0;
            if isempty(uih.h_cb)
               ui_editor('init',s)
            else
               h_fig = parent_figure(uih.h_cb);
               if ~isempty(h_fig)
                  figure(h_fig)
                  set(uih.h_cb,'userdata',s)
                  try
                     eval(uih.cb)
                  catch
                     err = 1;
                  end
               else
                  err = 1;
               end
            end
            
            if err == 1
               ui_editor('init',s);
               messagebox('init','Warning - could not open original editor window', ...
                  '','Warning',[.9 .9 .9]);
            end
            
         case 'buttons'  %toggle state of eval button
            
            if isempty(deblank(eqn))
               set(uih.cmdEval,'Enable','off')
            else
               set(uih.cmdEval,'Enable','on')
            end
            drawnow
            
         case 'calcs'  %handle changes to prior calculation popup menu
            
            %get selection
            Isel = get(uih.popOldCalcs,'Value');
            
            %check for valid option
            if Isel > 1
               
               %get calculation from preferences structure
               calc = uih.prefs.calculations{Isel-1};
               
               %update calculation editbox
               set(uih.editEqn,'String',calc)
               
               %set edit mode to on
               set(uih.toggleEdit,'Value',1)
               ui_calculator('manual')
               
               %update button states
               ui_calculator('buttons')
               
            end
            
         case 'addcol'  %copy selected column to expression window
            
            Isel = get(uih.popVars,'Value');
            
            if isempty(eqn)
               eqn = [s.name{Isel},' '];
            else
               set(uih.cmdUndo,'UserData',[get(uih.cmdUndo,'UserData');{eqn}])
               if size(eqn,1) > 1
                  str = eqn;
                  eqn = '';
                  for n = 1:size(str,1)
                     eqn = [eqn,deblank(str(n,:)),' '];
                  end
               end
               eqn = [deblank(eqn),' ',s.name{Isel},' '];
            end
            
            set(uih.editEqn,'String',eqn)   %update editbox
            set(uih.cmdEval,'Enable','on')  %enable eval button
            
         case 'colname'  %handle column name changes
            
            colname = deblank(get(uih.editName,'String'));
            
            if isempty(colname)
               colname = 'NewColumn';
            elseif ~isempty(strfind(' ',colname))
               colname = strrep(colname,' ','_');
            end
            
            set(uih.editName,'String',colname)
            
         case 'addsym'  %handle add symbol clicks
            
            if isempty(eqn)
               eqn = [val,' '];
            else
               set(uih.cmdUndo,'UserData',[get(uih.cmdUndo,'UserData');{eqn}])
               if size(eqn,1) > 1
                  str = eqn;
                  eqn = '';
                  for n = 1:size(str,1)
                     eqn = [eqn,deblank(str(n,:)),' '];
                  end
               end
               eqn = [deblank(eqn),' ',val,' '];
            end
            
            set(uih.editEqn,'String',eqn)
            set(uih.cmdEval,'Enable','on')  %enable eval button
            
         case 'addconst'  %handle add constant clicks
            
            val = deblank(get(uih.editConst,'String'));
            
            if ~isempty(val)
               
               %check for string, add quotes
               if isnan(str2double(val))
                  val = ['''',val,''''];
               end
               
               if isempty(eqn)
                  eqn = [val,' '];
               else
                  set(uih.cmdUndo,'UserData',[get(uih.cmdUndo,'UserData');{eqn}])
                  if size(eqn,1) > 1
                     str = eqn;
                     eqn = '';
                     for n = 1:size(str,1)
                        eqn = [eqn,deblank(str(n,:)),' '];   %#ok<AGROW>
                     end
                  end
                  eqn = [deblank(eqn),' ',val,' '];
               end
               
               set(uih.editEqn,'String',eqn)
               set(uih.cmdEval,'Enable','on')  %enable eval button
               
            end
            
         case 'manual'  %handle manual edit mode changes
            
            h = findobj(h_dlg,'Tag','cmdSymbol');
            v = get(uih.toggleEdit,'Value');
            
            set(uih.cmdUndo,'UserData',[get(uih.cmdUndo,'UserData');{eqn}])
            
            if v == 1  %toggle on editing
               set(uih.toggleEdit,'BackgroundColor',[0 1 0])
               set(h,'Enable','off')
               set(uih.cmdAddCol,'Enable','off')
               set(uih.editConst,'Enable','off','String','')
               set(uih.cmdAddConst,'Enable','off')
               str = get(uih.editEqn,'String');
               if isempty(str); str = ' '; end
               set(uih.editEqn,'Enable','on','ForegroundColor',[0 0 0],'String',str)
            else
               set(uih.toggleEdit,'BackgroundColor',get(uih.cmdEval,'BackgroundColor'))
               set(h,'Enable','on')
               set(uih.cmdAddCol,'Enable','on')
               set(uih.cmdAddConst,'Enable','on')
               set(uih.editConst,'Enable','on')
               set(uih.editEqn,'Enable','off')
            end
            
            drawnow;
            
         case 'undo'  %undo equation changes
            
            buf = get(uih.cmdUndo,'UserData');
            
            if ~isempty(buf)
               set(uih.editEqn,'String',buf{end})
               set(uih.cmdUndo,'UserData',buf(1:end-1))
            end
            
            ui_calculator('buttons')
            
         case 'clear'  %clear equation
            
            set(uih.cmdUndo,'UserData',[get(uih.cmdUndo,'UserData');{eqn}])
            set(uih.editEqn,'String','')
            set(uih.cmdEval,'Enable','off')
            
      end
      
   end
   
end
