function ui_clearflags(op,s,mode,h_cb,cb,option)
%GCE Data Toolbox dialog for selective deletion of QA/QC flags or flagged values, or selective conversion of flags to columns
%
%syntax: ui_clearflags(op,s,mode,h_cb,cb)
%
%input:
%  op = operation (default = 'init' to initialize dialog)
%  s = data structure
%  mode = dialog mode
%    'values' = dialog for removing flagged values using 'nullflags.m' or 'cullflags.m'
%    'flags' = dialog for removing assigned flags using 'clearflags.m'
%    'flags2cols' = dialog for instantiating flags as data columns using 'flags2cols_selected.m'
%  option = initial setting of application-specific radio button
%    1 = radio 1 selected (default)
%    2 = radio 2 selected
%
%output:
%  none
%
%
%(c)2002-2013 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 15-May-2013

if nargin == 0
   op = '';
   s = '';
elseif isstruct(op)
   s = op;
   if gce_valid(s,'data')
      op = 'init';
   end
end

if strcmp(op,'init') && exist('s','var')
   
   if gce_valid(s,'data')
      
      %check for any flags
      Iflags = find(~cellfun('isempty',s.flags));
      
      if ~isempty(Iflags)
         
         %default to values mode
         if exist('mode','var') ~= 1
            mode = 'values';
         elseif ~strcmp(mode,'flags') && ~strcmp(mode,'flags2cols')
            mode = 'values';
         end
         
         %set handle and callback to null if omitted
         if exist('h_cb','var') ~= 1
            h_cb = [];
         end
         
         if exist('cb','var') ~= 1
            cb = '';
         end
         
         %set default option if omitted
         if exist('option','var') ~= 1
            option = 1;
         elseif option ~= 2
            option = 1;
         end
         
         %set radio control initial values based on option
         if option == 1
            radioNull_val = 1;
            radioCull_val = 0;
         else
            radioNull_val = 0;
            radioCull_val = 1;
         end
         
         %format column list
         cols = concatcellcols([s.name',repmat({' ('},length(s.name),1), ...
            s.units',repmat({')'},length(s.name),1)]);
         
         %extract and format flag definition list
         flagstr = lookupmeta(s,'Data','Codes');
         if isempty(flagstr)
            flagstr = 'Q = questionable value|I = invalid value';
         end
         if ~isempty(strfind(flagstr,'|'))
            flagsep = '|';
         elseif ~isempty(strfind(flagstr,','))
            flagsep = ',';
         elseif ~isempty(strfind(flagstr,';'))
            flagsep = ';';
         else
            flagsep = '';
         end
         if ~isempty(flagsep)
            flags = splitstr(flagstr,flagsep);
         else
            flags = cellstr(flagstr);
         end
         
         %init vertical offset for adding replacement flag fields for value mode
         voffset = 0;
         
         %set mode-specific dialog strings
         if strcmp(mode,'flags')
            str_title = 'Flag Assignment Deletion';
            str1 = 'Flag Assignments to Retain';
            str2 = 'Flag Assignments to Delete';
            str3 = 'Flag Deletion Option:';
            strRadio1 = 'Lock Flag Criteria';
            strRadio2 = 'Unlock Flag Criteria';
            strOption = 'Log deletions to data anomalies metadata field';
            optionvis = 'on';
         elseif strcmp(mode,'flags2cols')
            str_title = 'Convert Flags to Columns';
            str1 = 'Available Flags';
            str2 = 'Flags to Convert to Columns';
            str3 = 'Flag Encoding Option:';
            strRadio1 = 'Text Flag Codes';
            strRadio2 = 'Numeric Flag Codes';
            strOption = 'Include empty columns when no flags are matched';
            optionvis = 'on';
            voffset = 30;
         else %values
            str_title = 'Flagged Value Deletion';
            str1 = 'Flagged Values to Retain';
            str2 = 'Flagged Values to Delete';
            str3 = 'Value Deletion Option:';
            strRadio1 = 'Convert to NaN/blank';
            strRadio2 = 'Delete Entire Row';
            strOption = 'Log deletions to data anomalies metadata field';
            optionvis = 'on';
            voffset = 60;
         end
         
         %set dialog metrics based on screen size
         res = get(0,'ScreenSize');
         figpos = [max(0,(res(3)-575).*0.5) max(30,(res(4)-530+voffset).*0.5) 575 530+voffset];
         
         %init dialog figure
         h_dlg = figure('Visible','off', ...
            'Position',figpos, ...
            'Name',str_title, ...
            'Color',[0.95 0.95 0.95], ...
            'KeyPressFcn','figure(gcf)', ...
            'MenuBar','none', ...
            'NumberTitle','off', ...
            'Tag','mnuClearFlags', ...
            'ToolBar','none', ...
            'DefaultuicontrolUnits','pixels', ...
            'CloseRequestFcn','ui_clearflags(''cancel'')');
         
         %turn off docking for newer matlab versions
         if mlversion >= 7
            set(h_dlg,'WindowStyle','normal')
            set(h_dlg,'DockControls','off')
         end
         
         %define uicontrols
         uicontrol('Parent',h_dlg, ...
            'Style','frame', ...
            'ForegroundColor',[0 0 0], ...
            'BackgroundColor',[0.95 0.95 0.95], ...
            'Position',[1 1 figpos(3) figpos(4)]);
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'Position',[6 48 564 229+voffset], ...
            'Style','frame', ...
            'Tag','frameColumns');
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'Position',[6 290+voffset 564 234], ...
            'Style','frame', ...
            'Tag','frameFlags');
         
         h_listAvail = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[1 1 1], ...
            'FontSize',10, ...
            'Position',[15 300+voffset 240 200], ...
            'String',cols, ...
            'Style','listbox', ...
            'Tag','listAvail', ...
            'UserData',(1:length(s.name))', ...
            'Value',1);
         
         h_listSel = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[1 1 1], ...
            'FontSize',10, ...
            'Position',[320 300+voffset 240 200], ...
            'String','', ...
            'Style','listbox', ...
            'Enable','off', ...
            'Tag','listSel', ...
            'UserData',[], ...
            'Value',1);
         
         h_cmdAddAll = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''cols'')', ...
            'FontSize',10, ...
            'Position',[266 426+voffset 42 25], ...
            'String','>>', ...
            'Tag','cmdAddAll', ...
            'TooltipString','Add all columns');
         
         h_cmdAddSel = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''cols'')', ...
            'FontSize',10, ...
            'Position',[266 397+voffset 42 25], ...
            'String','>', ...
            'Tag','cmdAddSel', ...
            'TooltipString','Add selected column');
         
         h_cmdRemSel = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''cols'')', ...
            'FontSize',10, ...
            'Position',[266 368+voffset 42 25], ...
            'String','<', ...
            'Tag','cmdRemSel', ...
            'Enable','off', ...
            'TooltipString','Remove selected column');
         
         h_cmdRemAll = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''cols'')', ...
            'FontSize',10, ...
            'Position',[266 339+voffset 42 25], ...
            'String','<<', ...
            'Enable','off', ...
            'Tag','cmdRemAll', ...
            'TooltipString','Remove all columns');
         
         h_listAvailFlags = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[1 1 1], ...
            'FontSize',10, ...
            'Position',[14 118+voffset 240 132], ...
            'String',flags, ...
            'Style','listbox', ...
            'Tag','listAvailFlags', ...
            'UserData',(1:length(flags))', ...
            'Value',1);
         
         h_cmdRemAllFlags = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''flags'')', ...
            'FontSize',10, ...
            'Position',[266 128+voffset 42 25], ...
            'String','<<', ...
            'Enable','off', ...
            'Tag','cmdRemAllFlags', ...
            'TooltipString','Remove all flags');
         
         h_cmdRemSelFlags = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''flags'')', ...
            'FontSize',10, ...
            'Position',[266 157+voffset 42 25], ...
            'String','<', ...
            'Enable','off', ...
            'Tag','cmdRemSelFlags', ...
            'TooltipString','Remove selected flags');
         
         h_cmdAddSelFlags = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''flags'')', ...
            'FontSize',10, ...
            'Position',[266 186+voffset 42 25], ...
            'String','>', ...
            'Tag','cmdAddSelFlags', ...
            'TooltipString','Add selected flags');
         
         h_cmdAddAllFlags = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''flags'')', ...
            'FontSize',10, ...
            'Position',[266 215+voffset 42 25], ...
            'String','>>', ...
            'Tag','cmdAddAllFlags', ...
            'TooltipString','Add all flags');
         
         h_listSelFlags = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[1 1 1], ...
            'FontSize',10, ...
            'Position',[320 118+voffset 240 132], ...
            'String','', ...
            'Style','listbox', ...
            'Enable','off', ...
            'Tag','listSelFlags', ...
            'Value',1);
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'FontWeight','bold', ...
            'ForegroundColor',[0 0 0.8], ...
            'Position',[15 500+voffset 230 20], ...
            'String','Available Columns', ...
            'Style','text', ...
            'Tag','StaticText1');
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'FontWeight','bold', ...
            'ForegroundColor',[0 0 0.8], ...
            'Position',[320 500+voffset 230 20], ...
            'String','Selected Columns', ...
            'Style','text', ...
            'Tag','StaticText1');
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'FontWeight','bold', ...
            'ForegroundColor',[0 0 0.8], ...
            'Position',[18 250+voffset 230 20], ...
            'String',str1, ...
            'Style','text', ...
            'Tag','StaticText1');
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'FontWeight','bold', ...
            'ForegroundColor',[0 0 0.8], ...
            'Position',[323 250+voffset 230 20], ...
            'String',str2, ...
            'Style','text', ...
            'Tag','StaticText1');
         
         h_radioNull = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'Callback','ui_clearflags(''opt'')', ...
            'FontSize',10, ...
            'Position',[200 89+voffset 160 20], ...
            'String',strRadio1, ...
            'Style','radiobutton', ...
            'Tag','radioNull', ...
            'Value',radioNull_val);
         
         h_radioCull = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'Callback','ui_clearflags(''opt'')', ...
            'FontSize',10, ...
            'Position',[360 89+voffset 160 20], ...
            'String',strRadio2, ...
            'Style','radiobutton', ...
            'Tag','radioCull', ...
            'Value',radioCull_val);
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'FontWeight','bold', ...
            'ForegroundColor',[0 0 0.8], ...
            'Position',[30 87+voffset 160 20], ...
            'String',str3, ...
            'Style','text', ...
            'Tag','StaticText1');
         
         %init handles for optional fields
         h_radioClearFlags = [];
         h_radioRetainFlags = [];
         h_radioReplaceFlags = [];
         h_popFlagChoice = [];
         h_editPrefix = [];
                  
         %check for values mode and add additional fields
         if voffset > 0
            
            %check for flags2cols or clear flags
            if strcmp(mode,'flags2cols')
               
               uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[0.9 0.9 0.9], ...
                  'FontSize',10, ...
                  'FontWeight','bold', ...
                  'ForegroundColor',[0 0 0.8], ...
                  'Position',[30 87 170 20], ...
                  'String','Flag Column Prefix:', ...
                  'Style','text', ...
                  'Tag','StaticText1');
               
               h_editPrefix = uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[1 1 1], ...
                  'FontSize',10, ...
                  'FontWeight','normal', ...
                  'ForegroundColor',[0 0 0], ...
                  'Position',[200 87 100 20], ...
                  'String','Flag_', ...
                  'UserData','Flag_', ...
                  'HorizontalAlign','left', ...
                  'Style','edit', ...
                  'Tag','editPrefix', ...
                  'Callback','ui_clearflags(''textfield'',''editPrefix'')');
               
            else  %clear flags
               
               uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[0.9 0.9 0.9], ...
                  'FontSize',10, ...
                  'FontWeight','bold', ...
                  'ForegroundColor',[0 0 0.8], ...
                  'Position',[30 117 160 20], ...
                  'String','Flag Deletion Option:', ...
                  'Style','text', ...
                  'Tag','StaticText1');
               
               h_radioClearFlags = uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[0.9 0.9 0.9], ...
                  'Callback','ui_clearflags(''opt2'')', ...
                  'FontSize',10, ...
                  'Position',[200 119 90 20], ...
                  'String','Clear flags', ...
                  'Style','radiobutton', ...
                  'Tag','radioClearFlags', ...
                  'Value',1);
               
               h_radioRetainFlags = uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[0.9 0.9 0.9], ...
                  'Callback','ui_clearflags(''opt2'')', ...
                  'FontSize',10, ...
                  'Position',[290 119 130 20], ...
                  'String','Retain/lock flags', ...
                  'Style','radiobutton', ...
                  'Tag','radioRetainFlags', ...
                  'Value',0);
               
               h_radioReplaceFlags = uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[0.9 0.9 0.9], ...
                  'Callback','ui_clearflags(''opt2'')', ...
                  'FontSize',10, ...
                  'Position',[420 119 130 20], ...
                  'String','Replace/lock flags', ...
                  'Style','radiobutton', ...
                  'Tag','radioReplaceFlags', ...
                  'Value',0);
               
               uicontrol('Parent',h_dlg, ...
                  'BackgroundColor',[0.9 0.9 0.9], ...
                  'FontSize',10, ...
                  'FontWeight','normal', ...
                  'ForegroundColor',[0 0 0.8], ...
                  'Position',[200 87 80 20], ...
                  'String','New Flag:', ...
                  'Style','text', ...
                  'Tag','StaticText1');
               
               %call external function to add GUI flag picker
               ui_flagpicker('add',s,[285 87],h_dlg,'ui_clearflags(''newflags'')','off')
               h_popFlagChoice = findobj(h_dlg,'Tag','popFlagChoice');
               
            end
            
         end
         
         uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'FontWeight','bold', ...
            'ForegroundColor',[0 0 0.8], ...
            'Position',[30 57 120 20], ...
            'String','Other Options:', ...
            'Style','text', ...
            'Visible',optionvis, ...
            'Tag','StaticText1');
         
         h_chkOption = uicontrol('Parent',h_dlg, ...
            'BackgroundColor',[0.9 0.9 0.9], ...
            'FontSize',10, ...
            'Position',[150 59 350 20], ...
            'String',strOption, ...
            'Style','checkbox', ...
            'Tag','chkOption', ...
            'Visible',optionvis, ...
            'Value',0);
         
         h_cmdCancel = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''cancel'')', ...
            'FontSize',10, ...
            'ListboxTop',0, ...
            'Position',[10 10 75 25], ...
            'String','Cancel', ...
            'Tag','cmdCancel', ...
            'TooltipString','Cancel the operation and close the dialog window');
         
         h_cmdEval = uicontrol('Parent',h_dlg, ...
            'Callback','ui_clearflags(''eval'')', ...
            'Enable','off', ...
            'FontSize',10, ...
            'ListboxTop',0, ...
            'Position',[490 10 75 25], ...
            'String','Proceed', ...
            'Tag','cmdEval', ...
            'TooltipString','Proceed with selected options');
         
         uih = struct('s',s, ...
            'mode',mode, ...
            'h_cb',h_cb, ...
            'cb',cb, ...
            'cols',{cols}, ...
            'flags',{flags}, ...
            'listAvail',h_listAvail, ...
            'listSel',h_listSel, ...
            'listAvailFlags',h_listAvailFlags, ...
            'listSelFlags',h_listSelFlags, ...
            'cmdAddAll',h_cmdAddAll, ...
            'cmdAddSel',h_cmdAddSel, ...
            'cmdRemAll',h_cmdRemAll, ...
            'cmdRemSel',h_cmdRemSel, ...
            'cmdAddAllFlags',h_cmdAddAllFlags, ...
            'cmdAddSelFlags',h_cmdAddSelFlags, ...
            'cmdRemAllFlags',h_cmdRemAllFlags, ...
            'cmdRemSelFlags',h_cmdRemSelFlags, ...
            'radioNull',h_radioNull, ...
            'radioCull',h_radioCull, ...
            'radioClearFlags',h_radioClearFlags, ...
            'radioRetainFlags',h_radioRetainFlags, ...
            'radioReplaceFlags',h_radioReplaceFlags, ...
            'popFlagChoice',h_popFlagChoice, ...
            'editPrefix',h_editPrefix, ...
            'chkOption',h_chkOption, ...
            'cmdCancel',h_cmdCancel, ...
            'cmdEval',h_cmdEval);
         
         set(h_dlg,'UserData',uih,'Visible','on')
         
         drawnow
         
      else  %no flags in any column
         
         messagebox('init','No flags are assigned to any column in this data set',[],'Information',[0.95 0.95 0.95],0)
         
      end
      
   end
   
else
   
   h_dlg = gcf;
   
   %check for dialog
   if strcmp(get(h_dlg,'Tag'),'mnuClearFlags')
      
      uih = get(h_dlg,'UserData');      
      
      switch op
         
         case 'cancel'  %process cancel operation
            
            delete(h_dlg)
            drawnow
            ui_aboutgce('reopen')  %check for last window
            
         case 'eval'  %process proceed operation
            
            %get column selection indices
            Icols = get(uih.listSel,'UserData');
            Iflags = get(uih.listSelFlags,'UserData');
            
            %get option selection
            option = get(uih.chkOption,'Value');
            mode = uih.mode;
            
            %handle flag codes
            flagcodes = '';
            err = [];
            for n = 1:length(Iflags)
               newcode = splitstr(uih.flags{Iflags(n)},'=');
               if ~isempty(newcode)
                  flagcodes = [flagcodes,newcode{1}];
               else
                  err = [err,n];
               end
            end
            
            if ~isempty(flagcodes) && ~isempty(Icols)
               
               s = uih.s;
               
               %execute appropriate function based on mode, options
               if strcmp(mode,'flags')
                  
                  if get(uih.radioNull,'Value') == 1
                     lockopt = 1;
                  else
                     lockopt = 2;
                  end
                  
                  [s2,msg] = clearflags(s,flagcodes,Icols,lockopt,option);
                  
               elseif strcmp(mode,'flags2cols')
                  
                  %get flag prefix
                  prefix = deblank(get(uih.editPrefix,'String'));
                  
                  if get(uih.radioNull,'Value') == 1
                     encode = 0;
                  else
                     encode = 1;
                  end
                  
                  [s2,msg] = flags2cols_selected(s,flagcodes,Icols,encode,option,prefix);
                  
               else  %values
                  
                  %check null/cull option first
                  if get(uih.radioNull,'Value') == 1  %nullflags
                     
                     if get(uih.radioRetainFlags,'Value') == 1
                        
                        clearflagopt = 0;
                        newflag = '';  %override newflag
                        
                     elseif get(uih.radioReplaceFlags,'Value') == 1
                        
                        clearflagopt = 0;
                        
                        %get newflag option
                        Iflag = get(uih.popFlagChoice,'Value');
                        newflagcodes = get(uih.popFlagChoice,'Userdata');
                        newflag = newflagcodes{Iflag};
                        
                        %generate updated flag metadata in case user has updated the definitions in the dialog
                        flagmeta = '';
                        if ~isempty(newflag)
                           defs = cellstr(get(uih.popFlagChoice,'String'));  %convert list to cell array
                           flagdefs = cell2commas(strrep(defs(2:end),'--','='));  %generate flag def metadata, skipping no flag option
                           if ~isempty(flagdefs)
                              flagmeta = [{'Data'},{'Codes'},{flagdefs}];  %format flag codes as metadata field for dialog
                           end
                        end
                        
                        %update flag definitions in metadata in case new code added
                        if ~isempty(newflag) && ~isempty(flagmeta)
                           s = addmeta(s,flagmeta,0,'ui_clearflags');
                        end
                        
                     else  %radioClearFlags
                        
                        clearflagopt = 1;
                        newflag = '';
                        
                     end
                     
                     [s2,msg] = nullflags(s,flagcodes,Icols,option,clearflagopt,newflag);
                     
                  else  %cullflags
                     
                     [s2,msg] = cullflags(uih.s,flagcodes,Icols,option);
                     
                  end
                  
               end
               
               %check for return data
               if ~isempty(s2)
                  delete(h_dlg)
                  drawnow
                  err = 0;
                  if ~isempty(uih.h_cb) && ~isempty(uih.cb)
                     h_fig = parent_figure(uih.h_cb);
                     if ~isempty(h_fig)
                        figure(h_fig)
                        set(uih.h_cb,'UserData',s2)
                        try
                           eval(uih.cb)
                        catch
                           err = 1;
                        end
                        if err == 1
                           ui_editor('init',s2)
                           messagebox('init','An error occurred returning the modified structure to the original editor window', ...
                              '','Error',[.9 .9 .9]);
                        elseif ~isempty(msg)
                           messagebox('init',['Note: ',msg], ...
                              '','Warning',[.9 .9 .9]);
                        end
                     else
                        ui_editor('init',s2);
                        messagebox('init','Could not return structure to original editor window', ...
                           '','Warning',[.9 .9 .9]);
                     end
                  else
                     ui_editor('init',s2);
                  end
               else
                  messagebox('init',char('An error occurred clearing the QA/QC flags or flagged values',['(error: ',msg,')']), ...
                     '','Error',[.9 .9 .9]);
               end
            else
               messagebox('init','Invalid flag codes or column selections - operation cancelled', ...
                  '','Error',[.9 .9 .9]);
            end
            
         case 'cols'  %handle column selection events
            
            %get cached data for lists and fields
            tag = get(gcbo,'Tag');  %tag of current button
            avail = get(uih.listAvail,'UserData');  %cell array of available columns list
            Iavail = get(uih.listAvail,'Value');    %selection index for available columns
            sel = get(uih.listSel,'UserData');      %cell array of selected columns list
            Isel = get(uih.listSel,'Value');        %selection index for selected columns
            
            %set up arrays for selection based on button pressed
            switch tag
               case 'cmdAddAll'
                  avail = [];
                  sel = (1:length(uih.s.name))';
               case 'cmdAddSel'
                  sel = sort([sel ; avail(Iavail)]);
                  avail = setdiff(avail,avail(Iavail));
               case 'cmdRemSel'
                  avail = sort([avail ; sel(Isel)]);
                  sel = setdiff(sel,sel(Isel));
               case 'cmdRemAll'
                  avail = (1:length(uih.s.name))';
                  sel = [];
            end
            
            %update available columns list
            if isempty(avail)
               set(uih.listAvail, ...
                  'String','', ...
                  'Value',1, ...
                  'ListBoxTop',1, ...
                  'UserData',[], ...
                  'Enable','off')
               set(uih.cmdAddAll,'Enable','off')
               set(uih.cmdAddSel,'Enable','off')
            else
               toprow = get(uih.listAvail,'ListBoxTop');
               if toprow > length(avail)
                  toprow = 1;
               end
               set(uih.listAvail, ...
                  'String',uih.cols(avail), ...
                  'Value',min(Iavail,length(avail)), ...
                  'ListBoxTop',toprow, ...
                  'UserData',avail, ...
                  'Enable','on')
               set(uih.cmdAddAll,'Enable','on')
               set(uih.cmdAddSel,'Enable','on')
            end
            
            %update selected columns list
            if isempty(sel)
               set(uih.listSel, ...
                  'String','', ...
                  'Value',1, ...
                  'ListBoxTop',1, ...
                  'UserData',[], ...
                  'Enable','off')
               set(uih.cmdRemAll,'Enable','off')
               set(uih.cmdRemSel,'Enable','off')
            else
               toprow = get(uih.listSel,'ListBoxTop');
               if toprow > length(sel)
                  toprow = 1;
               end
               set(uih.listSel, ...
                  'String',uih.cols(sel), ...
                  'Value',min(Isel,length(sel)), ...
                  'ListBoxTop',toprow, ...
                  'UserData',sel, ...
                  'Enable','on')
               set(uih.cmdRemAll,'Enable','on')
               set(uih.cmdRemSel,'Enable','on')
            end
            
            %update eval button state based on status of selected columns list
            if isempty(sel)
               set(uih.cmdEval,'Enable','off')
            elseif ~isempty(get(uih.listSelFlags,'UserData'))
               set(uih.cmdEval,'Enable','on')
            end
            
         case 'flags'  %handle flag list events
            
            %get cached form data
            tag = get(gcbo,'Tag');  %get tag of pressed button
            avail = get(uih.listAvailFlags,'UserData');  %get list of available flags
            Iavail = get(uih.listAvailFlags,'Value');    %get selection index of available flags
            sel = get(uih.listSelFlags,'UserData');      %get list of selected flags
            Isel = get(uih.listSelFlags,'Value');        %get selection index of selected flags
            
            %set up arrays based on which button was pressed
            switch tag
               case 'cmdAddAllFlags'
                  avail = [];
                  sel = (1:length(uih.flags))';
               case 'cmdAddSelFlags'
                  sel = sort([sel ; avail(Iavail)]);
                  avail = setdiff(avail,avail(Iavail));
               case 'cmdRemSelFlags'
                  avail = sort([avail ; sel(Isel)]);
                  sel = setdiff(sel,sel(Isel));
               case 'cmdRemAllFlags'
                  avail = (1:length(uih.flags))';
                  sel = [];
            end
            
            %update available flags list
            if isempty(avail)
               set(uih.listAvailFlags, ...
                  'String','', ...
                  'Value',1, ...
                  'ListBoxTop',1, ...
                  'UserData',[], ...
                  'Enable','off')
               set(uih.cmdAddAllFlags,'Enable','off')
               set(uih.cmdAddSelFlags,'Enable','off')
            else
               toprow = get(uih.listAvail,'ListBoxTop');
               if toprow > length(avail)
                  toprow = 1;
               end
               set(uih.listAvailFlags, ...
                  'String',uih.flags(avail), ...
                  'Value',min(Iavail,length(avail)), ...
                  'ListBoxTop',toprow, ...
                  'UserData',avail, ...
                  'Enable','on')
               set(uih.cmdAddAllFlags,'Enable','on')
               set(uih.cmdAddSelFlags,'Enable','on')
            end
            
            %updated selected flags list
            if isempty(sel)
               set(uih.listSelFlags, ...
                  'String','', ...
                  'Value',1, ...
                  'ListBoxTop',1, ...
                  'UserData',[], ...
                  'Enable','off')
               set(uih.cmdRemAllFlags,'Enable','off')
               set(uih.cmdRemSelFlags,'Enable','off')
            else
               toprow = get(uih.listSel,'ListBoxTop');
               if toprow > length(sel)
                  toprow = 1;
               end
               set(uih.listSelFlags, ...
                  'String',uih.flags(sel), ...
                  'Value',min(Isel,length(sel)), ...
                  'ListBoxTop',toprow, ...
                  'UserData',sel, ...
                  'Enable','on')
               set(uih.cmdRemAllFlags,'Enable','on')
               set(uih.cmdRemSelFlags,'Enable','on')
            end
            
            %set eval button state based on selected columns and flags
            if isempty(sel)
               set(uih.cmdEval,'Enable','off')
            elseif ~isempty(get(uih.listSel,'UserData'))
               set(uih.cmdEval,'Enable','on')
            end
            
         case 'opt'  %handle radio button selection events for null/cull
            
            tag = get(gcbo,'Tag');
            
            if strcmp(tag,'radioNull')
               set(uih.radioNull,'Value',1)
               set(uih.radioCull,'Value',0)
            else
               set(uih.radioNull,'Value',0)
               set(uih.radioCull,'Value',1)
            end
            
            ui_clearflags('controls')  %set button states
            
         case 'opt2'  %handle radio button selection events for flag handling
            
            tag = get(gcbo,'Tag');
            
            %set radio selections and button states
            if strcmp(tag,'radioClearFlags')
               set(uih.radioClearFlags,'Value',1)
               set(uih.radioRetainFlags,'Value',0)
               set(uih.radioReplaceFlags,'Value',0)
            elseif strcmp(tag,'radioRetainFlags')
               set(uih.radioClearFlags,'Value',0)
               set(uih.radioRetainFlags,'Value',1)
               set(uih.radioReplaceFlags,'Value',0)
            else  %radioReplaceFlags
               set(uih.radioClearFlags,'Value',0)
               set(uih.radioRetainFlags,'Value',0)
               set(uih.radioReplaceFlags,'Value',1)
            end
            
            ui_clearflags('controls')  %set button states
            
         case 'textfield'  %validate required text fields
            
            %check for second argument (field tag)
            if exist('s','var') == 1
               
               %get handle of target control
               tag = s;
               h = findobj(h_dlg,'Tag',tag);
               
               %check for non-empty string
               if ~isempty(h)
                  str = deblank(get(h,'String'));
                  if ~isempty(str)
                     set(h,'UserData',str)
                  else
                     set(h,'String',get(h,'UserData'))
                     messagebox('init','This field cannot be empty - value reset',[],'Error',[0.95 0.95 0.95])
                  end                     
               end
               
            end
            
         case 'controls'  %set radio control and subcontrol options based on state
            
            %get null/cull option (mutually exclusive)
            cullval = get(uih.radioCull,'Value');
            
            %get clear/retain/replace option
            replaceval = get(uih.radioReplaceFlags,'Value');
            
            %get handles for flag picking uicontrols
            Iflagpicker = findobj(gcf,'Tag','popFlagChoice');
            Iflagbutton = findobj(gcf,'Tag','cmdFlagList');
            
            %check for cull option first
            if cullval == 1
               set(uih.radioClearFlags,'Value',1)  %force clear option on for cull mode
               set(uih.radioRetainFlags,'Value',0,'Enable','off')  %force retain option off and disabled for cull mode
               set(uih.radioReplaceFlags,'Value',0,'Enable','off') %force replace option off and disabled for cull mode
               set(Iflagpicker,'Enable','off','Value',1)  %force flag picker option off
               set(Iflagbutton,'Enable','off')  %disable flag picker button
            else
               set(uih.radioRetainFlags,'Enable','on')  %enable retain flags option
               set(uih.radioReplaceFlags,'Enable','on') %enable replace flags option
               if replaceval == 1
                  %enable flag picker if mode = null and replace option chosen
                  set(Iflagpicker,'Enable','on')  %force flag picker option on
                  set(Iflagbutton,'Enable','on')  %enable flag picker button
               else
                  %disable flag picker if mode = null and clear or retain flag options chosen
                  set(Iflagpicker,'Enable','off','Value',1)  %force flag picker option off
                  set(Iflagbutton,'Enable','off')  %disable flag picker button
               end
            end
            
      end
      
   end
   
end


