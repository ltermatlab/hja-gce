function ui_copyflags(op,s,h_cb,cb)
%GCE Data Toolbox dialog for copying composite flags from one or more data columns
%and adding to or replacing the existing flag arrays of one or more other columns
%(i.e. used to propagate flags to dependent/calculated columns).
%
%syntax: ui_copyflags(op,s,h_cb,cb)
%
%input:
%  op = operation (default = 'init' to initialize dialog)
%  s = data structure
%
%output:
%  none
%
%(c)2002-2011 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 01-Jun-2011

if nargin == 0
   op = 'init';
elseif isstruct(op)
   s = op;
   op = 'init';
end

if exist('s','var') ~= 1
   s = [];
end

if strcmp(op,'init')  %build gui

   if exist('h_cb','var') ~= 1
      h_cb = [];
   end

   if exist('cb','var') ~= 1
      cb = '';
   end

   res = get(0,'ScreenSize');
   bgcolor = [.95 .95 .95];
   figpos = [max(1,0.5.*(res(3)-535)) max(50,0.5.*(res(4)-440)) 535 440];

   h_dlg = figure('Visible','off', ...
      'Color',bgcolor, ...
      'KeyPressFcn','figure(gcf)', ...
      'MenuBar','none', ...
      'Name','Copy Flags', ...
      'NumberTitle','off', ...
      'Position',figpos, ...
      'Tag','dlgCopyFlags', ...
      'ToolBar','none', ...
      'Resize','off', ...
      'DefaultuicontrolUnits','pixels', ...
      'CloseRequestFcn','ui_copyflags(''cancel'')');

   if mlversion >= 7
      set(h_dlg,'WindowStyle','normal')
      set(h_dlg,'DockControls','off')
   end

   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'ForegroundColor',[0 0 0], ...
      'BackgroundColor',bgcolor, ...
      'Position',[1 1 figpos(3) figpos(4)]);

   %create menus
   h_mnuFile = uimenu('Parent',h_dlg, ...
      'Label','File');

   h_mnuEdit = uimenu('Parent',h_dlg, ...
      'Label','Edit');

   h_mnuLoad = uimenu('Parent',h_mnuFile, ...
      'Label','Load', ...
      'Callback','ui_copyflags(''load'')', ...
      'Tag','mnuLoad', ...
      'UserData',pwd);

   h_mnuClose = uimenu('Parent',h_mnuFile, ...
      'Label','Close', ...
      'Callback','ui_copyflags(''cancel'')', ...
      'Separator','on', ...
      'Tag','mnuCancel');

   uimenu('Parent',h_mnuEdit, ...
      'Label','Reset Lists', ...
      'Callback','ui_copyflags(''newdata'')', ...
   	'Tag','mnuReset');

   %create controls
   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[4 410 215 18], ...
      'String','Available Columns', ...
      'Style','text', ...
      'Tag','lblAvailable');

   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[250 410 250 18], ...
      'String','Column Selections', ...
      'Style','text', ...
      'Tag','lblSelections');

   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'BackgroundColor',[.9 .9 .9], ...
      'ForegroundColor',[0 0 0], ...
      'Position',[240 245 285 162]);

   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'BackgroundColor',[.9 .9 .9], ...
      'ForegroundColor',[0 0 0], ...
      'Position',[240 50 285 185]);

   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[.9 .9 .9], ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[290 380 215 18], ...
      'String','Copy Composite Flags From', ...
      'Style','text', ...
      'Tag','lblCopy');

   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[.9 .9 .9], ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[290 210 215 18], ...
      'String','Copy Composite Flags To', ...
      'Style','text', ...
      'Tag','lblAnalyze');

   h_listAvailable = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[6 50 225 360], ...
      'String',' ', ...
      'Style','listbox', ...
      'Tag','listAvailable', ...
      'Value',1);

   h_listCopyFlags = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[290 260 225 120], ...
      'String',' ', ...
      'Style','listbox', ...
      'Tag','listCopyFlags', ...
      'Value',1);

   h_listReceiveFlags = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[290 90 225 120], ...
      'String',' ', ...
      'Style','listbox', ...
      'Tag','listReceiveFlags', ...
      'Value',1);

   h_cmdAddCopy = uicontrol('Parent',h_dlg, ...
      'Callback','ui_copyflags(''source_add'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[249 320 30 22], ...
      'String','>', ...
      'ToolTipString','Add selected column to the ''Copy Flags From'' list', ...
      'Tag','cmdAddCopy');

   h_cmdRemCopy = uicontrol('Parent',h_dlg, ...
      'Callback','ui_copyflags(''source_rem'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[249 290 30 22], ...
      'String','<', ...
      'ToolTipString','Remove selected column from the ''Copy Flags From'' list', ...
      'Tag','cmdRemCopy');

   h_cmdAddReceive = uicontrol('Parent',h_dlg, ...
      'Callback','ui_copyflags(''target_add'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[249 150 30 22], ...
      'String','>', ...
      'ToolTipString','Add selected column to the ''Add/Replace Flags For'' list', ...
      'Tag','cmdAddReceive');

   h_cmdRemReceive = uicontrol('Parent',h_dlg, ...
      'Callback','ui_copyflags(''target_rem'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[249 120 30 22], ...
      'String','<', ...
      'ToolTipString','Remove selected column from the ''Add/Replace Flags For'' list', ...
      'Tag','cmdRemReceive');

   h_chkReplace = uicontrol('Parent',h_dlg, ...
      'Position',[270 60 240 20], ...
      'Style','checkbox', ...
      'FontSize',10, ...
      'BackgroundColor',[.9 .9 .9], ...
      'String','Replace all existing flags (overwrite)', ...
      'Value',0, ...
      'Tag','chkReplace');

   h_cmdCancel = uicontrol('Parent',h_dlg, ...
      'Callback','ui_copyflags(''cancel'')', ...
      'FontSize',9, ...
      'Position',[15 10 60 25], ...
      'String','Cancel', ...
      'TooltipString','Cancel the operation and close the dialog window', ...
      'Tag','cmdCancel');

   h_chkClose = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[150 10 270 20], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'String','Close dialog after exporting the results', ...
      'Value',1, ...
      'Tag','chkClose');

   h_cmdEval = uicontrol('Parent',h_dlg, ...
      'Callback','ui_copyflags(''eval'')', ...
      'Enable','off', ...
      'FontSize',9, ...
      'ListboxTop',0, ...
      'Position',[460 10 60 25], ...
      'String','Proceed', ...
      'TooltipString','Perform the aggregated statistics and open the structure for editing', ...
      'Tag','cmdEval');

   uih = struct( ...
      's',s, ...
      'h_cb',h_cb, ...
      'cb',cb, ...
      'mnuLoad',h_mnuLoad, ...
      'mnuClose',h_mnuClose, ...
      'listAvailable',h_listAvailable, ...
      'listCopyFlags',h_listCopyFlags, ...
      'listReceiveFlags',h_listReceiveFlags, ...
      'cmdAddCopy',h_cmdAddCopy, ...
      'cmdRemCopy',h_cmdRemCopy, ...
      'cmdAddReceive',h_cmdAddReceive, ...
      'cmdRemReceive',h_cmdRemReceive, ...
      'chkReplace',h_chkReplace, ...
      'cmdEval',h_cmdEval, ...
      'cmdCancel',h_cmdCancel', ...
      'chkClose',h_chkClose);

   set(h_dlg,'Visible','on','UserData',uih)
   drawnow

   if ~isempty(s)
      ui_copyflags('newdata')
   end

else  %handle callbacks

   h_dlg = [];

   if length(findobj) > 2
      h_dlg = gcf;
      if ~strcmp(get(h_dlg,'Tag'),'dlgCopyFlags')
         h_dlg = [];
      end
   end

   if ~isempty(h_dlg)

      uih = get(h_dlg,'UserData');

      switch op

      case 'cancel'  %close dialog

         delete(h_dlg)
         ui_aboutgce('reopen')  %check for last window

      case 'newdata'  %reset dialog for new data

         s = uih.s;

         [val,stype] = gce_valid(s);

         if val == 1 && strcmp(stype,'data') == 1

            set(uih.cmdEval,'UserData',s)  %store data structure
            set(uih.listAvailable,'UserData',[1:length(s.name)],'Value',1)  %store full index
            set(uih.listCopyFlags,'UserData',[],'Value',1)  %clear aggregate index
            set(uih.listReceiveFlags,'UserData',[],'Value',1)  %clear analyze index

            ui_copyflags('update')

         else

            messagebox('init', ...
               '  Invalid GCE Data Structure  ', ...
               [], ...
               'Error', ...
               [.9 .9 .9]);

         end

      case 'update'  %update lists based on data structure columns and list indices

         s = uih.s;

         if isstruct(s)

            I_avail = get(uih.listAvailable,'UserData');
            I_aggr = get(uih.listCopyFlags,'UserData');
            I_analyze = get(uih.listReceiveFlags,'UserData');

            vars = s.name;
            units = s.units;
            cols = length(s.name);
            varstr = listcols(s,4);

            if ~isempty(I_avail)
               s_avail = varstr(I_avail);
            else
               s_avail = {''};
            end

            if ~isempty(I_aggr)
               s_aggr = varstr(I_aggr);
            else
               s_aggr = {''};
            end

            if ~isempty(I_analyze)
               s_analyze = varstr(I_analyze);
            else
               s_analyze = {''};
            end

            set(uih.listAvailable, ...
               'String',s_avail, ...
               'Value',max(1,min(get(uih.listAvailable,'Value'),length(I_avail))), ...
               'ListboxTop',min(get(uih.listAvailable,'ListboxTop'),length(I_avail)))

            set(uih.listCopyFlags, ...
               'String',s_aggr, ...
               'Value',max(1,min(get(uih.listCopyFlags,'Value'),length(I_aggr))), ...
               'ListboxTop',min(get(uih.listCopyFlags,'ListboxTop'),max(1,length(I_aggr))))

            set(uih.listReceiveFlags, ...
               'String',s_analyze, ...
               'Value',max(1,min(get(uih.listReceiveFlags,'Value'),length(I_analyze))), ...
               'ListboxTop',min(get(uih.listReceiveFlags,'ListboxTop'),max(1,length(I_analyze))))

            %toggle add/remove buttons according to list status
            if isempty(I_avail)
               set(uih.cmdAddCopy,'Enable','off')
               set(uih.cmdAddReceive,'Enable','off')
            else
               set(uih.cmdAddCopy,'Enable','on')
               set(uih.cmdAddReceive,'Enable','on')
            end

            if isempty(I_aggr)
               set(uih.cmdRemCopy,'Enable','off')
            else
               set(uih.cmdRemCopy,'Enable','on')
            end

            if isempty(I_analyze)
               set(uih.cmdRemReceive,'Enable','off')
            else
               set(uih.cmdRemReceive,'Enable','on')
            end

            %toggle proceed button according to list status
            if ~isempty(I_aggr) && ~isempty(I_analyze)
               set(uih.cmdEval,'Enable','on')
            else
               set(uih.cmdEval,'Enable','off')
            end

            drawnow

         end

      case 'eval'  %perform flag copy operation, return data

         s = uih.s;

         I_copy = get(uih.listCopyFlags,'UserData');
         I_receive = get(uih.listReceiveFlags,'UserData');
         replaceopt = get(uih.chkReplace,'Value');
         if replaceopt == 1
            opt = 'replace';
         else
            opt = 'add';
         end

         set(gcf,'Pointer','watch')
         drawnow

         try

            [s2,msg] = copyflags(s,I_copy,I_receive,opt);

            set(gcf,'Pointer','arrow')
            drawnow

            if ~isempty(s2)

               closeval = get(uih.chkClose,'Value');
               if closeval == 1  %close dialog
                  delete(h_dlg)
                  drawnow
               else  %update cached data structure for serial operations if dialog not closed
                  uih.s = s2;
                  set(h_dlg,'UserData',uih)
               end

               if ~isempty(uih.h_cb) && ~isempty(uih.cb)
                  h_fig = parent_figure(uih.h_cb);
                  if ~isempty(h_fig)
                     figure(h_fig)
                     set(uih.h_cb,'UserData',s2)
                     eval(uih.cb,'err = 1;')
                     if ~isempty(msg)
                        messagebox('init',['Note: ',msg], ...
                           '','Warning',[.9 .9 .9]);
                     end
                  else
                     ui_editor('init',s2);
                     messagebox('init','Could not return structure to original editor window', ...
                        '','Warning',[.9 .9 .9]);
                  end
               else
                  ui_editor('init',s2);
               end

            else
               messagebox('init','Could not propagate flags using the selected columns', ...
                  '','Error',[.9 .9 .9]);
            end

         catch

            set(gcf,'Pointer','arrow')
            drawnow

            messagebox('init','Column selections are invalid', ...
               '','Error',[.9 .9 .9]);

         end

      case 'load'  %load a data structure from disk

         %open file selection dialog starting in last directory
         curpath = pwd;
         lastpath = get(uih.mnuLoad,'UserData');
         if ~isempty(lastpath)
            cd(lastpath)
         end
         [fn,pn] = uigetfile('*.mat;*.MAT','Select a file containing a GCE Data Structure');
         cd(curpath)
         drawnow

         if fn ~= 0

            set(uih.mnuLoad,'UserData',pn)  %update cached path

            err = 0;
            vars = [];

            pn = clean_path(pn);
            try
               vars = load([pn,filesep,fn],'-mat');
            catch
               err = 1;
            end

            if err == 0 && isstruct(vars)

               vnames = fieldnames(vars);

               if length(vnames) > 1
                  Isel = listdialog('liststring',vnames, ...
                     'selectionmode','single', ...
                     'promptstring','Select a variable from the list to load', ...
                     'name','Select Variable');
               else
                  Isel = 1;
               end

               if ~isempty(Isel)

                  eval(['s = vars.',vnames{Isel},';'])

                  set(uih.cmdEval,'UserData',s)

                  ui_copyflags('newdata')

               end

            else

               messagebox('init', ...
                  ['''',fn,''' is not a valid Matlab data file'], ...
                  [], ...
                  'Error', ...
                  [.9 .9 .9]);

            end

         end

      case 'copysel'  %generic handler for list copy operations

         %get handles
         h_source = get(uih.cmdAddCopy,'UserData');
         h_target = get(uih.cmdRemCopy,'UserData');
         h_list = uih.listAvailable;

         if ~isempty(h_source) && ~isempty(h_target)

            %get indices
            I_target = get(h_target,'UserData');
            I_source = get(h_source,'UserData');
            I_sel = I_source(get(h_source,'Value'));

            %update indices
            I_target = [I_target,I_sel];
            I_source = I_source(find(I_source~=I_sel));

            %store indices
            set(h_target,'UserData',I_target)
            set(h_source,'UserData',I_source)

            %resort master list if adding rows back to list
            if h_target == h_list
	            Ilist = get(h_list,'UserData');
   	         [Ilist,I] = sort(Ilist);
               Isel = find(Ilist==I_target(end));
	            set(h_list,'UserData',sort(Ilist),'Value',Isel)
            else
               set(h_target,'Value',length(I_target))
            end

            %update uicontrols
            ui_copyflags('update');

         end

      case 'source_add'  %add flag source column to list

         %assign handles
         set(uih.cmdAddCopy,'UserData',uih.listAvailable);  %source
         set(uih.cmdRemCopy,'UserData',uih.listCopyFlags);  %target

         %update listboxes
         ui_copyflags('copysel')

      case 'source_rem'  %remove flag source column from list

         %assign handles
         set(uih.cmdAddCopy,'UserData',uih.listCopyFlags);  %source
         set(uih.cmdRemCopy,'UserData',uih.listAvailable);  %target

         %update listboxes
         ui_copyflags('copysel')

      case 'target_add'  %add flag target column to list

         %assign handles
         set(uih.cmdAddCopy,'UserData',uih.listAvailable);  %source
         set(uih.cmdRemCopy,'UserData',uih.listReceiveFlags);  %target

         %update listboxes
         ui_copyflags('copysel')

      case 'target_rem'  %remove flag target column from list

         %assign handles
         set(uih.cmdAddCopy,'UserData',uih.listReceiveFlags);  %source
         set(uih.cmdRemCopy,'UserData',uih.listAvailable);  %target

         %update listboxes
         ui_copyflags('copysel')

      end

   end

end