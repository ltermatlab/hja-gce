function ui_exportasc(op,s,pn)
%GUI dialog for exporting data and metadata from a GCE Data Structure in ASCII text format
%
%syntax: ui_exportasc(op,s,fn,pn)
%
%input:
%  op = operation ('init' to initialize dialog)
%  s = data structure for single-file export mode or [] for batch export mode
%  pn = initial pathname (default = current data set editor load path)
%
%
%(c)2002-2014 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 10-Sep-2014

%default to init
if exist('op','var') ~= 1
   op = 'init';
end

if strcmp(op,'init') %create the dialog
   
   %check for data structure input
   if exist('s','var') ~= 1
      s = [];
   end
   
   %generate column list for grouped statistics and date conversion if file mode with valid GCE structure
   datecols = {'Automatic (first string or numeric datetime column)'};
   dateformatvis = 'on';
   if gce_valid(s,'data')
      groupcols = [{'Ungrouped statistics'} ; ...
         cellstr([repmat('Group by ',length(s.name),1),char(s.name')])];
      vtypes = get_type(s,'variabletype');
      dtypes = get_type(s,'datatype');
      Idt = find(strcmp('datetime',vtypes) & (strcmp('s',dtypes) | strcmp('f',dtypes)));
      if ~isempty(Idt)
         datecols = [datecols ; s.name(Idt)'];   
      else
         datecols = {'<no date/time columns present>'};
         dateformatvis = 'off';
      end
   else
      groupcols = {'Ungrouped statistics'}; 
   end
   
   %check for omitted path
   if exist('pn','var') ~= 1
      pn = getpath('load');
   end
   
   %set default save path
   pn_save = getpath('save');
   
   %try to use GCE editor savepath
   if isempty(pn)
      if length(findobj) > 1
         h_editor = findobj('Tag','dlgDSEditor');  %get handles of open editor windows
         if ~isempty(h_editor)
            pn = get(findobj(h_editor(1),'Tag','mnuSave'),'UserData');  %get savepath from load menu userdata
         end
      end
   end
   
   %validate path, defaulting to current directory if invalid
   if isempty(pn)
      pn = pwd;
   elseif ~isdir(pn)
      pn = pwd;
   else
      pn = clean_path(pn);
   end
   
   %set mode based on s argument
   if gce_valid(s,'data') == 1
      dialog_mode = 'file';
   else
      dialog_mode = 'batch';
   end
   
   %load preferences
   prefs = [];
   if exist('ui_exportasc.mat','file') == 2
      try
         v = load('ui_exportasc.mat','-mat');
         prefs = v.prefs;
      catch
         prefs = [];
      end
   end
   
   %supply default preferences if not found
   if ~isstruct(prefs)
      prefs = struct('fileFormat','tab');
      prefs.delimiter = '\t';
      prefs.metaStyle = 'LTER';
      prefs.headerStyle = 'B';
      prefs.metaFile = 1;
      prefs.flagOption = '';
      prefs.encodeOption1 = 'M';
      prefs.encodeOption2 = 'D';
      prefs.terminator = '\r\n';
      prefs.missing = '';
      prefs.leader = '';
      prefs.maxrows = 0;
      prefs.dateformat = -999;
   elseif ~isfield(prefs,'dateformat')
      prefs.dateformat = -999;  %add missing dateformat to legacy settings
   end
   
   %init metadata styles list
   metastylestr = '';
   metastylelist = [];
   
   %retrieve styles from metastyles.mat database
   if exist('metastyles.mat','file') == 2
      try
         v = load('metastyles.mat');
         metastylestr ={v.styles.description}';
         metastylelist = {v.styles.name}';
      catch
         metastylestr = '';
         metastylelist = [];
      end
   end
   
   %only use xml style if styles database not found
   if isempty(metastylestr) || isempty(metastylelist)
      metastylestr = {'Native GCE XML (experimental)'};
      metastylelist = {'xml'};
      metastyleval = 1;
   else
      %look up preference to determine index
      Istyle = find(strcmp(prefs.metaStyle,metastylelist));
      if ~isempty(Istyle)
         metastyleval = Istyle(1);
      else
         metastyleval = 1;  %use first option if not matched
      end
   end
   
   %define format options and match preference
   formatstr = {'Tab-delimited text'; ...
      'Comma-separated value (CSV)'; ...
      'Comma-delimited text'; ...
      'Space-delimited text'};
   formatlist = {'tab','\t' ; 'csv',',' ; 'del',',' ; 'del','  '};
   Iformat = find(strcmp(prefs.fileFormat,formatlist(:,1)) & strcmp(prefs.delimiter,formatlist(:,2)));
   if ~isempty(Iformat)
      formatval = Iformat(1);
   else
      formatval = 1;
   end
   
   %define header option list and selection
   headerstr = {'Full header (with metadata)'; ...
      'Brief header'; ...
      'Column titles only'; ...
      'No header'};
   headerlist = {'F','B','T','N'};
   Iheaderopt = find(strcmp(prefs.headerStyle,headerlist));
   if ~isempty(Iheaderopt)
      headerval = Iheaderopt;
   else
      headerval = 2;
   end
   
   %define flag handling option list and selection
   flagoptions = {'Retain all flagged values'; ...
      'Clear values assigned any flag (convert to missing)'; ...
      'Clear values assigned specific flags'; ...
      'Delete rows with values assigned any flag'; ...
      'Delete rows with values assigned specific flags'};
   flagoptionlist = {'','nullall','nullcust','cullall','cullcust'};
   Iflagopt = find(strcmp(prefs.flagOption,flagoptionlist));
   if ~isempty(Iflagopt)
      flagoptionval = Iflagopt;
   else
      flagoptionval = 1;
   end
   
   %define flag encoding option list and selection
   encodestr = {'Text flag columns (adjacent to data)'; ...
      'Text flag columns (appended)'; ...
      'Coded integer flag columns (adjacent to data)'; ...
      'Coded integer flag columns (appended)'; ...
      'Display flags inline with data values'; ...
      'Append a single combined text flag column'; ...
      'Do not display flags (ignore)'};
   encodelist = {'M','MA','E','EA','I','C','N'};
   Iencodeopt = find(strcmp(prefs.encodeOption1,encodelist));
   if ~isempty(Iencodeopt)
      encodeval = Iencodeopt;
   else
      encodeval = 1;
   end
   
   %define secondary flag encoding option list and selection
   encodestr2 = {'Only if flags assigned';'All data/calc columns';'All data/calc + other flags';'All columns'};
   encodelist2 = {'','D','D+','C'};
   Iencodeopt2 = find(strcmp(prefs.encodeOption2,encodelist2));
   if ~isempty(Iencodeopt2)
      encodeval2 = Iencodeopt2;
   else
      encodeval2 = 2;
   end
   
   %define terminator radiobutton selections
   radioTerminatorLF = 0;
   radioTerminatorCR = 0;
   radioTerminatorCRLF = 0;
   switch prefs.terminator
      case '\n'
         radioTerminatorLF = 1;
      case '\r'
         radioTerminatorCR = 1;
      otherwise
         radioTerminatorCRLF = 1;
   end
   
   %define supported date formats for conversion options   
   dateformats = { ...
      -999,'<no conversion>'; ...
      NaN,'MATLAB serial date'; ...
      -1,'Spreadsheet serial date'; ...
      0,'dd-mmm-yyyy HH:MM:SS'; ...
      1,'dd-mmm-yyyy'; ...
      2,'mm/dd/yy'; ...
      3,'mmm'; ...
      4,'m'; ...
      5,'mm'; ...
      6,'mm/dd'; ...
      7,'dd'; ...
      8,'ddd'; ...
      9,'d'; ...
      10,'yyyy'; ...
      11,'yy'; ...
      12,'mmmyy'; ...
      13,'HH:MM:SS'; ...
      14,'HH:MM:SS PM'; ...
      15,'HH:MM'; ...
      16,'HH:MM PM'; ...
      17,'QQ-YY'; ...
      18,'QQ'; ...
      19,'dd/mm'; ...
      20,'dd/mm/yy'; ...
      21,'mmm.dd,yyyy HH:MM:SS'; ...
      22,'mmm.dd,yyyy'; ...
      23,'mm/dd/yyyy'; ...
      24,'dd/mm/yyyy'; ...
      25,'yy/mm/dd'; ...
      26,'yyyy/mm/dd'; ...
      27,'QQ-YYYY'; ...
      28,'mmmyyyy'; ...
      29,'yyyy-mm-dd'; ...
      30,'yyyymmddTHHMMSS'; ...
      31,'yyyy-mm-dd HH:MM:SS'};
   
   %look up last used format
   dateformat = find([dateformats{:,1}] == prefs.dateformat);
   if length(datecols) ~= 1 || isempty(dateformat)
      dateformat = 1;
   end

   %parse flag codes from metadata
   if gce_valid(s,'data')
      flagstr = lookupmeta(s.metadata,'Data','Codes');
   else
      flagstr = '';
   end
   if ~isempty(flagstr)
      if ~isempty(strfind(flagstr,'|'))
         flaglist = splitstr(flagstr,'|');
      elseif ~isempty(strfind(flagstr,','))
         flaglist = splitstr(flagstr,',');
      else
         flaglist = cellstr(flagstr);  %assume single entry
      end
      flagdefs = [];
      for n = 1:length(flaglist)
         tmp = splitstr(flaglist{n},'=');
         if length(tmp) == 2
            if ~isempty(tmp{1})
               flagcode = tmp{1};
            else
               flagcode = '?';
            end
            flagdefs = [flagdefs ; {flagcode(1)},{tmp{2}}];
         else
            flagcode = [flagdefs{n},' '];
            flagdefs = [flagdefs ; {flagcode(1)},{'unspecified'}];
         end
      end
   else
      %use default GCE flags
      flagdefs = {'Q','questionable value';'I','invalid value (out of range)';'E','estimated value'};
   end
   
   %define GUI metrics
   bgcolor = [0.9 0.9 0.9];
   res = get(0,'ScreenSize');
   
   %check for open GUI figures, cache current figure handle
   if length(findobj) > 1
      h_fig = gcf;
   else
      h_fig = '';
   end
   
   %check for existing dialog instance and close if found
   h_dlg = findobj('Tag','dlgExport');
   if ~isempty(h_dlg)
      close(h_dlg)
   end
   
   %set dialog title based on mode
   if strcmp(dialog_mode,'file')
      dlg_title = 'Text File Export';
   else
      dlg_title = 'Batch Text File Export';
   end
   
   %create new dialog figure
   h_dlg = figure('Visible','off', ...
      'Color',[0.95 0.95 0.95], ...
      'KeyPressFcn','figure(gcf)', ...
      'CloseRequestFcn','ui_exportasc(''close'')', ...
      'MenuBar','none', ...
      'Name', dlg_title, ...
      'NumberTitle','off', ...
      'PaperUnits','points', ...
      'Position',[max(1,0.5.*(res(3)-620)) max(50,0.5.*(res(4)-485)) 620 485], ...
      'Tag','dlgExport', ...
      'ToolBar','none', ...
      'DefaultuicontrolUnits','pixels', ...
      'Resize','off');
   
   %disable figure docking
   if mlversion >= 7
      set(h_dlg,'WindowStyle','normal')
      set(h_dlg,'DockControls','off')
   end
   
   %define ui controls
   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'Units','pixels', ...
      'Position',[5 260 610 220], ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 0]);
   
   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'Units','pixels', ...
      'Position',[5 40 610 215], ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 0]);
   

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[15 340 90 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','File Format', ...
      'Tag','lblFormat');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[15 308 90 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Header Option', ...
      'Tag','lblHeader');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[15 278 100 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Line Terminator', ...
      'Tag','lblTerminator');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[320 308 90 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Metadata Style', ...
      'Tag','lblMetastyle');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[340 120 100 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Missing Values', ...
      'Tag','lblMissing');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[340 90 100 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Header Prefix', ...
      'Tag','lblLeader');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[340 60 100 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Maximum rows', ...
      'Tag','lblMaxrows');
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[500 60 60 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','(0 = all)', ...
      'Tag','lblMaxrows');
   
   %generate file controls based on mode
   if strcmp(dialog_mode,'file')
   
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 449 90 18], ...
         'BackgroundColor',bgcolor, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.8], ...
         'HorizontalAlignment','left', ...
         'String','File Name', ...
         'Tag','lblFile');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 412 130 18], ...
         'BackgroundColor',bgcolor, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.8], ...
         'HorizontalAlignment','left', ...
         'String','Title Text', ...
         'Tag','lblTitle');
   
      h_editFile = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[105 447 450 22], ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'String',pn, ...
         'Tag','editFile', ...
         'UserData',[], ...
         'Callback','ui_exportasc(''file'')');

      h_cmdBrowse = uicontrol('Parent',h_dlg, ...
         'Position',[560 446 50 25], ...
         'Callback','ui_exportasc(''browse'')', ...
         'String','Browse', ...
         'TooltipString','Browse to select an output file', ...
         'Tag','cmdBrowse', ...
         'UserData',pn);

      h_editTitle = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[105 368 500 60], ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'Min',1, ...
         'Max',5, ...
         'HorizontalAlignment','left', ...
         'String',s.title, ...
         'Tag','editTitle', ...
         'UserData','[ ]');
      
      %define empty handles for unused controls
      h_editPath1 = [];
      h_editPath2 = [];
      h_cmdBrowse1 = [];
      h_cmdBrowse2 = [];
      h_editFileSpec = [];
   
   else  %batch mode
      
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 449 90 18], ...
         'BackgroundColor',bgcolor, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.8], ...
         'HorizontalAlignment','left', ...
         'String','Source Path', ...
         'Tag','lblFile');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 410 130 18], ...
         'BackgroundColor',bgcolor, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.8], ...
         'HorizontalAlignment','left', ...
         'String','Destination', ...
         'Tag','lblTitle');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 375 130 18], ...
         'BackgroundColor',bgcolor, ...
         'FontSize',9, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.8], ...
         'HorizontalAlignment','left', ...
         'String','File Mask', ...
         'Tag','lblFileMask');
   
      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[230 375 250 18], ...
         'BackgroundColor',bgcolor, ...
         'FontSize',9, ...
         'FontWeight','normal', ...
         'ForegroundColor',[0 0 0.8], ...
         'HorizontalAlignment','left', ...
         'String','(filename mask for selecting files to export)', ...
         'Tag','lblFileMaskHelp');
   
      h_editPath1 = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[105 447 450 22], ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'String',pn, ...
         'Tag','editPath1', ...
         'UserData',pn, ...
         'Callback','ui_exportasc(''path'')');

      h_cmdBrowse1 = uicontrol('Parent',h_dlg, ...
         'Position',[560 446 50 25], ...
         'Callback','ui_exportasc(''browsepath'')', ...
         'String','Browse', ...
         'TooltipString','Browse to select an output file', ...
         'Tag','cmdBrowse1', ...
         'UserData',pn);

      h_editPath2 = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[105 410 450 22], ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'String',pn_save, ...
         'Tag','editPath2', ...
         'UserData',pn_save, ...
         'Callback','ui_exportasc(''path'')');

      h_cmdBrowse2 = uicontrol('Parent',h_dlg, ...
         'Position',[560 409 50 25], ...
         'Callback','ui_exportasc(''browsepath'')', ...
         'String','Browse', ...
         'TooltipString','Browse to select an output file', ...
         'Tag','cmdBrowse2', ...
         'UserData',pn);
      
      h_editFileSpec = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'Position',[105 374 120 22], ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'String','*.mat', ...
         'Tag','editFileSpec', ...
         'Callback','ui_exportasc(''controls'')');

      %define empty handles for unused controls
      h_editFile = [];
      h_cmdBrowse = [];
      h_editTitle = [];

   end
   
   h_chkMetaFile = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[320 339 250 22], ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'BackgroundColor',bgcolor, ...
      'String','Create separate metadata file', ...
      'Value',prefs.metaFile, ...
      'Callback','ui_exportasc(''togmeta'')', ...
      'Tag','chkMetaFile');
   
   h_popFormat = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[105 339 200 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',formatstr, ...
      'Tag','popFormat', ...
      'Value',formatval, ...
      'Callback','ui_exportasc(''format'')', ...
      'UserData',formatlist);
   
   h_popHeader = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[105 307 200 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',headerstr, ...
      'Tag','popHeader', ...
      'Value',headerval, ...
      'Callback','ui_exportasc(''togmeta'')', ...
      'UserData',headerlist);
   
   h_radioTerminatorCRLF = uicontrol('Parent',h_dlg, ...
      'Style','radio', ...
      'BackgroundColor',bgcolor, ...
      'Position',[120 277 130 22], ...
      'FontSize',9, ...
      'String','Windows (CRLF)', ...
      'Value',radioTerminatorCRLF, ...
      'Callback','ui_exportasc(''terminator'')', ...
      'Tag','radioTerminatorCRLF');
   
   h_radioTerminatorLF = uicontrol('Parent',h_dlg, ...
      'Style','radio', ...
      'BackgroundColor',bgcolor, ...
      'Position',[250 277 160 22], ...
      'FontSize',9, ...
      'String','Unix & Mac OS/X (LF)', ...
      'Value',radioTerminatorLF, ...
      'Callback','ui_exportasc(''terminator'')', ...
      'Tag','radioTerminatorLF');
   
   h_radioTerminatorCR = uicontrol('Parent',h_dlg, ...
      'Style','radio', ...
      'BackgroundColor',bgcolor, ...
      'Position',[410 277 160 22], ...
      'FontSize',9, ...
      'String','Mac OS9 (CR)', ...
      'Value',radioTerminatorCR, ...
      'Callback','ui_exportasc(''terminator'')', ...
      'Tag','radioTerminatorCR');
   
   h_popStyle = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[416 307 185 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',metastylestr, ...
      'Tag','popStyle', ...
      'Value',metastyleval, ...
      'Callback','ui_exportasc(''togmeta'')', ...
      'UserData',metastylelist);
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[12 219 95 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Flag Option', ...
      'Tag','lblFlags');
   
   h_popFlags = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[105 218 280 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',flagoptions, ...
      'Tag','popFlags', ...
      'Value',flagoptionval, ...
      'Callback','ui_exportasc(''custflags'')', ...
      'UserData',flagoptionlist);
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[12 189 95 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Flag Encoding', ...
      'Tag','lblFlags');
   
   h_popFlagEncode = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[105 188 280 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',encodestr, ...
      'Tag','popFlagEncode', ...
      'Value',encodeval, ...
      'Callback','ui_exportasc(''encode'')', ...
      'UserData',encodelist);
   
   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[12 159 95 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'HorizontalAlignment','left', ...
      'String','Date Column', ...
      'Tag','lblFlags');
   
   h_popDateCol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[105 158 280 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',datecols, ...
      'Tag','popDateCol', ...
      'Value',1, ...
      'Enable',dateformatvis, ...
      'UserData',datecols);
   
   uicontrol('Parent',h_dlg, ...
      'Visible','on', ...
      'Style','text', ...
      'Position',[390 158 60 20], ...
      'String','Format:', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',9, ...
      'FontWeight','bold');
   
   h_popDateFormat = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[455 158 150 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',dateformats(:,2), ...
      'Tag','popDateFormat', ...
      'Value',dateformat, ...
      'Enable',dateformatvis, ...
      'UserData',[dateformats{:,1}]');
   
   h_lblFlagEncode2 = uicontrol('Parent',h_dlg, ...
      'Visible','on', ...
      'Style','text', ...
      'Position',[390 187 60 20], ...
      'String','Columns:', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',9, ...
      'FontWeight','bold');
   
   h_popFlagEncode2 = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Visible','on', ...
      'Position',[455 188 150 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',encodestr2, ...
      'Tag','popFlagEncode2', ...
      'Value',encodeval2, ...
      'UserData',encodelist2);
   
   h_lblCustFlags = uicontrol('Parent',h_dlg, ...
      'Visible','off', ...
      'Style','text', ...
      'Position',[390 218 80 20], ...
      'String','Flag Codes:', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',9, ...
      'FontWeight','bold');
   
   h_editCustFlags = uicontrol('Parent',h_dlg, ...
      'Visible','off', ...
      'Style','edit', ...
      'Position',[470 218 60 22], ...
      'String','', ...
      'BackgroundColor',[1 1 1], ...
      'ForegroundColor',[0 0 0], ...
      'HorizontalAlignment','left', ...
      'FontSize',9);
   
   h_cmdPickFlags = uicontrol('Parent',h_dlg, ...
      'Visible','off', ...
      'Style','pushbutton', ...
      'Position',[535 218 70 24], ...
      'String','Pick', ...
      'Callback','ui_exportasc(''pickflags'')', ...
      'Tag','cmdPickFlags');
   
   h_editMissing = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',9, ...
      'HorizontalAlignment','left', ...
      'Position',[440 120 60 22], ...
      'String',prefs.missing, ...
      'Style','edit', ...
      'Tag','editMissing', ...
      'UserData','[ ]');
   
   h_editLeader = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'Position',[440 90 60 22], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',9, ...
      'HorizontalAlignment','left', ...
      'String',prefs.leader, ...
      'Tag','editLeader', ...
      'UserData','[ ]');
   
   h_editMaxrows = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'Position',[440 60 50 22], ...
      'BackgroundColor',[1 1 1], ...
      'Callback','ui_exportasc(''maxrow'')', ...
      'FontSize',9, ...
      'HorizontalAlignment','left', ...
      'String',int2str(prefs.maxrows), ...
      'Tag','editMaxrows', ...
      'UserData','[ ]');
   
   h_chkStats = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[20 125 200 20], ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'BackgroundColor',bgcolor, ...
      'String','Append Column Statistics', ...
      'Callback','ui_exportasc(''stats'')', ...
      'Tag','chkStats');
   
   h_chkRownums = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[60 104 200 20], ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'BackgroundColor',bgcolor, ...
      'String','Add record number column', ...
      'Tag','chkRownums', ...
      'Enable','off');
   
   h_chkFlags = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[60 80 200 20], ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'BackgroundColor',bgcolor, ...
      'String','Include Flagged Rows', ...
      'Tag','chkFlags', ...
      'Enable','off');
   
   h_popGroup = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[60 56 200 22], ...
      'BackgroundColor',[1 1 1], ...
      'String',groupcols, ...
      'Value',1, ...
      'Enable','off', ...
      'Tag','popGroup');
   
   h_cmdClose = uicontrol('Parent',h_dlg, ...
      'Position',[10 10 80 25], ...
      'String','Close', ...
      'Tag','cmdClose', ...
      'TooltipString','Close the export dialog', ...
      'Callback','ui_exportasc(''close'')', ...
      'UserData','[ ]');
   
   h_chkClose = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[200 10 250 20], ...
      'BackgroundColor',[0.95 0.95 0.95], ...
      'FontSize',9, ...
      'FontWeight','bold', ...
      'String','Close dialog after creating export file', ...
      'Value',1, ...
      'Tag','chkClose');
   
   h_cmdExport = uicontrol('Parent',h_dlg, ...
      'Position',[530 10 80 25], ...
      'String','Export', ...
      'Tag','cmdExport', ...
      'TooltipString','Proceed to export the data structure', ...
      'Callback','ui_exportasc(''export'')', ...
      'Enable','off', ...
      'UserData',s);
   
   %define structure for caching control handles and other data
   uih = struct( ...
      'h_fig',h_fig, ...
      'dialog_mode',dialog_mode, ...
      'cmdBrowse',h_cmdBrowse, ...
      'editFile',h_editFile, ...
      'editTitle',h_editTitle, ...
      'editPath1',h_editPath1, ...
      'editPath2',h_editPath2, ...
      'cmdBrowse1',h_cmdBrowse1, ...
      'cmdBrowse2',h_cmdBrowse2, ...
      'editFileSpec',h_editFileSpec, ...
      'popFormat',h_popFormat, ...
      'popFlags',h_popFlags, ...
      'popFlagEncode',h_popFlagEncode, ...
      'popFlagEncode2',h_popFlagEncode2, ...
      'popDateCol',h_popDateCol, ...
      'popDateFormat',h_popDateFormat, ...
      'cmdPickFlags',h_cmdPickFlags, ...
      'popHeader',h_popHeader, ...
      'chkMetaFile',h_chkMetaFile, ...
      'popStyle',h_popStyle, ...
      'radioTerminatorCRLF',h_radioTerminatorCRLF, ...
      'radioTerminatorLF',h_radioTerminatorLF, ...
      'radioTerminatorCR',h_radioTerminatorCR, ...
      'editMissing',h_editMissing, ...
      'editMaxrows',h_editMaxrows, ...
      'editLeader',h_editLeader, ...
      'editCustFlags',h_editCustFlags, ...
      'lblCustFlags',h_lblCustFlags, ...
      'lblFlagEncode2',h_lblFlagEncode2, ...
      'chkRownums',h_chkRownums, ...
      'chkStats',h_chkStats, ...
      'chkFlags',h_chkFlags, ...
      'popGroup',h_popGroup, ...
      'cmdClose',h_cmdClose, ...
      'cmdExport',h_cmdExport, ...
      'chkClose',h_chkClose);
   
   %add array fields separately to avoid structure redimensioning
   uih.flagdefs = flagdefs;
   uih.prefs = prefs;
   
   %set dialog visibility
   set(h_dlg,'Visible','on','UserData',[{h_fig},{uih}])
   drawnow
   
   %toggle process button state based on mode
   ui_exportasc('controls')
   
else
   
   h_dlg = findobj('Tag','dlgExport');
   
   if ~isempty(h_dlg)
      
      data = get(h_dlg,'UserData');
      h_fig = data{1};
      uih = data{2};
      
      switch op
         
         case 'close'
            
            %delete figure to close without circular reference to closerequestfcn
            delete(h_dlg)
            drawnow
            
            %check for last window - open startup screen
            if ~isempty(uih.h_fig) && length(findobj)>1
               try
                  figure(uih.h_fig)
               catch
                  ui_aboutgce('reopen')  %check for last window
               end
            else
               ui_aboutgce('reopen')  %check for last window
            end
            
         case 'file'  %update manual changes to file name
            
            str = get(uih.editFile,'String');
            
            [pn,fn,ext] = fileparts(str);
            
            if ~isempty(fn)
               if isdir(pn)
                  set(uih.editFile,'UserData',[fn,ext])
                  set(uih.cmdBrowse,'UserData',[pn,filesep])
                  if strcmpi(ext,'.csv')  %check for csv, set filetype
                     filetypes = get(uih.popFormat,'UserData');
                     I = find(strcmp(filetypes(:,1),'csv'));
                     if ~isempty(I)
                        set(uih.popFormat,'Value',I(1))
                     end
                  end
               else
                  set(uih.editFile,'String',[get(uih.cmdBrowse,'UserData'),get(uih.editFile,'UserData')])
                  drawnow
                  messagebox('init','Invalid path specified -- selection reset','','Error',[.9 .9 .9]);
               end
            else
               set(uih.editFile,'UserData','')
            end
            
            ui_exportasc('controls')  %toggle process button state
            
         case 'path'  %validate batch export path entries
            
            %get handle for current control
            h_path = gcbo;
            
            %get path entry
            strPath = deblank(get(h_path,'String'));
            
            %validate entry
            if ~isdir(strPath)
               %invalid - reset to last value and issue error message
               set(h_path,'String',get(h_path,'UserData'))
               messagebox('init','Invalid path - value reset','','Error')
            else
               set(h_path,'UserData',strPath)  %update cached value
               ui_exportasc('controls')  %update button visibility
            end
            
         case 'browsepath'  %browse for source or destination path
            
            %get handle for pressed button
            h_browse = gcbo;
            
            %get tag to deterine which path to update
            strTag = get(h_browse,'Tag');
            
            %get corresponding path handle
            if strcmp(strTag,'cmdBrowse1')
               h_path = uih.editPath1;
               strPrompt = 'Choose a source directory';
            else
               h_path = uih.editPath2;
               strPrompt = 'Choose a destination directory';
            end
            
            %get starting path
            strPath = uigetdir(deblank(get(h_path,'String')),strPrompt);
            
            %check for cancel, update path
            if ischar(strPath) && isdir(strPath)
               set(h_path,'String',strPath,'UserData',strPath)
               ui_exportasc('controls')  %update export button state
            end            
            
         case 'controls'  %toggle status of export button based on batch export field states
            
            if strcmp(uih.dialog_mode,'file')
               
               %get filename
               strFile = get(uih.editFile,'UserData');
               
               if ~isempty(strFile)
                  set(uih.cmdExport,'Enable','on')
               else
                  set(uih.cmdExport,'Enable','off')
               end
               
            else
               
               %get field values
               strPath1 = deblank(get(uih.editPath1,'String'));
               strPath2 = deblank(get(uih.editPath1,'String'));
               strFileSpec = deblank(get(uih.editFileSpec,'String'));
               
               %validate contents
               if ~isempty(strFileSpec) && isdir(strPath1) && isdir(strPath2)
                  set(uih.cmdExport,'Enable','on')
               else
                  set(uih.cmdExport,'Enable','off')
               end
               
               %disable stats option for batch mode (not supported by batch_exp_ascii
               set(uih.chkStats,'Enable','off')
               
            end
            
         case 'browse'  %browse for export file
            
            pn = get(uih.cmdBrowse,'UserData');
            fn = get(uih.editFile,'UserData');
            
            if ~isempty(fn)
               [pname,basename,ext] = fileparts(fn);
               if ~isempty(fn)
                  mask = [fn,'; *',ext];
               else
                  mask = '*.txt; *.asc; *.csv; *.rpt';
               end
            else
               mask = '*.txt; *.asc; *.csv; *.rpt';
            end
            
            curpath = pwd;
            
            if isdir(pn)
               cd(pn)
            end
            
            [fn,pn] = uiputfile(mask,'Select a file name and location');
            
            cd(curpath)
            
            if fn ~= 0   %check for cancel
               set(uih.editFile,'String',[pn,fn],'UserData',fn)
               ui_exportasc('file')
            end
            
         case 'stats'  %toggle column statistic subfields
            
            chkval = get(uih.chkStats,'Value');
            
            if chkval == 1
               set(uih.chkFlags,'Enable','on')
               set(uih.popGroup,'Enable','on')
               set(uih.chkRownums,'Enable','on','Value',1)
            else
               set(uih.chkFlags,'Enable','off')
               set(uih.popGroup,'Enable','off')
               set(uih.chkRownums,'Enable','off','Value',0)
            end
            
            drawnow
            
         case 'export'  %perform export
            
            %get cached lookup lists from uicontrols
            formatlist = get(uih.popFormat,'UserData');
            flaglist = get(uih.popFlags,'UserData');
            headerlist = get(uih.popHeader,'UserData');
            metastylelist = get(uih.popStyle,'UserData');
            encodelist = get(uih.popFlagEncode,'UserData');
            encodelist2 = get(uih.popFlagEncode2,'UserData');
            datecollist = get(uih.popDateCol,'UserData');
            dateformatlist = get(uih.popDateFormat,'UserData');
            
            %get popup menu, checkbox values
            formatval = get(uih.popFormat,'Value');
            flagval = get(uih.popFlags,'Value');
            encodeval = get(uih.popFlagEncode,'Value');
            encodeval2 = get(uih.popFlagEncode2,'Value');
            custflags = deblank(get(uih.editCustFlags,'String'));
            headerval = get(uih.popHeader,'Value');
            metastyleval = get(uih.popStyle,'Value');
            statsval = get(uih.chkStats,'Value');
            inclflagsval = get(uih.chkFlags,'Value');
            metafileval = get(uih.chkMetaFile,'Value');
            datecolval = get(uih.popDateCol,'Value');
            dateformatval = get(uih.popDateFormat,'Value');
            
            %resolve list selections
            fileformat = formatlist{formatval,1};
            delim = formatlist{formatval,2};
            metastyle = metastylelist{metastyleval};
            headerstyle = headerlist{headerval};
            flagopt = flaglist{flagval};
            encodeopt = encodelist{encodeval};
            encodeopt2 = encodelist2{encodeval2};
            
            %determine date column and format
            if datecolval > 1
               datecol = datecollist{datecolval};
            else
               datecol = [];
            end
            dateformat = dateformatlist(dateformatval);
            
            %get terminator option
            termLF = get(uih.radioTerminatorLF,'Value');
            termCR = get(uih.radioTerminatorCR,'Value');
            
            %set line terminator for exp_ascii
            if termLF == 1
               terminator = '\n';
            elseif termCR == 1
               terminator = '\r';
            else %termCRLF
               terminator = '\r\n';
            end
            
            %process title string
            titlestr = get(uih.editTitle,'String');
            if size(titlestr,1) > 1  %concatenate multiple rows
               str = titlestr;
               titlestr = '';
               for n = 1:size(str,1)
                  titlestr = [titlestr,deblank(titlestr(n,:)),' '];
               end
            end
            titlestr = deblank(titlestr);
            
            %get other input fields
            missingstr = deblank(get(uih.editMissing,'String'));
            leader = get(uih.editLeader,'String');
            maxrownum = fix(str2double(get(uih.editMaxrows,'String')));
            incrownums = get(uih.chkRownums,'Value');
            
            %get grouping index (adjust for top row)
            groupcol = get(uih.popGroup,'Value') - 1;  
            if groupcol == 0
               groupcol = [];
            end
            
            if strncmp(encodeopt,'M',1) || strncmp(encodeopt,'E',1)
               encodeopt = [encodeopt,encodeopt2];
            end
            
            if incrownums == 1  %set row number option string
               rnums = 'Y';
            else
               rnums = 'N';
            end
            
            %prepend metadata file option
            if metafileval == 1
               headerstr = ['S',headerstyle];
            else
               headerstr = headerstyle;
            end
            
            %update prefs
            prefs = uih.prefs;
            prefs.fileFormat = fileformat;
            prefs.delimiter = delim;
            prefs.metaStyle = metastyle;
            prefs.headerStyle = headerstyle;
            prefs.metaFile = metafileval;
            prefs.flagOption = flagopt;
            prefs.encodeOption1 = encodeopt;
            prefs.encodeOption2 = encodeopt2;
            prefs.terminator = terminator;
            prefs.missing = missingstr;
            prefs.leader = leader;
            prefs.maxrows = maxrownum;
            prefs.dateformat = dateformat;
            
            %init secondary message variable
            msg2 = '';
            
            %save prefs
            fn_prefs = which('ui_exportasc.mat');
            if isempty(fn_prefs)
               fn_prefs = [gce_homepath,filesep,'settings',filesep,'ui_exportasc.mat'];
            end
            try
               save(fn_prefs,'prefs')
            catch
               msg2 = 'An error occurred saving dialog preferences';
            end            

            %init filelist and badfiles arrays for batch mode error checking
            filelist = [];
            badfiles = [];

            %proceed based on mode
            if strcmp(uih.dialog_mode,'file')  %single file
                           
               set(gcf,'pointer','watch')
               drawnow
            
               %get stored structure info
               s = get(uih.cmdExport,'UserData');
               fn = get(uih.editFile,'UserData');
               pn = get(uih.cmdBrowse,'UserData');
               
               if maxrownum > 0  %truncate structure
                  s = maxrows(s,maxrownum);
               end
               
               %pre-process nulled or culled flagged values/rows, update flag option
               if strcmp(flagopt,'nullall')
                  %null flags, logging deletions to the metadata and retaining flags
                  s = nullflags(s,'',[],1,0); 
                  encodeopt = 'N';
               elseif strcmp(flagopt,'cullall')
                  %cull flags, logging deletions
                  s = cullflags(s,'',[],1);
                  encodeopt = 'N';
               elseif strcmp(flagopt,'nullcust') && ~isempty(custflags)
                  %null specified flags, logging deletions and retaining flags
                  s = nullflags(s,custflags,[],1,0);
               elseif strcmp(flagopt,'cullcust') && ~isempty(custflags)
                  %cull specified flags, logging deletions
                  s = cullflags(s,custflags,[],1);
               end
               
               %prepend metadata file option
               if metafileval == 1
                  headerstr = ['S',headerstyle];
               else
                  headerstr = headerstyle;
               end
               
               %apply date format if a valid format is specified
               if dateformat ~= -999
                  
                  %check for automatic date column option - perform lookup
                  if isempty(datecol)
                     
                     %get attribute metadata
                     dtype = get_type(s,'datatype');
                     vtype = get_type(s,'variabletype');
                     
                     %get index of string or float datetime cols
                     Idt = find(strcmp('datetime',vtype) & (strcmp('f',dtype) | strcmp('s',dtype)));
                     if ~isempty(Idt)
                        if length(Idt) == 1
                           datecol = Idt;
                        else
                           Idt2 = find(strncmpi('date',s.name(Idt),4));
                           if ~isempty(Idt2)
                              datecol = Idt(Idt2(1));
                           else
                              datecol = Idt(1);
                           end
                        end
                     end
                     
                  end
                  
                  if ~isempty(datecol)
                     [s_tmp,msg2] = convert_date_format(s,datecol,dateformat);
                     if ~isempty(s_tmp)
                        s = s_tmp;
                     end
                  end
                  
               end
               
               if ~isempty(s)
                  
                  %write ascii file with selected options
                  msg = exp_ascii(s, ...
                     fileformat, ...
                     fn, ...
                     pn, ...
                     titlestr, ...
                     headerstr, ...
                     encodeopt, ...
                     metastyle, ...
                     leader, ...
                     rnums, ...
                     missingstr, ...
                     delim, ...
                     'N', ...
                     'N', ...
                     terminator);
                  
                  %append column stats
                  if statsval == 1
                     
                     if inclflagsval == 1
                        flagopt = 'I';
                     else
                        flagopt = 'E';
                     end
                     
                     stats = colstats(s,flagopt,groupcol);
                     
                     msg2 = exp_ascii(stats, ...
                        fileformat, ...
                        fn, ...
                        pn, ...
                        '', ...
                        'B', ...
                        'N', ...
                        metastyle, ...
                        leader, ...
                        rnums, ...
                        '--', ...
                        delim, ...
                        'Y', ...
                        'Y', ...
                        terminator);
                     
                  end
                  
                  %sync export path to editor instances
                  syncpath(pn,'save')
                  
               else
                  msg = 'Warning - all data rows removed (check flag criteria)';
               end
            
               set(gcf,'pointer','arrow')
               drawnow
            
            else  %batch mode
               
               %check for no date conversion option
               if dateformat == -999
                  datecol = [];
                  dateformat = [];
               end
               
               %get paths and filemask
               pn_source = get(uih.editPath1,'UserData');
               pn_dest = get(uih.editPath2,'UserData');
               filemask = deblank(get(uih.editFileSpec,'String'));
               
               %set clearflags and flaglist options based on flagopt
               clearflags = '';
               flaglist = '';
               if strcmp(flagopt,'nullall')
                  clearflags = 'nullall';
               elseif strcmp(flagopt,'cullall')
                  clearflags = 'cullall';
               elseif strcmp(flagopt,'nullcust')
                  if ~isempty(custflags)
                     clearflags = 'null';
                     flaglist = custflags;
                  end
               elseif strcmp(flagopt,'cullcust')
                  if ~isempty(custflags)
                  	clearflags = 'cull';
                     flaglist = custflags;
                  end
               end
               
               %send options to batch_exp_ascii
               [msg,filelist,badfiles] = batch_exp_ascii(pn_source, ...
                  pn_dest, ...
                  filemask, ...
                  fileformat, ...
                  headerstr, ...
                  clearflags, ...
                  flaglist, ...
                  encodeopt, ...
                  metastyle, ...
                  leader, ...
                  rnums, ...
                  missingstr, ...
                  delim, ...
                  terminator, ...
                  datecol, ...
                  dateformat);
               
               msg2 = '';
               
               %sync source and destination paths to editor instances as load/save paths
               syncpath(pn_source,'load')
               syncpath(pn_dest,'save')
                  
            end
            
            %report errors
            if strcmp(uih.dialog_mode,'file') && (~isempty(msg) || ~isempty(msg2))
               
               %display error
               if ~isempty(msg)
                  messagebox('init',msg,'','Error')
               else
                  messagebox('init',msg2,'','Error')
               end
               
            elseif strcmp(uih.dialog_mode,'batch') && (isempty(filelist) || ~isempty(badfiles))
               
               %check for dialog close option
               closeval = get(uih.chkClose,'Value');
               if closeval == 1
                  ui_exportasc('close')                  
               end
               
               %display summary for batch mode
               if strcmp(uih.dialog_mode,'batch')
                  messagebox('init',msg,'','Summary')
               end
               
            else  %no errors
               
               %check for dialog close option
               closeval = get(uih.chkClose,'Value');
               if closeval == 1
                  ui_exportasc('close')
               end
               
               %display summary for batch mode
               if strcmp(uih.dialog_mode,'batch')
                  messagebox('init',msg,'','Summary')
               end
               
            end
            
         case 'maxrow'  %validate maximum row entries
            
            str = deblank(get(uih.editMaxrows,'String'));
            
            if isempty(str)
               str = '0';
            else
               str = int2str(str2double(str));
               if isnan(str)
                  str = '0';
               end
            end
            
            set(uih.editMaxrows,'String',str)
            drawnow
            
         case 'togmeta'  %toggle controls based on metadata style, header, file settings
            
            hdrval = get(uih.popHeader,'Value');
            styleval = get(uih.popStyle,'Value');
            stylelist = get(uih.popStyle,'UserData');
            chkval = get(uih.chkMetaFile,'Value');
            
            if styleval == length(stylelist)  %xml option
               stylevis = 'on';
               chkval = 1;  %force metadata file
               if hdrval == 1  %override full header option
                  hdrval = 2;
               end
            elseif hdrval > 1 && chkval == 0
               stylevis = 'off';
            else
               stylevis = 'on';
            end
            
            set(uih.popStyle,'Enable',stylevis)
            set(uih.chkMetaFile,'Value',chkval)
            set(uih.popHeader,'Value',hdrval)
            
            drawnow
            
         case 'format'  %exert format contingencies
            
            val = get(uih.popFormat,'Value');
            list = get(uih.popFormat,'UserData');
            
            if strcmp(list{val,1},'csv')
               set(uih.editLeader,'Enable','off')
            else
               set(uih.editLeader,'Enable','on')
            end
            
            drawnow
            
         case 'custflags'  %show/hide custom flag controls
            
            val = get(uih.popFlags,'Value');
            ud = get(uih.popFlags,'UserData');
            flagopt = ud{val};
            
            if strcmp(flagopt,'nullcust') || strcmp(flagopt,'cullcust')
               set(uih.lblCustFlags,'Visible','on')
               set(uih.editCustFlags,'Visible','on')
               set(uih.cmdPickFlags,'Visible','on')
            else
               set(uih.lblCustFlags,'Visible','off')
               set(uih.editCustFlags,'Visible','off')
               set(uih.cmdPickFlags,'Visible','off')
            end
            
         case 'encode'  %show/hide secondary menu for flag encoding
            
            val = get(uih.popFlagEncode,'Value');
            ud = get(uih.popFlagEncode,'UserData');
            encodeopt = ud{val};
            
            if strncmp(encodeopt,'M',1) || strncmp(encodeopt,'E',1)
               set(uih.popFlagEncode2,'Visible','on')
               set(uih.lblFlagEncode2,'Visible','on')
            else
               set(uih.popFlagEncode2,'Visible','off')
               set(uih.lblFlagEncode2,'Visible','off')
            end
            
         case 'pickflags'  %open dialog to choose flags to remove prior to export
            
            flagdefs = uih.flagdefs;
            
            if ~isempty(flagdefs)
               
               str = concatcellcols(flagdefs,' = ');
               Isel = listdialog('liststring',str, ...
                  'name','Choose Flags', ...
                  'promptstring','Choose Q/C Flags for Value Removal', ...
                  'selectionmode','multiple', ...
                  'initialvalue',1, ...
                  'listsize',[0 0 500 300]);
               
               %check for cancel
               if ~isempty(Isel)
                  flags = [flagdefs{Isel,1}];
                  set(uih.editCustFlags,'String',flags)
               end
               
            end
            
         case 'terminator'  %handle terminator option radio control events
            
            tag = get(gcbo,'Tag');  %get tag of selected radio button
            
            if strcmp(tag,'radioTerminatorLF')
               set(uih.radioTerminatorCRLF,'Value',0)
               set(uih.radioTerminatorLF,'Value',1)
               set(uih.radioTerminatorCR,'Value',0)
            elseif strcmp(tag,'radioTerminatorCR')
               set(uih.radioTerminatorCRLF,'Value',0)
               set(uih.radioTerminatorLF,'Value',0)
               set(uih.radioTerminatorCR,'Value',1)
            else
               set(uih.radioTerminatorCRLF,'Value',1)
               set(uih.radioTerminatorLF,'Value',0)
               set(uih.radioTerminatorCR,'Value',0)
            end
            
      end
      
   end
   
end