function ui_fetch_climdb(op,h_cb,cb)
%GUI dialog for retrieving data from the LTER ClimDB/HydroDB web server
%
%syntax: ui_fetch_climdb
%
%input:
%  op = operation (default = 'init')
%  h_db = handle of callback object for returning data
%  cb = evaluation string for callback for returning data
%
%output:
%  none
%
%(c)2002-2013 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 02-Jun-2013

if nargin == 0
   op = 'init';
end

if strcmp(op,'init')  %create dialog

   %check for callback handle, statement for caching
   if exist('h_cb','var') ~= 1
      h_cb = [];
   end

   if exist('cb','var') ~= 1
      cb = '';
   end

   %check for existing dialog instance
   if ~isempty(findobj)
      h_dlg = findobj('Tag','dlgHarvestClimDB');
   else
      h_dlg = [];
   end

   %if dialog open set focus
   if ~isempty(h_dlg)

      figure(h_dlg(1))
      drawnow

   elseif exist('urlwrite','file') == 2 || exist('urlwrite','file') == 6  %init new dialog

      %init preference structure
      prefs = struct( ...
         'name','', ...
         'affiliation','', ...
         'data_use','', ...
         'baseurl','http://climhy.lternet.edu/', ...
         'site','', ...
         'tempfile',0, ...
         'close',1);

      %load prefs if present
      if exist('ui_fetch_climdb.mat','file') == 2
         v = load('ui_fetch_climdb.mat');
         if isfield(v,'prefs')
            prefs = v.prefs;
         end
      end

      %get screen metrics
      res = get(0,'ScreenSize');
      bgcolor = [0.9 0.9 0.9];

      %generate array of metadata templates for dropdown menu
      templates = [];
      templatestr = {'<default>'};
      templateval = 1;
      alltemplates = get_templates;
      if ~isempty(alltemplates)
         templates = {alltemplates.template}';
         templatestr = [templatestr ; templates];
         I_default = find(strcmp(templates,'LTER_ClimDB'));
         if ~isempty(I_default)
            templateval = I_default + 1;
         end
      end

      %init climdb info cache structures
      climdb_sites = [];
      climdb_stations = [];
      climdb_variables = [];

      %load site codes, site names from cached climdb info file for populating menu
      sitestr = {'<select a site>'};
      siteval = 1;
      sites = '';
      sitenames = '';
      if exist('climdb_sites.mat','file') == 2
         v = load('climdb_sites.mat');
         if isfield(v,'data')
            climdb_sites = v.data;
            sites = extract(climdb_sites,'Site');
            sitenames = extract(climdb_sites,'SiteName');
            if isempty(sites) || isempty(sitenames)
               sites = '';
               sitenames = '';
            else
               sitestr = [sitestr ; concatcellcols([sites,repmat({' ('},length(sites),1),sitenames, ...
                        repmat({')'},length(sites),1)],'')];
               if ~isempty(prefs.site)
                  Isite = find(strcmp(sites,prefs.site));
                  if ~isempty(Isite)
                     siteval = Isite(1) + 1;  %get index of site from preferences, offset for list
                  end
               end
            end
         end
      end

      %load station code, station name and date range from cached climdb info, create station list array
      stations = [];
      if exist('climdb_stations.mat','file') == 2
         v = load('climdb_stations.mat');
         if isfield(v,'data')
            climdb_stations = v.data;
            sitevals = extract(climdb_stations,'Site');
            stationvals = extract(climdb_stations,'Station');
            stationnames = extract(climdb_stations,'StationName');
            datemin = extract(climdb_stations,'Date_Start');
            datemax = extract(climdb_stations,'Date_End');
            if ~isempty(sitevals) && ~isempty(stationvals) && ~isempty(stationnames) && ...
                  ~isempty(datemin) && ~isempty(datemax)
               numrows = length(sitevals);
               stations = [sitevals, ...
                     stationvals, ...
                     stationnames, ...
                     sub_date2yyyymmdd(datemin), ...
                     sub_date2yyyymmdd(datemax)];
            end
         end
      end

      %load climdb variables file
      if exist('climdb_variables.mat','file') == 2
         v = load('climdb_variables.mat');
         if isfield(v,'data')
            climdb_variables = v.data;
         end
      end


      %build GUI
      h_dlg = figure('Visible','off', ...
         'Name','Retrieve ClimDB Data', ...
         'Units','pixels', ...
         'Color',[0.95 0.95 0.95], ...
         'Position',[max(0,0.5.*(res(3)-580)) max(30,0.5.*(res(4)-450)) 580 450], ...
         'KeyPressFcn','figure(gcf)', ...
         'MenuBar','none', ...
         'NumberTitle','off', ...
         'Tag','dlgFetchClimDB', ...
         'ToolBar','none', ...
         'Resize','off', ...
         'CloseRequestFcn','ui_fetch_climdb(''cancel'')', ...
         'DefaultuicontrolUnits','pixels');

      if mlversion >= 7
         set(h_dlg,'WindowStyle','normal')
         set(h_dlg,'DockControls','off')
      end

      h1 = uicontrol('Parent',h_dlg, ...
         'Position',[1 1 580 450], ...
         'BackgroundColor',[.95 .95 .95], ...
         'ForegroundColor',[0 0 0], ...
         'Style','frame', ...
         'Tag','Frame0');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'Position',[6 40 570 185], ...
         'Style','frame', ...
         'Tag','Frame1');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'Position',[6 230 570 215], ...
         'Style','frame', ...
         'Tag','Frame2');

      h_listStations = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'Position',[144 270 425 132], ...
         'FontSize',9, ...
         'String','<none>', ...
         'Style','listbox', ...
         'Tag','listStations', ...
         'Enable','off', ...
         'Callback','ui_fetch_climdb(''station'')', ...
         'Value',1);

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'ListboxTop',0, ...
         'Position',[12 413 130 19], ...
         'String','Available Sites', ...
         'Style','text', ...
         'Tag','StaticText1');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'ListboxTop',0, ...
         'Position',[12 380 130 19], ...
         'String','Available Stations', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_popSite = uicontrol('Parent',h_dlg, ...
         'Position',[144 415 360 22], ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'String',sitestr, ...
         'Style','popupmenu', ...
         'Tag','popSite', ...
         'Callback','ui_fetch_climdb(''lookup'')', ...
         'Value',siteval);

      h_cmdUpdate = uicontrol('Parent',h_dlg, ...
         'FontSize',10, ...
         'Position',[510 414 60 24], ...
         'String','Update', ...
         'Callback','ui_fetch_climdb(''update'')', ...
         'TooltipString','Retrieve updated information from the ClimDB/HydroDB server', ...
         'Tag','cmdUpdate');

      h_cmdSelect = uicontrol('Parent',h_dlg, ...
         'Position',[144 244 425 23], ...
         'Enable','off', ...
         'FontSize',10, ...
         'String','Copy Selected Station to Request Form', ...
         'Callback','ui_fetch_climdb(''select'')', ...
         'TooltipString','Copy the selected site and station information to the respective form fields', ...
         'Tag','cmdSelect');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[10 192 40 19], ...
         'String','Site', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editSite = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'Position',[50 192 45 22], ...
         'String','', ...
         'Style','edit', ...
         'Callback','ui_fetch_climdb(''buttons'')', ...
         'Tag','editSite');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[95 192 60 19], ...
         'String','Station', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editStation = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'Position',[155 192 115 22], ...
         'String','', ...
         'Style','edit', ...
         'Callback','ui_fetch_climdb(''buttons'')', ...
         'Tag','editStation');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[280 192 90 19], ...
         'String','Date Range:', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editStartDate = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'ListboxTop',0, ...
         'Position',[370 192 84 22], ...
         'String','2000-01-01', ...
         'Style','edit', ...
         'Callback','ui_fetch_climdb(''date'')', ...
         'UserData','2000-01-01', ...
         'Tag','editStartDate');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[455 192 20 19], ...
         'HorizontalAlignment','center', ...
         'String','to', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editEndDate = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'ListboxTop',0, ...
         'Position',[476 192 84 22], ...
         'String',datestr(now,29), ...
         'Style','edit', ...
         'Callback','ui_fetch_climdb(''date'')', ...
         'UserData',datestr(now,29), ...
         'Tag','editEndDate');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[15 162 130 19], ...
         'String','Metadata Template', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_popTemplate = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'Position',[155 162 180 22], ...
         'String',templatestr, ...
         'Style','popupmenu', ...
         'Tag','popTemplate', ...
         'Value',templateval);

      h_chkSave = uicontrol('Parent',h_dlg, ...
         'Style','checkbox', ...
         'Position',[380 162 120 22], ...
         'BackgroundColor',bgcolor, ...
         'String','Save Temp File', ...
         'FontSize',10, ...
         'Value',prefs.tempfile, ...
         'Callback','ui_fetch_climdb(''savetemp'')', ...
         'Tag','chkSave');

      h1 = uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[10 150 560 1], ...
         'BackgroundColor',[0 0 0], ...
         'ForegroundColor',[0 0 0], ...
         'String','', ...
         'Tag','StaticText1');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[15 115 90 19], ...
         'String','User Name', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editName = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'Position',[105 115 150 22], ...
         'Style','edit', ...
         'String',prefs.name, ...
         'Callback','ui_fetch_climdb(''buttons'')', ...
         'Tag','editName');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[260 115 110 19], ...
         'String','User Affiliation', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editAffil = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'Position',[370 115 195 22], ...
         'Style','edit', ...
         'String',prefs.affiliation, ...
         'Callback','ui_fetch_climdb(''buttons'')', ...
         'Tag','editAffil');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[15 85 90 19], ...
         'String','Intended Use', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editDataUse = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'Position',[105 85 460 22], ...
         'Style','edit', ...
         'String',prefs.data_use, ...
         'Callback','ui_fetch_climdb(''buttons'')', ...
         'Tag','editDataUse');

      h1 = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'Position',[15 55 130 19], ...
         'String','ClimDB Website URL', ...
         'Style','text', ...
         'Tag','StaticText1');

      h_editURL = uicontrol('Parent',h_dlg, ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',9, ...
         'HorizontalAlignment','left', ...
         'Position',[150 55 415 22], ...
         'Style','edit', ...
         'String',prefs.baseurl, ...
         'Callback','ui_fetch_climdb(''buttons'')', ...
         'Tag','editURL');

      h_cmdCancel = uicontrol('Parent',h_dlg, ...
         'FontSize',10, ...
         'Position',[6 10 70 24], ...
         'String','Cancel', ...
         'Callback','ui_fetch_climdb(''cancel'')', ...
         'Tag','cmdCancel');

      h_cmdEval = uicontrol('Parent',h_dlg, ...
         'Enable','off', ...
         'FontSize',10, ...
         'Position',[505 10 70 24], ...
         'String','Proceed', ...
         'Callback','ui_fetch_climdb(''eval'')', ...
         'Tag','cmdEval');

      h_chkClose = uicontrol('Parent',h_dlg, ...
         'Style','checkbox', ...
         'Position',[100 10 230 22], ...
         'BackgroundColor',[0.95 0.95 0.95], ...
         'String','Close dialog after retrieving data', ...
         'FontSize',10, ...
         'Value',prefs.close, ...
         'Tag','chkSave');

      if ~isempty(h_cb)
         windowvis = 'on';
         windowval = 0;
      else
         windowvis = 'off';
         windowval = 1;
      end
      h_chkWindow = uicontrol('Parent',h_dlg, ...
         'Style','checkbox', ...
         'Position',[340 10 150 22], ...
         'Enable',windowvis, ...
         'BackgroundColor',[0.95 0.95 0.95], ...
         'String','Open in new window', ...
         'FontSize',10, ...
         'Value',windowval, ...
         'Tag','chkWindow');

      %init GUI info cache structure
      uih = struct('h_cb',h_cb, ...
         'cb',cb, ...
         'editSite',h_editSite, ...
         'popSite',h_popSite, ...
         'listStations',h_listStations, ...
         'editStation',h_editStation, ...
         'editStartDate',h_editStartDate, ...
         'editEndDate',h_editEndDate, ...
         'editName',h_editName, ...
         'editAffil',h_editAffil, ...
         'editDataUse',h_editDataUse, ...
         'editURL',h_editURL, ...
         'popTemplate',h_popTemplate, ...
         'chkSave',h_chkSave, ...
         'chkClose',h_chkClose, ...
         'chkWindow',h_chkWindow, ...
         'cmdSelect',h_cmdSelect, ...
         'cmdUpdate',h_cmdUpdate, ...
         'cmdCancel',h_cmdCancel, ...
         'cmdEval',h_cmdEval, ...
         'sites',{sites}, ...
         'stations',{stations}, ...
         'climdb_sites',{climdb_sites}, ...
         'climdb_stations',{climdb_stations}, ...
         'climdb_variables',{climdb_variables}, ...
         'templates',{templates});

      %store info cache in figure userdata, display dialog
      set(h_dlg,'UserData',uih,'Visible','on')

      if siteval == 1
         drawnow
      else
         ui_fetch_climdb('lookup')
      end

   else
      messagebox('init',' This dialog requires MATLAB version 6.5 (R13) or higher ', ...
         '','Error',[.9 .9 .9]);
   end

else  %handle other callbacks

   %check for dialog instance
   if ~isempty(findobj)
      h_dlg = findobj('Tag','dlgFetchClimDB');
   else
      h_dlg = [];
   end

   if ~isempty(h_dlg)

      uih = get(h_dlg,'UserData');  %get cached data

      switch op

         case 'cancel'  %close dialog

            delete(h_dlg)
            drawnow

            if ~isempty(uih.h_cb)
               h_fig = parent_figure(uih.h_cb);
            else
               h_fig = [];
            end

            if ~isempty(h_fig)
               figure(h_fig)
            else
               ui_aboutgce('reopen')  %check for last window
            end

         case 'eval'  %evaluate input, fetch data

            %get info from form fields
            username = deblank(get(uih.editName,'String'));
            useraffil = deblank(get(uih.editAffil,'String'));
            datause = deblank(get(uih.editDataUse,'String'));
            site = deblank(get(uih.editSite,'String'));
            station = deblank(get(uih.editStation,'String'));
            datestart = deblank(get(uih.editStartDate,'String'));
            dateend = deblank(get(uih.editEndDate,'String'));
            savetemp = get(uih.chkSave,'Value');
            closedlg = get(uih.chkClose,'Value');
            newwindow = get(uih.chkWindow,'Value');
            Itemplate = get(uih.popTemplate,'Value') - 1;
            baseurl = deblank(get(uih.editURL,'String'));

            %look up template from menu selection
            if Itemplate > 0
               template = uih.templates{Itemplate};
            else
               template = 'LTER_ClimDB';
            end

            %check for complete input
            if ~isempty(username) && ~isempty(useraffil) && ~isempty(site) && ~isempty(station) && ...
                  ~isempty(datestart) && ~isempty(dateend)

               %store updated prefs
               prefs = struct( ...
                  'name',username, ...
                  'affiliation',useraffil, ...
                  'data_use',datause, ...
                  'baseurl',baseurl, ...
                  'site',site, ...
                  'tempfile',savetemp, ...
                  'close',closedlg);

               %save prefs to toolbox directory
               fn = which('ui_fetch_climdb.mat');
               if isempty(fn)
                  pn = [gce_homepath,filesep,'settings'];
                  if ~isdir(pn)
                     pn = fileparts(which('ui_fetch_climdb'));
                  end
                  fn = [pn,filesep,'ui_fetch_climdb.mat'];
               end
               save(fn,'prefs')

               %filter climdb info by site, station to get parms
               vars = [];
               if ~isempty(uih.climdb_variables)
                  s_vars = querydata(uih.climdb_variables,['strcmpi(Site,''',site,''') & strcmpi(Station,''',station,''')']);
                  if ~isempty(s_vars)
                     vars = extract(s_vars,'Variable');
                  end
               else
                  vars = [];
               end

               cancel = 0;  %init cancel flag to distinguish between no variables and cancelled selection

               %prompt for variables to retrieve if variables list available
               if ~isempty(vars)

                  %get list of supports parms
                  varlist = unique(vars);

                  %display modal list dialog for choosing parameters to request
                  Isel = listdialog('liststring',varlist, ...
                     'name','Choose Parameters', ...
                     'promptstring','Choose Parameters to Request', ...
                     'selectionmode','multiple', ...
                     'listsize',[0 0 400 350]);

                  %check for valid parameter selection
                  if ~isempty(Isel)
                     varlist = varlist(Isel);  %apply variable selections
                  else
                     cancel = 1;  %set cancel flag
                  end

               else
                  varlist = [];  %default to all variables if no stored variable list
               end

               if cancel == 0;

                  %fetch data using external function
                  set(h_dlg,'Pointer','watch'); drawnow
                  [s,msg] = fetch_climdb_data(site,station,varlist,username,useraffil,datause, ...
                     datestart,dateend,template,0,savetemp,'',baseurl);
                  set(h_dlg,'Pointer','arrow'); drawnow

                  %return results to appropriate target
                  if ~isempty(s)

                     err = 0;  %init error flag

                     if closedlg == 1
                        close(h_dlg)
                        drawnow
                     end

                     %send structure to requested target figure or open new figure
                     if ~isempty(uih.h_cb) & newwindow == 0
                        h_fig = parent_figure(uih.h_cb);
                        if ~isempty(h_fig)
                           figure(h_fig)
                           set(uih.h_cb,'UserData',s)
                           drawnow
                           if ~isempty(uih.cb)
                              eval(uih.cb,'err=1;')
                           end
                        else
                           err = 1;
                        end
                     else
                        if closedlg == 0
                           uih.h_cb = [];  %clear stored handle on new window calls
                           uih.cb = '';
                           set(h_dlg,'UserData',uih)
                        end
                        ui_editor('init',s)
                     end

                     %send follow-up message if original requesting window closed
                     if err == 1
                        ui_editor('init',s)
                        drawnow
                        messagebox('init','The structure could not be returned to the original window (new window opened)', ...
                           '','Warning',[.9 .9 .9])
                     end

                  else
                     messagebox('init',['Errors occurred retrieving the data (',msg,')'], ...
                        '','Error',[.9 .9 .9])
                  end

               end

            else
               messagebox('init','Data could not be fetched with the selected options', ...
                  '','Error',[.9 .9 .9]);
            end

         case 'select'  %copy info from station selection

            %look up site selection index
            siteval = get(uih.popSite,'Value') - 1;
            stationval = get(uih.listStations,'Value');

            if siteval > 0 && ~isempty(stationval)

               %look up site code, station info
               stationlist = uih.stations;
               site = uih.sites{siteval};
               Istations = find(strcmpi(stationlist(:,1),site));
               station = stationlist{Istations(stationval),2};
               datestart = stationlist{Istations(stationval),4};
               dateend = stationlist{Istations(stationval),5};

               %update form fields
               set(uih.editSite,'String',site)
               set(uih.editStation,'String',station)
               set(uih.editStartDate,'String',datestart)
               set(uih.editEndDate,'String',dateend)

               %update button states
               ui_fetch_climdb('buttons')

            end

         case 'update'  %fetch latest site/station/parameter info from Climdb

            %fetch info files using external function
            url = deblank(get(uih.editURL,'String'));
            set(h_dlg,'Pointer','watch'); drawnow
            [climdb_sites,climdb_stations,climdb_variables,msg] = fetch_climdb_info('All',url);
            set(h_dlg,'Pointer','arrow'); drawnow

            %check for return data
            if ~isempty(climdb_sites) && ~isempty(climdb_stations) && ~isempty(climdb_variables)

               %save updated info files, trapping file system errors
               pn = [gce_homepath,filesep,'settings'];
               if ~isdir(pn)
                  pn = fileparts(which('fetch_climdb_data'));
               end
               try
                  data = climdb_sites;
                  save([pn,filesep,'climdb_sites.mat'],'data')
                  data = climdb_stations;
                  save([pn,filesep,'climdb_stations.mat'],'data')
                  data = climdb_variables;
                  save([pn,filesep,'climdb_variables.mat'],'data')
               catch
               end

               %generate site list array, look up current site
               sitestr = {'<select a site>'};
               siteval = 1;
               sites = extract(climdb_sites,'Site');
               sitenames = extract(climdb_sites,'SiteName');
               if isempty(sites) || isempty(sitenames)
                  sites = '';
                  sitenames = '';
               else
                  sitestr = [sitestr ; concatcellcols([sites,repmat({' ('},length(sites),1),sitenames, ...
                           repmat({')'},length(sites),1)],'')];  %generate menu string
                  oldsiteval = get(uih.popSite,'Value');  %get site selection prior to update
                  if oldsiteval > 1
                     siteval = find(strcmp(sites,uih.sites{oldsiteval-1}));  %look up old site in new array
                     if isempty(siteval)
                        siteval = 1;
                     else
                        siteval = siteval + 1;  %set site selection, offsetting for first row
                     end
                  end
               end

               %create station list array
               stations = [];
               sitevals = extract(climdb_stations,'Site');
               stationvals = extract(climdb_stations,'Station');
               stationnames = extract(climdb_stations,'StationName');
               datemin = extract(climdb_stations,'Date_Start');
               datemax = extract(climdb_stations,'Date_End');
               if ~isempty(sitevals) && ~isempty(stationvals) && ~isempty(stationnames) && ...
                     ~isempty(datemin) && ~isempty(datemax)
                  numrows = length(sitevals);
                  stations = [sitevals, ...
                        stationvals, ...
                        stationnames, ...
                        sub_date2yyyymmdd(datemin), ...
                        sub_date2yyyymmdd(datemax)];
               end

               %update cached info
               uih.sites = sites;
               uih.stations = stations;
               uih.climdb_sites = climdb_sites;
               uih.climdb_stations = climdb_stations;
               uih.climdb_variables = climdb_variables;
               set(h_dlg,'UserData',uih)

               %update site popupmenu
               set(uih.popSite,'String',sitestr,'Value',siteval)

               %refresh station list to reflect new siteval, if necessary
               ui_fetch_climdb('lookup')

               %display status message
               numsites = length(sites);
               numstations = size(stations,1);
               messagebox('init',['Successfully retrieved updated information on parameters for ', ...
                     int2str(numstations), ' stations from ',int2str(numsites),' sites'], ...
                  '','Info',[.9 .9 .9])

            else
               messagebox('init',['Could not retrieve ClimDB information file: ',msg],'','Error',[.9 .9 .9]);
            end

         case 'lookup'  %lookup stations by site

            sel = get(uih.popSite,'Value');

            if sel > 1

               %look up stations for selected site
               Istations = find(strcmp(uih.stations(:,1),uih.sites{sel-1,1}));

               if ~isempty(Istations)
                  stationlist = uih.stations(Istations,:);  %filter station list by site
                  numrows = length(Istations);
                  str = concatcellcols([stationlist(:,2), ...
                        repmat({' - '},numrows,1), ...
                        deblank(stationlist(:,3)), ...
                        repmat({'  (Dates: '},numrows,1), ...
                        stationlist(:,4), ...
                        repmat({' to '},numrows,1), ...
                        stationlist(:,5), ...
                        repmat({')'},numrows,1)],'');
                  set(uih.listStations, ...
                     'String',str, ...
                     'Value',1, ...
                     'Enable','on', ...
                     'Listboxtop',1)
                  set(uih.cmdSelect,'Enable','on')
               else  %no stations defined for site
                  set(uih.listStations, ...
                     'String','<none>', ...
                     'Value',1, ...
                     'Enable','off', ...
                     'Listboxtop',1)
                  set(uih.cmdSelect,'Enable','off')
               end

            else  %no site selected = clear list

               set(uih.listStations, ...
                  'String','<none>', ...
                  'Value',1, ...
                  'Enable','off', ...
                  'Listboxtop',1)
               set(uih.cmdSelect,'Enable','off')

            end

         case 'station'  %catch station list double clicks

            if strcmp(get(gcf,'SelectionType'),'open')
               ui_fetch_climdb('select')
            end

         case 'date'  %validate date entries

            h_cbo = gcbo;  %get handle of active edit box
            str = deblank(get(h_cbo,'String'));  %get edit box contents
            err = 0;  %init error flag

            if ~isempty(str)
               try
                  dt = datenum(str);  %try to parse date
               catch
                  dt = [];
               end
               if isempty(dt)
                  ar = splitstr(str,'-');
                  if length(ar) == 3  %check for standard climdb yyyy-mm-dd format, unsupported by MATLAB
                     try
                        dt = datenum([ar{2},'/',ar{3},'/',ar{1}]);  %convert to mm/dd/yyyy
                     catch
                        dt = [];
                     end
                  else  %unrecognized number of parameters
                     dt = [];
                  end
               end

               %generate date string in Climdb YYYY-MM-DD format
               if ~isempty(dt)
                  str = char(sub_date2yyyymmdd(dt));
               else
                  str = '';
               end

               %update control
               if ~isempty(str)
                  set(h_cbo,'String',str,'UserData',str)  %update text field, cache new value
               else
                  set(h_cbo,'String',get(h_cbo,'UserData'))  %replace with last valid entry
                  err = 1;
               end

            end

            %refresh button states
            ui_fetch_climdb('buttons')

            if err == 1
               messagebox('init',' Invalid date format - value reset ','','Error',[.9 .9 .9])
            end

         case 'buttons'  %update button states depending on field values

            %list of required text field handles to evaluate
            h = [uih.editName ; ...
                  uih.editAffil ; ...
                  uih.editDataUse ; ...
                  uih.editSite ; ...
                  uih.editStation ; ...
                  uih.editStartDate ; ...
                  uih.editEndDate];

            emptyflds = ones(length(h),1);  %init empty field array

            %test fields for non-empty strings
            for n = 1:length(h)
               str = deblank(get(h(n),'String'));
               if ~isempty(str)
                  emptyflds(n) = 0;
               end
            end

            %toggle eval buttom state, save checkbox
            if sum(emptyflds) == 0
               set(uih.cmdEval,'Enable','on')
               set(uih.chkSave,'Enable','on')
            else
               set(uih.cmdEval,'Enable','off')
               set(uih.chkSave,'Enable','off')
            end

            drawnow

      end

   end

end


function ar = sub_date2yyyymmdd(dt)
%Converts a MATLAB serial dates to a cell array of strings in YYYY-MM-DD format (ISO 8601)
%
%syntax: str = date2yyyymmdd(dt)

try
   yr = datestr(dt,10);
   mo = datestr(dt,5);
   dy = datestr(dt,7);
   sep = repmat('-',length(dt),1);
   ar = strrep(cellstr([yr,sep,mo,sep,dy]),' ','');
catch
   ar = repmat({''},length(dt),1);  %return empty cell array
end