function ui_flagfunction(op,expression,slot)
%GUI dialog called by 'ui_qccriteria' for adding custom function calls to a Q/C criteria string
%
%syntax: ui_flagfunction
%
%(c)2007-2011 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 20-Oct-2011

if nargin == 0
   op = 'init';
   expression = '';
   slot = 0;
else
   if exist('expression','var') ~= 1
      expression = '';
   end
   if exist('slot','var') ~= 1
      slot = 0;
   end
end

if strcmp(op,'init')

   %check for prior instance
   if length(findobj) > 1
      h_dlg = findobj('Tag','dlgFlagFunction');
      h_fig = parent_figure(gcbo);
      if strcmp(get(h_fig,'Tag'),'dlgQCFlags') ~= 1
         h_fig = [];
      end
   else
      h_dlg = [];
      h_fig = [];
   end

   %check for call from q/c criteria editor
   if ~isempty(h_fig)

      %delete prior instances
      if ~isempty(h_dlg)
         delete(h_dlg)
         drawnow
      end

      %init figure metrics
      res = get(0,'ScreenSize');
      fig_wid = min(res(3)-40,850);
      fig_ht = 545;
      bgcolor = [.95 .95 .95];

      if ispc
         fnt = 'Arial';
         listfnt = 'Courier New';
      else
         fnt = 'Helvetica';
         listfnt = 'Courier';
      end

      %get list of flag functions in toolbox directory
      d = dir([gce_homepath,filesep,'qaqc',filesep,'flag_*.m']);

      if ~isempty(d)

         %generate structure containing info and syntax for all flag functions in toolbox directory
         fnclist = struct('name',' ', ...
            'label','<select a function>', ...
            'syntax',' ', ...
            'help',' ');
         cnt = 2;
         for n = 1:length(d)
            [tmp,fn_base] = fileparts(d(n).name);
            [syntax,fnc_desc,fnc_help] = parse_gce_syntax(fn_base);
            if ~isempty(syntax)
               fnc_lbl = [fn_base,'  (',fnc_desc,')'];
               Ieq = strfind(syntax,' = ');
               if ~isempty(Ieq)
                  syntax = syntax(Ieq(1)+3:end);
               end
               fnclist(cnt).name = fn_base;
               fnclist(cnt).label = fnc_lbl;
               fnclist(cnt).syntax = [syntax,'=''F'''];
               hdr = [' Help for the ''',fn_base,''' function'];
               sep = repmat('-',1,length(hdr)+2);
               fnclist(cnt).help = [{sep ; hdr ; sep ; ' '} ; splitstr(fnc_help,char(10),0,0) ; {' ';' '}];
               cnt = cnt + 1;
            end
         end

         %init form fields if 'expr' specified
         str_syntax = '';
         listHelp = {' '};
         Ifunc = 1;
         if ~isempty(expression)
            fnc = strtok(expression,'(');
            if length(fnc) >= 3
               if ~strcmp(fnc(1),'~')
                  Imatch = find(strcmp(fnc,{fnclist.name}'));  %look up function in list
               else
                  Imatch = find(strcmp(fnc(2:end),{fnclist.name}'));  %look up negated function in list
               end
               if ~isempty(Imatch)
                  Ifunc = Imatch(1);
                  str_syntax = expression;
                  listHelp = fnclist(Ifunc).help;
               end
            end
         end

         %init gui
         h_dlg = figure(...
            'Visible','off', ...
            'Color',[.9 .9 .9],...
            'IntegerHandle','off',...
            'MenuBar','none',...
            'Name','Custom Flag Functions',...
            'NumberTitle','off',...
            'Position',[max(0,(res(3)-fig_wid).*0.5) (res(4)-fig_ht).*0.5 fig_wid fig_ht],...
            'Resize','off',...
            'HandleVisibility','on',...
            'Tag','dlgFlagFunction',...
            'KeyPressFcn','figure(gcf)', ...
            'CloseRequestFcn','ui_flagfunction(''close'')', ...
            'UserData',[]);

         if mlversion >= 7
            set(h_dlg,'WindowStyle','normal')
            set(h_dlg,'DockControls','off')
         end

         uicontrol(...
            'Parent',h_dlg, ...
            'Style','frame', ...
            'Position',[1 1 fig_wid fig_ht], ...
            'ForegroundColor',[0 0 0], ...
            'BackgroundColor',bgcolor);

         uicontrol(...
            'Parent',h_dlg,...
            'BackgroundColor',bgcolor,...
            'FontName',fnt,...
            'FontSize',10,...
            'FontWeight','bold',...
            'ForegroundColor',[0 0 .9],...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Position',[20 fig_ht-45 130 20],...
            'String','Q/C Flag Function:',...
            'Style','text',...
            'Tag','text1');

         uicontrol(...
            'Parent',h_dlg,...
            'BackgroundColor',bgcolor,...
            'FontName',fnt,...
            'FontSize',10,...
            'FontWeight','bold',...
            'ForegroundColor',[0 0 .9],...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Position',[20 fig_ht-85 130 20],...
            'String','Function Syntax:',...
            'Style','text',...
            'Tag','text2');

         %define help text string
         str_help = ['(Note: use ''x'' or ''col_[Column Name]'' to pass data values, add additional arguments, ', ...
            'and specify a flag code to assign)'];
         
         uicontrol(...
            'Parent',h_dlg,...
            'BackgroundColor',bgcolor,...
            'FontName',fnt,...
            'FontSize',9,...
            'ForegroundColor',[0 0 .9],...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Position',[150 fig_ht-120 fig_wid-165 30],...
            'String',str_help,...
            'Style','text',...
            'Tag','text3');

         uicontrol(...
            'Parent',h_dlg,...
            'BackgroundColor',bgcolor,...
            'FontName',fnt,...
            'FontSize',10,...
            'FontWeight','bold',...
            'ForegroundColor',[0 0 .9],...
            'HorizontalAlignment','left',...
            'ListboxTop',0,...
            'Position',[20 fig_ht-135 130 20],...
            'String','Function Help',...
            'Style','text',...
            'Tag','text4');

         h_popFunctions = uicontrol(...
            'Parent',h_dlg,...
            'ListboxTop',0,...\
            'FontSize',10, ...
            'BackgroundColor',[1 1 1], ...
            'ForegroundColor',[0 0 0], ...
            'Position',[150 fig_ht-45 fig_wid-165 20],...
            'String',{fnclist.label}',...
            'Style','popupmenu',...
            'Value',Ifunc,...
            'Callback','ui_flagfunction(''update'')', ...
            'TooltipString','Select a custom flag function to view and apply', ...
            'Tag','popFunctions');

         h_editSyntax = uicontrol(...
            'Parent',h_dlg,...
            'BackgroundColor',[1 1 1], ...
            'ForegroundColor',[0 0 0], ...
            'FontName',fnt,...
            'FontSize',10, ...
            'HorizontalAlignment','left', ...
            'ListboxTop',0,...
            'Position',[150 fig_ht-85 fig_wid-250 20],...
            'String',str_syntax,...
            'Style','edit',...
            'Tag','editSyntax');

         uicontrol(...
            'Parent',h_dlg, ...
            'Position',[fig_wid-95 fig_ht-85 80 22], ...
            'String','Transfer', ...
            'Style','pushbutton', ...
            'Tag','cmdTransfer', ...
            'TooltipString','Transfer the expression to the Q/C Flag Criteria Editor and close the dialog', ...
            'Callback','ui_flagfunction(''transfer'')');

         h_listHelp = uicontrol(...
            'Parent',h_dlg,...
            'Position',[50 20 fig_wid-65 fig_ht-160],...
            'BackgroundColor',[1 1 1], ...
            'ForegroundColor',[0 0 0], ...
            'String',listHelp,...
            'FontName',listfnt,...
            'FontSize',9,...
            'Style','listbox',...
            'Value',1,...
            'Min',0, ...
            'Max',2, ...
            'Value',[], ...
            'Callback','set(gcbo,''Value'',length(get(gcbo,''String'')),''ListBoxTop'',get(gcbo,''ListBoxTop'')); set(gcbo,''Value'',[])', ...
            'ListboxTop',1, ...
            'Tag','listHelp');

         uid = struct('popFunctions',h_popFunctions, ...
            'editSyntax',h_editSyntax, ...
            'listHelp',h_listHelp, ...
            'expression',expression, ...
            'slot',slot, ...
            'h_fig',h_fig);
         uid.fnclist = fnclist;

         set(h_dlg,'UserData',uid,'Visible','on');
         drawnow

      else
         messagebox('init','No custom Q/C flag functions are present in the toolbox directory',[],'Error',[.95 .95 .95]);
      end

   else
      messagebox('init','This dialog must be called from the Q/C Flag Criteria Editor dialog',[],'Error',[.95 .95 .95]);
   end

else

   h_dlg = findobj('Tag','dlgFlagFunction');

   if ~isempty(h_dlg)

      %get cached info
      uid = get(h_dlg,'UserData');

      %handle callbacks
      switch op

         case 'update'  %handle function name changes

            Isel = get(uid.popFunctions,'Value');

            if Isel > 1
               syntax = uid.fnclist(Isel).syntax;
               set(uid.editSyntax,'String',syntax)
               set(uid.listHelp,'String',uid.fnclist(Isel).help)
            else
               set(uid.editSyntax,'String','')
               set(uid.listHelp,'String',{' '},'Value',1,'ListboxTop',1);
            end

         case 'transfer'  %transfer expression back to q/c flag criteria editor

            syntax = deblank(get(uid.editSyntax,'String'));

            if ~isempty(syntax)
               delete(h_dlg)
               try
                  tag = get(uid.h_fig,'Tag');
               catch
                  tag = '';
               end
               if ~isempty(tag)
                  figure(uid.h_fig)
                  ui_qccriteria('addfunc2',syntax,uid.slot);
               else
                  messagebox('init','Could not transfer the expression to the criteria editor dialog', ...
                     [],'Error',[.9 .9 .9])
               end
            else
               ui_flagfunction('close');
            end

         case 'close'  %close dialog

            delete(h_dlg)

            %return focus to calling dialog
            try
               tag = get(uih.h_fig,'Tag');
            catch
               tag = '';
            end
            if strcmp(tag,'dlgQCFlags')
               figure(uid.h_fig)
            end

      end

   end

end