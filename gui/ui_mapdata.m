function ui_mapdata(op,s)
%Data mapping dialog for the GCE Data Toolbox
%
%syntax: ui_mapdata(op,s)
%
%input:
%  op = operation ('init' to initialize dialog)
%  s = data structure
%
%output:
%  none
%
%(c)2002-2015 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 01-May-2015

%default to 'init' if no input arguments
if nargin == 0
   op = 'init';
   s = [];
elseif isstruct(op)  %assume 'init' omitted
   s = op;
   op = 'init';
else
   if exist('s','var') ~= 1
      s = [];
   elseif gce_valid(s,'data') ~= 1
      s = [];
   end
end

if strcmp(op,'init') && ~isempty(s)

   cancel = 0;

   %try to look up geo columns
   Igeocols = find(strcmp(s.variabletype,'coord'));

   if ~isempty(Igeocols)

      geocols = [{'<choose a column>'} ; ...
            concatcellcols([s.name(Igeocols)',repmat({' ('},length(Igeocols),1), ...
               s.units(Igeocols)',repmat({')'},length(Igeocols),1)])];
      patchvis = 'off';  %set default visibility for patch options

      Idata = find(~strcmp(s.variabletype,'coord'));
      if ~isempty(Idata)
         datacols = [{'(no data column)'} ; ...
               concatcellcols([s.name(Idata)',repmat({' ('},length(Idata),1), ...
                  s.units(Idata)',repmat({')'},length(Idata),1)])];
         datacols = strrep(datacols,' ()','');
         Idata2 = find(strcmp(s.variabletype(Idata),'data') | strcmp(s.variabletype(Idata),'calculation'));
         if ~isempty(Idata2)
            datacol = Idata2(1);  %grab first no geo column with datatype 'data' or 'calculation'
         else
            datacol = 0;  %use first non-geo column
         end
         if ~strcmp(s.datatype(Idata(1)),'s')
            patchvis = 'on';
         end
      else
         datacols = {'(no data column)'};
         datacol = 0;
      end

      loncol = 1;
      latcol = 1;
      mode = 1;
      zonecol = 1;
      zonevis = 'off';

      maplist = {'Manually-Selected Map File';'Existing Map Figure (last used)'};
      maps = [];
      mapval = 1;

      datumlist = {'WGS84','WGS72','WGS66','WGS60','NAD83','NAD27','CLARK1866','CLARK1800'};
      datumstr = cell(length(datumlist)+1,1);
      datumstr(1) = {'Longitude/Latitude (degrees)'};
      for n = 1:length(datumlist)
         datumstr{n+1} = ['UTM - ',datumlist{n},' datum (m)'];
      end

      %load map descriptions if available
      if exist('mapfiles.mat','file') == 2
         v = load('mapfiles.mat','-mat');         
         if isstruct(v)
            if isfield(v,'data')  %data structure format
               maps = v.data;
               maplist = [maplist ; extract(v.data,'caption')];
            elseif isfield(v,'maps')  %legacy format
               maps = newstruct('data');
               maps = addcol(maps,{v.maps.filename},'filename','','Map filename','s','nominal','none',0);
               maps = addcol(maps,{v.maps.caption},'caption','','Map caption','s','nominal','none',0);
               maplist = [maplist ; {v.maps.caption}'];
               if isempty(findobj('Tag','MapPlot'))
                  mapval = 3;
               end
            end
         end
      end

      %identify geo component columns
      lbllone = 'Longitude Column';
      lbllatn = 'Latitude Column';
      I = find(strncmpi(s.name(Igeocols),'lon',3));  %check for lon/lat first
      if length(I) == 1
         loncol = I + 1;
         I = find(strncmpi(s.name(Igeocols),'lat',3));
         if length(I) == 1
            latcol = I + 1;
         end
      else
         I = find(strncmpi(s.name(Igeocols),'utm_east',8) | strncmpi(s.name(Igeocols),'east',4));
         if length(I) == 1
            loncol = I + 1;
            zonevis = 'on';
            lbllone = 'UTM Easting Column';
            lbllatn = 'UTM Northing Column';
            I = find(strncmpi(s.name(Igeocols),'utm_north',9) | strncmpi(s.name(Igeocols),'north',5));
            if length(I) == 1
               latcol = I + 1;
            end
            I = find(strcmpi(s.name(Igeocols),'utm_zone') | strcmpi(s.name(Igeocols),'zone'));
            if length(I) == 1
               zonecol = I + 1;
            end
            for n = 1:length(datumlist)
               if ~isempty(strfind(s.description{I},datumlist{n}))
                  mode = n + 1;
                  break
               end
            end
         end
      end

   else
      cancel = 1;
   end

   if cancel == 0

      bgcolor = [0.95 0.95 0.95];
      res = get(0,'ScreenSize');
      figpos = [max(0,(res(3)-520)./2) max(30,(res(4)-580)./2) 520 580];

      markers = {'circle (o)','o' ; ...
            'diamond (d)','d' ; ...
            'square (s)','s' ; ...
            'triangle up (^)','^' ; ...
            'triangle down (v)','v' ; ...
            'triangle left (<)','<' ; ...
            'triangle right (>)','>' ; ...
            'pentagram (p)','p' ; ...
            'hexagram (h)','h' ; ...
            'star (*)','*' ; ...
            'x mark (x)','x' ; ...
            'plus (+)','+' ; ...
            'point (.)','.'};

      h_dlg = figure('Name','Map Data', ...
         'Visible','off', ...
         'Position',figpos, ...
         'Color',bgcolor, ...
         'KeyPressFcn','figure(gcf)', ...
         'MenuBar','none', ...
         'NumberTitle','off', ...
         'Tag','dlgMapData', ...
         'ToolBar','none', ...
         'Resize','off', ...
         'DefaultuicontrolUnits','pixels');

      if mlversion >= 7
         set(h_dlg,'WindowStyle','normal')
         set(h_dlg,'DockControls','off')
      end

      set(gca,'Visible','off')

      uicontrol('Parent',h_dlg, ...
         'Style','frame', ...
         'ForegroundColor',[0 0 0], ...
         'BackgroundColor',bgcolor, ...
         'Position',[1 1 figpos(3) figpos(4)]);

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[30 547 200 20], ...
         'String','Base Map Figure', ...
         'Tag','lblMap');

      h_popMap = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'Position',[230 547 250 22], ...
         'String',char(maplist), ...
         'Tag','', ...
         'Value',mapval);

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[30 516 200 20], ...
         'String','Data Column to Plot', ...
         'Tag','lblDataCol');

      h_popDataCol = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'Callback','ui_mapdata(''data'')', ...
         'FontSize',10, ...
         'Position',[230 516 250 22], ...
         'String',char(datacols), ...
         'Tag','popDataCol', ...
         'Value',datacol+1);

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[30 470 200 20], ...
         'String','Geographic Units', ...
         'Tag','lblMode');

      h_popMode = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'Callback','ui_mapdata(''mode'')', ...
         'FontSize',10, ...
         'Position',[230 470 250 22], ...
         'String',datumstr, ...
         'Tag','popMode', ...
         'Value',mode, ...
         'UserData',[{''},datumlist]);

      h_lblLonEast = uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[30 437 200 20], ...
         'String',lbllone, ...
         'Tag','lblLonEast');

      h_popLonEast = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'Callback','ui_mapdata(''buttons'')', ...
         'FontSize',10, ...
         'Position',[230 437 250 22], ...
         'String',char(geocols), ...
         'Tag','popLonEast', ...
         'Value',loncol);

      h_lblLatNorth = uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[30 403 200 20], ...
         'String',lbllatn, ...
         'Tag','lblLatNorth');

      h_popLatNorth = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'Callback','ui_mapdata(''buttons'')', ...
         'FontSize',10, ...
         'Position',[230 403 250 22], ...
         'String',char(geocols), ...
         'Tag','popLatNorth', ...
         'Value',latcol);

      h_lblZone = uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[30 368 200 20], ...
         'String','UTM Zone Column', ...
         'Visible',zonevis, ...
         'Tag','lblZone');

      if strcmp(zonevis,'on')
         zonebg = [1 1 1];
      else
         zonebg = [.8 .8 .8];
      end

      h_popZone = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',zonebg, ...
         'Callback','ui_mapdata(''buttons'')', ...
         'FontSize',10, ...
         'Position',[230 368 250 22], ...
         'String',char(geocols), ...
         'Enable',zonevis, ...
         'Tag','popZone', ...
         'Value',zonecol);

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',[0.7 0.7 0.7], ...
         'Position',[15 351 490 2], ...
         'Tag','line');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Fontsize',10, ...
         'Fontweight','bold', ...
         'BackgroundColor',bgcolor, ...
         'ForegroundColor',[0 0 .8], ...
         'Position',[20 319 125 18], ...
         'String','Data Restriction', ...
         'Tag','txtQry');

      h_editQry = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Position',[145 316 252 23], ...
         'BackgroundColor',[1 1 1], ...
         'String','', ...
         'TooltipString','Query statement for restricting the data', ...
         'Tag','editQry');

      h_cmdQry = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[400 317 50 23], ...
         'String','Edit', ...
         'TooltipString','Open a graphical dialog to edit the query statement', ...
         'Callback','ui_mapdata(''editquery'')', ...
         'Tag','cmdQry');

      uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'Position',[452 317 50 23], ...
         'String','Clear', ...
         'TooltipString','Clear the query statement', ...
         'Callback','ui_mapdata(''clearquery'')', ...
         'Tag','cmdQry');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[15 303 490 2], ...
         'String','', ...
         'BackgroundColor',[.8 .8 .8]);

      h_radioSymbol = uicontrol('Parent',h_dlg, ...
         'Style','radiobutton', ...
         'BackgroundColor',bgcolor, ...
         'Callback','ui_mapdata(''radio'')', ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'Position',[20 268 135 22], ...
         'String','Plot As Symbols', ...
         'Value',1, ...
         'Tag','radioSymbols');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[165 268 110 20], ...
         'String','Symbol');

      h_popSymbol = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'Position',[275 268 160 22], ...
         'String',char(markers(:,1)), ...
         'Tag','popSymbol', ...
         'Value',2, ...
         'UserData',markers(:,2));

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[165 236 110 20], ...
         'ForegroundColor',[0 0 0.7], ...
         'BackgroundColor',bgcolor, ...
         'FontWeight','bold', ...
         'FontSize',10, ...
         'String','Symbol Size');

      h_editSymSize = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Position',[275 236 50 22], ...
         'String','8', ...
         'Tag','editSymSize');

      h_cmdEdgeColor = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'ForegroundColor',[1 1 1], ...
         'BackgroundColor',[0 0 0], ...
         'FontSize',10, ...
         'String','Edge Color', ...
         'Position',[330 236 85 23], ...
         'Tag','cmdEdgeColor', ...
         'Callback','ui_mapdata(''pickcolor'')');

      h_cmdFaceColor = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'ForegroundColor',[0 0 0], ...
         'BackgroundColor',[1 1 0], ...
         'FontSize',10, ...
         'String','Face Color', ...
         'Position',[420 236 85 23], ...
         'Tag','cmdFaceColor', ...
         'Callback','ui_mapdata(''pickcolor'')');

      h_radioLabel = uicontrol('Parent',h_dlg, ...
         'Style','radiobutton', ...
         'BackgroundColor',bgcolor, ...
         'Callback','ui_mapdata(''radio'')', ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'Position',[20 198 135 22], ...
         'String','Plot As Labels', ...
         'Value',0, ...
         'Tag','radioLabels');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[165 198 110 20], ...
         'String','Marker');

      h_popLabelMarker = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'Position',[275 198 160 22], ...
         'String',char([{'none'} ; markers(:,1)]), ...
         'Tag','popSymbol', ...
         'Value',3, ...
         'Callback','ui_mapdata(''buttons'')', ...
         'Enable','off', ...
         'UserData',[{''} ; markers(:,2)]);

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[165 168 110 20], ...
         'ForegroundColor',[0 0 0.7], ...
         'BackgroundColor',bgcolor, ...
         'FontWeight','bold', ...
         'FontSize',10, ...
         'String','Marker Size');

      h_editLabelMarker = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Position',[275 168 50 22], ...
         'String','5', ...
         'Enable','off', ...
         'Tag','editLabelMarker');

      h_cmdLabelMarkerEdge = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'ForegroundColor',[1 1 1], ...
         'BackgroundColor',[0 0 0], ...
         'FontSize',10, ...
         'String','Edge Color', ...
         'Position',[330 168 85 23], ...
         'Tag','cmdLabelMarkerEdge', ...
         'Enable','off', ...
         'Callback','ui_mapdata(''pickcolor'')');

      h_cmdLabelMarkerFace = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'ForegroundColor',[1 1 1], ...
         'BackgroundColor',[0 0 1], ...
         'FontSize',10, ...
         'String','Face Color', ...
         'Position',[420 168 85 23], ...
         'Tag','cmdLabelMarkerFace', ...
         'Enable','off', ...
         'Callback','ui_mapdata(''pickcolor'')');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'Position',[165 138 110 20], ...
         'ForegroundColor',[0 0 0.7], ...
         'BackgroundColor',bgcolor, ...
         'FontWeight','bold', ...
         'FontSize',10, ...
         'String','Label');

      uicontrol('Parent',h_dlg, ...
         'Style','frame', ...
         'ForegroundColor',[0 0 0], ...
         'BackgroundColor',[1 1 1], ...
         'Position',[275 138 50 22]);

      h_txtLabel = uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'HorizontalAlignment','center', ...
         'BackgroundColor',[1 1 1], ...
         'ForegroundColor',[0 0 0], ...
         'FontSize',10, ...
         'Position',[276 139 48 20], ...
         'String','ABC', ...
         'Enable','off', ...
         'Tag','editLabelSize');

      h_cmdLabelFont = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'FontSize',10, ...
         'String','Label Font', ...
         'Position',[330 138 85 23], ...
         'Enable','off', ...
         'Tag','cmdLabelFont', ...
         'Callback','ui_mapdata(''pickfont'')');

      h_cmdLabel = uicontrol('Parent',h_dlg, ...
         'Style','pushbutton', ...
         'ForegroundColor',[1 1 1], ...
         'BackgroundColor',[0 0 1], ...
         'FontSize',10, ...
         'String','Label Color', ...
         'Position',[420 138 85 23], ...
         'Enable','off', ...
         'Tag','cmdLabel', ...
         'Callback','ui_mapdata(''pickcolor'')');

      h_radioPatch = uicontrol('Parent',h_dlg, ...
         'Style','radiobutton', ...
         'BackgroundColor',bgcolor, ...
         'Callback','ui_mapdata(''radio'')', ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'Position',[20 98 135 22], ...
         'String','Plot As Patches', ...
         'Enable',patchvis, ...
         'Value',0, ...
         'Tag','radioPatch');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[165 98 110 20], ...
         'String','Patch Size');

      h_editPatchSize = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Position',[275 98 60 22], ...
         'String','500', ...
         'Enable','off', ...
         'Tag','editPatchSize');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[340 98 80 20], ...
         'HorizontalAlignment','left', ...
         'String','meters');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[165 72 110 20], ...
         'String','Color Limits');

      h_editCLimMin = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Position',[275 72 60 22], ...
         'String','auto', ...
         'Enable','off', ...
         'Tag','editCLimMin');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[335 72 25 20], ...
         'String','to');

      h_editCLimMax = uicontrol('Parent',h_dlg, ...
         'Style','edit', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'HorizontalAlignment','left', ...
         'Position',[360 72 60 22], ...
         'String','auto', ...
         'Enable','off', ...
         'Tag','editClimMax');

      uicontrol('Parent',h_dlg, ...
         'Style','text', ...
         'BackgroundColor',bgcolor, ...
         'FontSize',10, ...
         'FontWeight','bold', ...
         'ForegroundColor',[0 0 0.7], ...
         'Position',[165 44 110 20], ...
         'String','Colormap');

      h_popColormap = uicontrol('Parent',h_dlg, ...
         'Style','popupmenu', ...
         'BackgroundColor',[1 1 1], ...
         'FontSize',10, ...
         'Position',[275 45 232 22], ...
         'String',char([{'Jet (blue-green-red)'} ; ...
            {'Hue-Saturation Value'} ; ...
            {'Hot (black-red-white)'} ; ...
            {'Cool (aqua-blue-purple)'} ; ...
            {'Gray (linear gray scale)'} ; ...
            {'Bone (gray scale - bluish)'} ; ...
            {'Copper (linear copper-tone)'} ; ...
            {'Pink (pastel pinks)'} ; ...
            {'Spring (magenta and yellow)'} ; ...
            {'Summer (blue and green)'} ; ...
            {'Autumn (red and yellow)'} ; ...
            {'Winter (green and yellow)'}]), ...
         'Tag','popColormap', ...
         'Value',1, ...
         'Callback','ui_mapdata(''marker'')', ...
         'UserData',[{'jet'}, ...
            {'hsv'}, ...
            {'hot'}, ...
            {'cool'}, ...
            {'gray'}, ...
            {'bone'}, ...
            {'copper'}, ...
            {'pink'}, ...
            {'spring'}, ...
            {'summer'}, ...
            {'autumn'}, ...
            {'winter'}]);

      uicontrol('Parent',h_dlg, ...
         'Callback','ui_mapdata(''close'')', ...
         'FontSize',10, ...
         'Position',[10 8 70 25], ...
         'String','Cancel', ...
         'Tag','cmdClose');

      h_cmdProceed = uicontrol('Parent',h_dlg, ...
         'Callback','ui_mapdata(''eval'')', ...
         'FontSize',10, ...
         'Position',[440 8 70 25], ...
         'String','Proceed', ...
         'Enable','off', ...
         'Tag','cmdProceed');

      uih = struct( ...
         's',s, ...
         'maps',maps, ...
         'Igeocols',Igeocols, ...
         'Idata',Idata, ...
         'popMap',h_popMap, ...
         'popMode',h_popMode, ...
         'popDataCol',h_popDataCol, ...
         'lblLonEast',h_lblLonEast, ...
         'lblLatNorth',h_lblLatNorth, ...
         'popLonEast',h_popLonEast, ...
         'popLatNorth',h_popLatNorth, ...
         'lblZone',h_lblZone, ...
         'popZone',h_popZone, ...
         'radioLabel',h_radioLabel, ...
         'popLabelMarker',h_popLabelMarker, ...
         'editLabelMarker',h_editLabelMarker, ...
         'cmdLabelMarkerEdge',h_cmdLabelMarkerEdge, ...
         'cmdLabelMarkerFace',h_cmdLabelMarkerFace, ...
         'txtLabel',h_txtLabel, ...
         'cmdLabel',h_cmdLabel, ...
         'cmdLabelFont',h_cmdLabelFont, ...
         'radioSymbol',h_radioSymbol, ...
         'popSymbol',h_popSymbol, ...
         'cmdEdgeColor',h_cmdEdgeColor, ...
         'cmdFaceColor',h_cmdFaceColor, ...
         'editSymSize',h_editSymSize, ...
         'radioPatch',h_radioPatch, ...
         'editPatchSize',h_editPatchSize, ...
         'editCLimMin',h_editCLimMin, ...
         'editCLimMax',h_editCLimMax, ...
         'popColormap',h_popColormap, ...
         'cmdQry',h_cmdQry, ...
         'editQry',h_editQry, ...
         'cmdProceed',h_cmdProceed);
      
      set(h_dlg,'UserData',uih,'Visible','on')
      drawnow

      ui_mapdata('buttons')

   else  %no geo columns

      msg = 'This feature requires a GCE Data Structure with valid geographic data columns';

      messagebox('init', ...
         msg, ...
         '', ...
         'Error', ...
         [.9 .9 .9])

   end

else

   if length(findobj) > 1
      h_dlg = gcf;
      if strcmp(get(h_dlg,'Tag'),'dlgMapData') ~= 1
         h_dlg = [];
      end
   end

   if ~isempty(h_dlg)

      uih = get(h_dlg,'userdata');

      switch op

         case 'close'

            close(h_dlg)
            drawnow
            ui_aboutgce('reopen')  %check for last window

         case 'eval'

            s = uih.s;

            %get query option
            qry = get(uih.editQry,'String');
            qrystr = '';
            if ~isempty(qry)
               s = querydata(s,qry);
               qrystr = strrep(strrep(qry,'&','AND'),'|','OR');
            end

            if ~isempty(s)

               try
                  if get(uih.popMode,'Value') == 1
                     lon = extract(s,uih.Igeocols(get(uih.popLonEast,'Value')-1));
                     lat = extract(s,uih.Igeocols(get(uih.popLatNorth,'Value')-1));
                     utme = [];
                     utmn = [];
                  else
                     modeval = get(uih.popMode,'Value');
                     datumlist = get(uih.popMode,'UserData');
                     datum = datumlist{modeval};
                     utme = extract(s,uih.Igeocols(get(uih.popLonEast,'Value')-1));
                     utmn = extract(s,uih.Igeocols(get(uih.popLatNorth,'Value')-1));
                     utmz = extract(s,uih.Igeocols(get(uih.popZone,'Value')-1));
                     if iscell(utmz)
                         utmh = char(regexprep(utmz,'[ 0-9]',''));
                         utmz = fix(str2double(regexprep(utmz,'[^0-9]','')));
                     else
                         utmh = 'N';
                     end
                     [lon,lat] = utm2deg(utmz,utme,utmn,utmh,datum);
                  end
                  Ilonlat = find(~(isnan(lon)|isnan(lat)));
                  if ~isempty(Ilonlat)
                     lon = lon(Ilonlat);
                     lat = lat(Ilonlat);
                  end
               catch
                  Ilonlat = [];
               end

               if ~isempty(Ilonlat)

                  cancel = 0;  %init cancel flag

                  if get(uih.popDataCol,'Value') > 1
                     datacol = uih.Idata(get(uih.popDataCol,'Value')-1);
                     data = extract(s,datacol);
                     data = data(Ilonlat);
                     dtype = s.datatype{datacol};
                     prec = s.precision(datacol);
                     if ~isempty(data)
                        if strcmp(dtype,'s')
                           Ivalid = find(~cellfun('isempty',data));
                        else
                           Ivalid = find(~isnan(data));
                        end
                        if isempty(Ivalid)
                           data = [];
                           dtype = [];
                           cancel = 1;
                        end
                     else
                        cancel = 1;
                     end
                  else
                     data = [];
                     dtype = [];
                  end

                  curpath = pwd;
                  mapval = get(uih.popMap,'Value');

                  if cancel == 0

                     h_map = [];
                     mapfile = 'none';
                     if mapval == 1
                        [mapfile,mappn] = uigetfile('*.fig','Select a Matlab figure file to open containing a map');
                        drawnow
                     elseif mapval == 2
                        h_map = findobj('Tag','MapPlot');
                        if ~isempty(h_map)
                           mapfile = 'existing';
                           h_map = h_map(1);
                        end
                     else
                        filenames = extract(uih.maps,'filename');
                        mapfile = filenames{get(uih.popMap,'Value')-2};
                        mappn = curpath;
                     end

                     if ~strcmp(mapfile,'none')

                        try

                           %load map if not already open
                           if isempty(h_map)
                              cd(mappn)
                              open(mapfile)
                              cd(curpath)
                              h_map = gcf;
                              mlver = version;
                              if mlver(1) ~= '5'
                                 try
                                    r12_axistitles;  %regenerate axis titles for R12 compatability
                                 catch
                                 end
                              end
                              center_fig(h_map)
                           end

                           figure(h_map)
                           hold on;

                           ax = axis;
                           if abs(ax(1)) <= 180  %check for utm
                              x = lon;
                              y = lat;
                           elseif ~isempty(utme)
                              x = utme;
                              y = utmn;
                           else  %reproject lat/lon to utm
                              [z,x,y] = deg2utm(lon,lat); %#ok<ASGLU>
                           end

                           if get(uih.radioSymbol,'Value') == 1  %plot symbols

                              symval = get(uih.popSymbol,'Value');
                              symlist = get(uih.popSymbol,'UserData');
                              edgeclr = get(uih.cmdEdgeColor,'BackgroundColor');
                              faceclr = get(uih.cmdFaceColor,'BackgroundColor');
                              symsize = str2double(get(uih.editSymSize,'String'));
                              if isempty(symsize)
                                 symsize = 8;
                              end

                              sym = symlist{symval};
                              line(x,y,'Marker',sym, ...
                                 'Linestyle','none', ...
                                 'MarkerSize',symsize, ...
                                 'MarkerEdgeColor',edgeclr, ...
                                 'MarkerFaceColor',faceclr, ...
                                 'Tag','pointlabels');

                              drawnow

                           elseif get(uih.radioLabel,'Value') == 1  %plot labels

                              markerval = get(uih.popLabelMarker,'Value');
                              markerlist = get(uih.popLabelMarker,'UserData');
                              edgeclr = get(uih.cmdLabelMarkerEdge,'BackgroundColor');
                              faceclr = get(uih.cmdLabelMarkerFace,'BackgroundColor');
                              labelclr = get(uih.cmdLabel,'BackgroundColor');
                              markersize = str2double(get(uih.editLabelMarker,'String'));
                              if isempty(markersize)
                                 markersize = 4;
                              end

                              if ~isempty(data)
                                 if strcmp(dtype,'s')
                                    sym = char(data);
                                 else
                                    if strcmp(dtype,'d')
                                       sym = int2str(data);
                                    else
                                       try
                                          sym = num2str(data,['%0.',int2str(prec),dtype]);
                                       catch
                                          sym = num2str(data);  %use generic fallback
                                       end
                                    end
                                 end
                              else
                                 sym = int2str((1:max(Ilonlat))');  %use serial integers based on index to preserve row correspondence
                              end

                              %check for no marker option
                              if markerval > 1 && markersize > 0
                                 ax = axis;
                                 hoffset = abs(diff(ax(1:2))) ./ 100;
                                 voffset = abs(diff(ax(3:4))) ./ 1000;
                                 valign = 'bottom';
                                 line(x,y, ...
                                    'LineStyle','none', ...
                                    'Marker',markerlist{markerval}, ...
                                    'MarkerSize',markersize, ...
                                    'MarkerFacecolor',faceclr, ...
                                    'MarkerEdgecolor',edgeclr, ...
                                    'Clipping','on', ...
                                    'Tag','pointlabels');
                              else
                                 hoffset = 0;
                                 voffset = 0;
                                 valign = 'middle';
                              end

                              lblfont = get(uih.txtLabel,'FontName');
                              lblsize = get(uih.txtLabel,'FontSize');
                              lblweight = get(uih.txtLabel,'FontWeight');
                              lblangle = get(uih.txtLabel,'FontAngle');

                              text(x+hoffset,y+voffset,sym, ...
                                 'FontName',lblfont, ...
                                 'FontWeight',lblweight, ...
                                 'FontAngle',lblangle, ...
                                 'FontSize',lblsize, ...
                                 'HorizontalAlignment','center', ...
                                 'VerticalAlignment',valign, ...
                                 'Color',labelclr, ...
                                 'Clipping','on', ...
                                 'ButtonDownFcn','editnote', ...
                                 'Interpreter','none', ...
                                 'Tag','pointlabels', ...
                                 'UserData',[hoffset,voffset]);

                           elseif ~strcmp(dtype,'s')  %plot patches

                              patchsize = str2double(get(uih.editPatchSize,'String'));
                              if isempty(patchsize)
                                 patchsize = .2;
                              else
                                 patchsize = patchsize ./ 1000;
                              end

                              minclim = str2double(get(uih.editCLimMin,'String'));
                              maxclim = str2double(get(uih.editCLimMax,'String'));
                              cmaplist = get(uih.popColormap,'UserData');
                              cmap = cmaplist{get(uih.popColormap,'Value')};

                              if ~isempty(minclim) && ~isempty(maxclim) && ~isnan(minclim) && ~isnan(maxclim)
                                 lims = [minclim maxclim];
                              else
                                 lims = [];
                              end

                              if isempty(qrystr)
                                 titlestr = [s.name{datacol},' (',s.units{datacol},')'];
                              else
                                 titlestr = [s.name{datacol},' (',s.units{datacol},') -- ',qrystr];
                              end

                              msg = map_patch(x,y,data,patchsize,titlestr,lims,cmap);

                              if ~isempty(msg)
                                 messagebox('init',['  Data could not be plotted (',msg,')  '],'','Error',[.9 .9 .9])
                              end

                           else

                              messagebox('init', ...
                                 'Text columns cannot be plotted as patches', ...
                                 '', ...
                                 'Error', ...
                                 [.9 .9 .9])

                           end

                        catch
                           messagebox('init', ...
                              'Errors occurred opening or updating the map figure', ...
                              '', ...
                              'Error', ...
                              [.9 .9 .9])
                        end

                     else
                        messagebox('init', ...
                           ' Map figure file could not be located - plot cancelled ', ...
                           '', ...
                           'Error', ...
                           [.9 .9 .9])
                     end

                  else
                     messagebox('init', ...
                        ' No valid data in the specified column - plot cancelled ', ...
                        '', ...
                        'Error', ...
                        [.9 .9 .9])
                  end

               else

                  messagebox('init', ...
                     'No valid geographic coordinates were present to plot', ...
                     '', ...
                     'Error', ...
                     [.9 .9 .9])

               end

            else  %no data

               if ~isempty(qry)

                  messagebox('init', ...
                     ' Query returned no rows - plot cancelled ','','Warning',[.9 .9 .9])

               else

                  messagebox('init', ...
                     ' Data structure contains no data rows - plot cancelled','','Error',[.9 .9 .9])

               end

            end

         case 'mode'  %toggle geographic coordinate modes

            if get(uih.popMode,'Value') > 1
               set(uih.lblLonEast,'String','UTM Easting Column')
               set(uih.lblLatNorth,'String','UTM Northing Column')
               set(uih.lblZone,'Visible','on')
               set(uih.popZone,'Enable','on','BackgroundColor',[1 1 1])
            else
               set(uih.lblLonEast,'String','Longitude Column')
               set(uih.lblLatNorth,'String','Latitude Column')
               set(uih.lblZone,'Visible','off')
               set(uih.popZone,'Enable','off','BackgroundColor',[.8 .8 .8],'Value',1)
            end

            ui_mapdata('buttons')

         case 'data'  %handle data column selection events

            col = get(uih.popDataCol,'Value') - 1;
            if col > 0
               if strcmp(uih.s.datatype{uih.Idata(col)},'s') && get(uih.radioPatch,'Value') == 1  %patch + string
                  set(uih.radioPatch,'Value',0)
                  set(uih.radioLabel,'Value',0)
                  set(uih.radioSymbol,'Value',1)
               end
            else
               set(uih.radioPatch,'Value',0)
               set(uih.radioLabel,'Value',0)
               set(uih.radioSymbol,'Value',1)
            end

            ui_mapdata('buttons')

         case 'radio'

            h_cbo = gcbo;
            set([uih.radioLabel,uih.radioSymbol,uih.radioPatch],'Value',0)
            set(h_cbo,'Value',1)

            ui_mapdata('buttons')

         case 'buttons'

            modeval = get(uih.popMode,'Value');
            dataval = get(uih.popDataCol,'Value');
            lonval = get(uih.popLonEast,'Value');
            latval = get(uih.popLatNorth,'Value');
            if modeval > 1
               zoneval = get(uih.popZone,'Value');
            else
               zoneval = 2;
            end

            %define arrays of ui handles for toggling states
            h_symbol = [uih.popSymbol; ...
                  uih.cmdFaceColor; ...
                  uih.cmdEdgeColor; ...
                  uih.editSymSize];
            h_label = [uih.popLabelMarker; ...
                  uih.editLabelMarker; ...
                  uih.cmdLabelMarkerEdge; ...
                  uih.cmdLabelMarkerFace; ...
                  uih.txtLabel; ...
                  uih.cmdLabel; ...
                  uih.cmdLabelFont];
            h_label2 = [uih.editLabelMarker; ...
                  uih.cmdLabelMarkerEdge; ...
                  uih.cmdLabelMarkerFace];
            h_patch = [uih.editPatchSize; ...
                  uih.editCLimMin; ...
                  uih.editCLimMax; ...
                  uih.popColormap];

            if dataval == 1  %check for no data column, disable label & patch plots
               set(uih.radioPatch,'Enable','off')
               set(uih.radioLabel,'Enable','off')
            elseif strcmp(uih.s.datatype{uih.Idata(dataval-1)},'s')  %check for string col - disable patch
               set(uih.radioPatch,'Enable','off')
               set(uih.radioLabel,'Enable','on')
            else  %numeric data
               set(uih.radioPatch,'Enable','on')
               set(uih.radioLabel,'Enable','on')
            end

            %set state of plot option controls
            if get(uih.radioSymbol,'Value') == 1
               set(h_symbol,'Enable','on')
               set(h_label,'Enable','off')
               set(h_patch,'Enable','off')
            elseif get(uih.radioPatch,'Value') == 1
               set(h_symbol,'Enable','off')
               set(h_label,'Enable','off')
               set(h_patch,'Enable','on')
            else  %Label
               set(h_symbol,'Enable','off')
               set(h_patch,'Enable','off')
               set(h_label,'Enable','on')
               if get(uih.popLabelMarker,'Value') == 1
                  set(h_label2,'Enable','off')  %turn off marker size/color controls if 'none' selected
               end
            end

            %check for viable selections - enable proceed button
            if lonval > 1 && latval > 1 && zoneval > 1
               badcol = 0;
               if strcmp(uih.s.variabletype{uih.Igeocols(lonval-1)},'coord') ~= 1
                  badcol = 1;
               end
               if strcmp(uih.s.variabletype{uih.Igeocols(latval-1)},'coord') ~= 1
                  badcol = 1;
               end
               if modeval > 1 && strcmp(uih.s.variabletype{uih.Igeocols(zoneval-1)},'coord') ~= 1
                  badcol = 1;
               end
               if badcol == 0
                  set(uih.cmdProceed,'Enable','on')
               else
                  set(uih.cmdProceed,'Enable','off')
               end
            else
               set(uih.cmdProceed,'Enable','off')
            end

            drawnow

         case 'pickcolor'

            h_cbo = gcbo;
            c = get(h_cbo,'BackgroundColor');

            c = uisetcolor(c);

            if sum(c) < 2
               fg = [1 1 1];
            else
               fg = [0 0 0];
            end

            set(h_cbo,'BackgroundColor',c,'ForegroundColor',fg)

         case 'pickfont'

            uisetfont(uih.txtLabel);

         case 'editquery'  %create/edit query restriction

            qrystr = get(uih.editQry,'String');
            ui_querybuilder('init',uih.s,uih.editQry,'ui_mapdata(''query'')',qrystr)

         case 'clearquery'  %clear query restrction

            set(uih.editQry,'String','')
            drawnow

         case 'query'  %respond to restriction edits

            qrystr = get(uih.editQry,'UserData');
            set(uih.editQry,'String',qrystr)
            drawnow


      end

   end

end
