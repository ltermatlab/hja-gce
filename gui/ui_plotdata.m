function ui_plotdata(op,s,h_cb,cb)
%GCE Data Toolbox data structure plotting dialog
%
%syntax: ui_plotdata(op,s)
%
%input:
%  op = operation ('init' to initialize dialog)
%  s = data structure to plot
%
%output:
%  none
%
%
%(c)2002-2014 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 18-Apr-2014

if nargin == 0
   op = 'init';
elseif isstruct(op)
   s = op;
   op = 'init';
end

if exist('s','var') ~= 1
   s = [];
   plotopt = [];
else
   if gce_valid(s,'data') ~= 1
      s = [];
      plotopt = [];
   else
      plotopt = cell(length(s.name),5);
   end
end

if strcmp(op,'init')  %build gui

   %check for callback info
   if exist('h_cb','var') ~= 1
      h_cb = [];
   end   
   if exist('cb','var') ~= 1
      cb = '';
   end
   
   %set screen metrics
   bgcolor = [.95 .95 .95];
   res = get(0,'ScreenSize');
   figpos = [max(1,0.5.*(res(3)-525)) max(50,0.5.*(res(4)-600)) 525 600];

   %init default marker size, marker fill
   markerfill = 0;
   markersize = '6';
   flagoption = 1;
   sortxcol = 0;
   omitmissing = 0;
   invertaxes = 0;

   %check for saved preferences file
   if exist('ui_plotdata.mat','file') == 2
      try
         vars = load('ui_plotdata.mat','-mat');
      catch
         vars = struct('null','');
      end
      if isfield(vars,'markerfill')
         markerfill = vars.markerfill;
      end
      if isfield(vars,'markersize')
         markersize = vars.markersize;
      end
      if isfield(vars,'flagoption')
         flagoption = vars.flagoption;
      end
      if isfield(vars,'sortxcol')
         sortxcol = vars.sortxcol;
      end
      if isfield(vars,'omitmissing')
         omitmissing = vars.omitmissing;
      end
      if isfield(vars,'invertaxes')
         invertaxes = vars.invertaxes;
      end
   end

   h_dlg = figure('Visible','off', ...
      'Color',bgcolor, ...
      'KeyPressFcn','figure(gcf)', ...
      'MenuBar','none', ...
      'Name','Plot Data', ...
      'NumberTitle','off', ...
      'Position',figpos, ...
      'Tag','dlgPlotData', ...
      'ToolBar','none', ...
      'Resize','off', ...
      'CloseRequestFcn','ui_plotdata(''cancel'')', ...
      'DefaultuicontrolUnits','pixels');

   if mlversion >= 7
      set(h_dlg,'WindowStyle','normal')
      set(h_dlg,'DockControls','off')
   end

   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'ForegroundColor',[0 0 0], ...
      'BackgroundColor',bgcolor, ...
      'Position',[1 1 figpos(3) figpos(4)]);

   %create menus
   h_mnuFile = uimenu('Parent',h_dlg, ...
      'Label','File');

   h_mnuEdit = uimenu('Parent',h_dlg, ...
      'Label','Edit');

   h_mnuLoad = uimenu('Parent',h_mnuFile, ...
      'Label','Load', ...
      'Callback','ui_plotdata(''load'')', ...
      'Tag','mnuLoad', ...
      'UserData',pwd);

   h_mnuClose = uimenu('Parent',h_mnuFile, ...
      'Label','Close', ...
      'Callback','ui_plotdata(''cancel'')', ...
      'Separator','on', ...
      'Tag','mnuCancel');

   uimenu('Parent',h_mnuEdit, ...
      'Label','Reset Lists', ...
      'Callback','ui_plotdata(''newdata'')', ...
      'Tag','mnuReset');

   %create controls
   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[4 570 215 18], ...
      'String','Available Columns', ...
      'Style','text', ...
      'Tag','lblAvailable');

   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[295 570 215 18], ...
      'String','X Column', ...
      'Style','text', ...
      'Tag','lblXCol');

   uicontrol('Parent',h_dlg, ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.7], ...
      'ListboxTop',0, ...
      'Position',[295 480 215 18], ...
      'String','Y Column(s)', ...
      'Style','text', ...
      'Tag','lblYCol');

   h_listAvailable = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[6 360 238 210], ...
      'String',' ', ...
      'Style','listbox', ...
      'Tag','listAvailable', ...
      'Callback','ui_plotdata(''list'')', ...
      'Value',1);

   h_listXCol = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[295 510 225 60], ...
      'String',' ', ...
      'Style','listbox', ...
      'Tag','listXCol', ...
      'Value',1);

   h_listYCol = uicontrol('Parent',h_dlg, ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[295 240 225 240], ...
      'String',' ', ...
      'Style','listbox', ...
      'Tag','listYCol', ...
      'Value',1);

   h_cmdAddXCol = uicontrol('Parent',h_dlg, ...
      'Callback','ui_plotdata(''XCol_add'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[255 542 30 22], ...
      'String','>', ...
      'ToolTipString','Add selected column to the ''X Column'' list', ...
      'Tag','cmdAddXCol');

   h_cmdRemXCol = uicontrol('Parent',h_dlg, ...
      'Callback','ui_plotdata(''XCol_rem'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[255 517 30 22], ...
      'String','<', ...
      'ToolTipString','Remove selected column from the ''X Column By'' list', ...
      'Tag','cmdRemXCol');

   h_cmdAddYCol = uicontrol('Parent',h_dlg, ...
      'Callback','ui_plotdata(''YCol_add'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[255 450 30 22], ...
      'String','>', ...
      'ToolTipString','Add selected column to the ''Y Column(s)'' list', ...
      'Tag','cmdAddYCol');

   h_cmdRemYCol = uicontrol('Parent',h_dlg, ...
      'Callback','ui_plotdata(''YCol_rem'')', ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ListboxTop',0, ...
      'Position',[255 425 30 22], ...
      'String','<', ...
      'ToolTipString','Remove selected column from the ''Y Column(s)'' list', ...
      'Tag','cmdRemYCol');

   h_txtSymbol = uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[5 327 110 18], ...
      'String','Plot Symbol', ...
      'Tag','txtSymbol', ...
      'UserData',plotopt);

   h_popSymbol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Fontsize',10, ...
      'BackgroundColor',[1 1 1], ...
      'Position',[115 329 130 18], ...
      'String',char([ ...
         {'no symbol'}; ...
         {'d (diamond)'}; ...
         {'o (circle)'}; ...
         {'^ (triangle up)'}; ...
         {'v (triangle down)'}; ...
         {'< (triangle left)'}; ...
         {'> (triangle right)'}; ...
         {'s (square)'}; ...
         {'p (pentagram)'}; ...
         {'h (hexagram)'}; ...
         {'x (x-mark)'}; ...
         {'p (plus)'}; ...
         {'* (star)'}; ...
         {'. (point)'}]), ...
      'UserData',[ ...
         {''}; ...
         {'d'}; ...
         {'o'}; ...
         {'^'}; ...
         {'v'}; ...
         {'<'}; ...
         {'>'}; ...
         {'s'}; ...
         {'p'}; ...
         {'h'}; ...
         {'x'}; ...
         {'+'}; ...
         {'*'}; ...
         {'.'}], ...
      'Value',2, ...
      'Callback','ui_plotdata(''symbol'')', ...
      'Tag','popSymbol');

   h_chkFill = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'ForegroundColor',[0 0 .8], ...
      'BackgroundColor',bgcolor, ...
      'Position',[115 300 70 18], ...
      'String','Filled', ...
      'Value',markerfill, ...
      'Tag','chkFill');

   h_editSymbolSize = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'Fontsize',10, ...
      'BackgroundColor',[1 1 1], ...
      'Position',[185 300 35 20], ...
      'HorizontalAlignment','left', ...
      'String',markersize, ...
      'UserData',markersize, ...
      'Callback','ui_plotdata(''symsize'')', ...
      'Tag','editSymbolSize');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[225 300 45 18], ...
      'HorizontalAlignment','left', ...
      'String','pts', ...
      'Tag','txtSymbolSize');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[5 270 110 18], ...
      'String','Line Style', ...
      'Tag','txtLine');

   h_popLine = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Fontsize',10, ...
      'BackgroundColor',[1 1 1], ...
      'Position',[115 272 130 18], ...
      'String',char([ ...
         {'no line'}; ...
         {'-  (solid)'}; ...
         {':  (dotted)'}; ...
         {'-. (dashed)'}; ...
         {'-- (dash-dot)'}]), ...
      'UserData',[ ...
         {''}; ...
         {'-'}; ...
         {':'}; ...
         {'-.'}; ...
         {'--'}], ...
      'Value',2, ...
      'Tag','popLine');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[5 240 110 18], ...
      'String','Plot Color', ...
      'Tag','txtColor');

   h_popColor = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Fontsize',10, ...
      'BackgroundColor',[1 1 1], ...
      'Position',[115 242 130 18], ...
      'String',char([ ...
         {'b (blue)'}; ...
         {'g (green)'}; ...
         {'k (black)'}; ...
         {'c (cyan)'}; ...
         {'y (yellow)'}; ...
         {'r (red)'}; ...
         {'m (magenta)'}]), ...
      'UserData',[ ...
         {'b'}; ...
         {'g'}; ...
         {'k'}; ...
         {'c'}; ...
         {'y'}; ...
         {'r'}; ...
         {'m'}], ...
      'Value',1, ...
      'Tag','popColor');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[5 220 515 2], ...
      'String','', ...
      'BackgroundColor',[.8 .8 .8]);

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[10 188 120 18], ...
      'String','Data Restriction', ...
      'Tag','txtQry');

   h_editQry = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[135 185 278 23], ...
      'BackgroundColor',[1 1 1], ...
      'String','', ...
      'TooltipString','Query statement for restricting the data', ...
      'Tag','editQry');

   h_cmdQry = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[416 186 50 23], ...
      'String','Edit', ...
      'TooltipString','Open a graphical dialog to edit the query statement', ...
      'Callback','ui_plotdata(''editquery'')', ...
      'Tag','cmdQry');

   uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[468 186 50 23], ...
      'String','Clear', ...
      'TooltipString','Clear the query statement', ...
      'Callback','ui_plotdata(''clearquery'')', ...
      'Tag','cmdQry');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[20 151 115 18], ...
      'String','Y-Axis Scaling', ...
      'Tag','txtScale');

   h_popScale = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Fontsize',10, ...
      'BackgroundColor',[1 1 1], ...
      'Position',[135 153 130 18], ...
      'String',['Autoscale';'Linear   ';'Log10    '], ...
      'UserData',[{'auto'},{'linear'},{'log'}], ...
      'TooltipString','Y-Axis scaling option (autoscale multiplies low values by powers of 10 until in range)', ...
      'Value',1, ...
      'Tag','popScale');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[20 118 115 18], ...
      'String','Flag Options');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Fontsize',10, ...
      'Fontweight','bold', ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'Position',[20 85 115 18], ...
      'String','Other Options');
   
   flagopts = {'Display Q/C flags as characters above points'; ...
      'Display Q/C flags as red symbols (faster)'; ...
      'Do not display flags (ignore)'; ...
      'Remove flagged values'};

   h_popFlags = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[135 118 350 18], ...
      'BackgroundColor',[1 1 1], ...
      'ForegroundColor',[0 0 0], ...
      'FontSize',9, ...
      'String',flagopts, ...
      'TooltipString','Options for displaying or removing Q/C-flagged values', ...
      'Value',flagoption, ...
      'Tag','chkShowFlags');

   h_chkSort = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[135 85 200 18], ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'String','Sort by X Column values?', ...
      'TooltipString','Option to sort rows by the X Column to improve line plots', ...
      'Value',sortxcol, ...
      'Tag','chkSort');

   h_chkDeblank = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[135 62 350 18], ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'String','Omit missing values (force continuous lines)?', ...
      'TooltipString','Option to ignore blank (NaN) Y values to avoid breaks in line plots', ...
      'Value',omitmissing, ...
      'Tag','chkDeblank');

   h_chkRotate = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[135 39 300 18], ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'String','Invert plot axes (X on left, Y on top)?', ...
      'TooltipString','Option to invert the plot so the X axis is on the left and values are reversed', ...
      'Value',invertaxes, ...
      'Tag','chkRotate');

   h_cmdEval = uicontrol('Parent',h_dlg, ...
      'Callback','ui_plotdata(''eval'')', ...
      'Enable','off', ...
      'FontSize',9, ...
      'ListboxTop',0, ...
      'Position',[455 10 60 25], ...
      'String','Proceed', ...
      'Tag','cmdEval', ...
      'TooltipString','Generate the plot with the selected options', ...
      'UserData',s);

   h_cmdCancel = uicontrol('Parent',h_dlg, ...
      'Callback','ui_plotdata(''cancel'')', ...
      'FontSize',9, ...
      'ListboxTop',0, ...
      'Position',[10 10 60 25], ...
      'String','Cancel', ...
      'TooltipString','Cancel plotting and close the dialog window', ...
      'Tag','cmdCancel');

   uih = struct( ...
      'mnuLoad',h_mnuLoad, ...
      'mnuClose',h_mnuClose, ...
      'listAvailable',h_listAvailable, ...
      'listXCol',h_listXCol, ...
      'listYCol',h_listYCol, ...
      'cmdAddXCol',h_cmdAddXCol, ...
      'cmdRemXCol',h_cmdRemXCol, ...
      'cmdAddYCol',h_cmdAddYCol, ...
      'cmdRemYCol',h_cmdRemYCol, ...
      'txtSymbol',h_txtSymbol, ...
      'popSymbol',h_popSymbol, ...
      'popLine',h_popLine, ...
      'chkFill',h_chkFill, ...
      'editSymbolSize',h_editSymbolSize, ...
      'cmdQry',h_cmdQry, ...
      'editQry',h_editQry, ...
      'popColor',h_popColor, ...
      'popScale',h_popScale, ...
      'popFlags',h_popFlags, ...
      'chkSort',h_chkSort, ...
      'chkDeblank',h_chkDeblank, ...
      'chkRotate',h_chkRotate, ...
      'cmdEval',h_cmdEval, ...
      'cmdCancel',h_cmdCancel', ...
      'h_cb',h_cb, ...
      'cb',cb);

   set(h_dlg,'Visible','on','UserData',uih)

   if ~isempty(s)
      ui_plotdata('newdata')
   else
      drawnow
   end

else  %handle callbacks

   h_dlg = [];

   if length(findobj) > 2
      h_dlg = gcf;
      if ~strcmp(get(h_dlg,'Tag'),'dlgPlotData')
         h_dlg = [];
      end
   end

   if ~isempty(h_dlg)

      uih = get(h_dlg,'UserData');

      switch op

         case 'cancel'  %close dialog

            ui_plotdata('savestate')

            delete(h_dlg)

            ui_aboutgce('reopen')  %check for last window

         case 'savestate'  %save ui settings as defaults for next session

            %get uicontrol selections
            markerfill = get(uih.chkFill,'Value');
            markersize = get(uih.editSymbolSize,'String');
            flagoption = get(uih.popFlags,'Value');
            sortxcol = get(uih.chkSort,'Value');
            omitmissing = get(uih.chkDeblank,'Value');
            invertaxes = get(uih.chkRotate,'Value');

            %get path for saving settings
            pn = fileparts(which('ui_plotdata.mat'));
            if isempty(pn)
               pn = [gce_homepath,filesep,'settings'];
            end
            if ~isdir(pn)
               pn = fileparts(which('ui_plotdata'));
            end
            
            %save settings variables
            try
               save([pn,filesep,'ui_plotdata.mat'],'markerfill','markersize','flagoption', ...
                  'sortxcol','omitmissing','invertaxes')
            catch
               %fail silently
            end

         case 'newdata'

            %get data from cache
            s = get(uih.cmdEval,'UserData');

            %validate data structure
            if gce_valid(s,'data') == 1

               %store data and init controls
               set(uih.cmdEval,'UserData',s)  %store data structure
               set(uih.listAvailable,'UserData',[1:length(s.name)],'Value',1)  %store full index
               set(uih.listXCol,'UserData',[],'Value',1)  %clear XCol index
               set(uih.listYCol,'UserData',[],'Value',1)  %clear YCol index
               set(uih.txtSymbol,'UserData',cell(length(s.name),5))  %initialize plot option array
               set(uih.popSymbol,'Value',2)
               set(uih.chkFill,'Enable','on')
               set(uih.editSymbolSize,'Enable','on')
               set(uih.popLine,'Value',2)
               set(uih.popColor,'Value',1)
               set(uih.editQry,'String','')

               ui_plotdata('update')

            else

               messagebox('init', ...
                  '  Invalid GCE Data Structure  ', ...
                  [], ...
                  'Error', ...
                  [.9 .9 .9]);

            end

         case 'update'  %generate/update parameter lists, list control states

            %get cached structure
            s = get(uih.cmdEval,'UserData');

            if isstruct(s)

               %get column selections
               I_avail = get(uih.listAvailable,'UserData');
               I_XCol = get(uih.listXCol,'UserData');
               I_YCol = get(uih.listYCol,'UserData');

               %get structure fields for index-to-name resolution
               vars = s.name;
               units = s.units;
               cols = length(s.name);
               varstr = cell(1,cols);

               %get plot control settings
               plotopt = get(uih.txtSymbol,'UserData');
               sym = get(uih.popSymbol,'UserData');
               ln = get(uih.popLine,'UserData');
               clr = get(uih.popColor,'UserData');
               fillopt = {'no fill','filled'};

               %generate column and units for display
               for n = 1:cols
                  unitstr = units{n};
                  unitstr = strrep(unitstr,'none','');
                  if ~isempty(unitstr)
                     unitstr = ['  (',unitstr,')'];
                  end
                  varstr{n} = [vars{n},unitstr];
               end

               %check for available columns
               if ~isempty(I_avail)
                  s_avail = varstr(I_avail);
               else
                  s_avail = {''};
               end

               %check for x column selection
               if ~isempty(I_XCol)
                  s_XCol = varstr(I_XCol);
               else
                  s_XCol = {''};
               end

               %check for y column selection(s)
               if ~isempty(I_YCol)
                  yvarstr = cell(1,length(I_YCol));
                  for n = 1:length(I_YCol)
                     i = I_YCol(n);
                     opt = plotopt(i,:);
                     if opt{1} > 1
                        yvarstr{n} = [vars{i},' (',clr{opt{3}},sym{opt{1}},ln{opt{2}},', ',fillopt{opt{4}+1},', ',int2str(opt{5}),'pts)'];
                     else
                        yvarstr{n} = [vars{i},' (',clr{opt{3}},sym{opt{1}},ln{opt{2}},')'];
                     end
                  end
                  s_YCol = yvarstr;
               else
                  s_YCol = {''};
               end

               %update available list
               set(uih.listAvailable, ...
                  'String',s_avail, ...
                  'Value',max(1,min(get(uih.listAvailable,'Value'),length(I_avail))), ...
                  'ListboxTop',min(get(uih.listAvailable,'ListboxTop'),max(1,length(I_avail))))

               %update x
               set(uih.listXCol, ...
                  'String',s_XCol, ...
                  'Value',max(1,min(get(uih.listXCol,'Value'),length(I_XCol))))

               %update y
               set(uih.listYCol, ...
                  'String',s_YCol, ...
                  'Value',max(1,min(get(uih.listYCol,'Value'),length(I_YCol))))

               %set control states
               if ~isempty(I_XCol)
                  set(uih.cmdAddXCol,'Enable','off')
                  set(uih.cmdRemXCol,'Enable','on')
               else
                  set(uih.cmdAddXCol,'Enable','on')
                  set(uih.cmdRemXCol,'Enable','off')
               end

               if isempty(I_YCol)
                  set(uih.cmdRemYCol,'Enable','off')
               else
                  set(uih.cmdRemYCol,'Enable','on')
               end

               if isempty(I_avail)
                  set(uih.cmdAddXCol,'Enable','off')
                  set(uih.cmdAddYCol,'Enable','off')
               else
                  set(uih.cmdAddYCol,'Enable','on')
               end

               if ~isempty(I_XCol) && ~isempty(I_YCol)
                  set(uih.cmdEval,'Enable','on')
               else
                  set(uih.cmdEval,'Enable','off')
               end

               drawnow

            end

         case 'list'  %handle list click/change events

            %check if double-click
            if strcmp(get(gcf,'selectiontype'),'open')
               I_XCol = get(uih.listXCol,'UserData');
               if isempty(I_XCol)
                  ui_plotdata('XCol_add');
               else
                  ui_plotdata('YCol_add');
               end
            end

         case 'symbol'  %toggle control states based on symbol selection

            val = get(uih.popSymbol,'Value');
            if val > 1
               set(uih.chkFill,'Enable','on')
               set(uih.editSymbolSize,'Enable','on')
            else
               set(uih.chkFill,'Enable','off')
               set(uih.editSymbolSize,'Enable','off')
            end

         case 'symsize'  %validate symbol size edits

            str = get(uih.editSymbolSize,'String');
            val = str2double(str);
            if isnan(val)
               str = '';
            elseif val <= 0
               str = '';
            end
            if ~isempty(str)
               set(uih.editSymbolSize,'UserData',str)  %cache new value
            else
               set(uih.editSymbolSize,'String',get(uih.editSymbolSize,'UserData'))  %reset string
               drawnow
               messagebox('init','Invalid symbol size - value reset',[],'Error',[.9 .9 .9])
            end

         case 'eval'

            %get cached structure, indices
            s = get(uih.cmdEval,'UserData');
            I_XCol = get(uih.listXCol,'UserData');
            I_YCol = get(uih.listYCol,'UserData');

            %get scaling options
            scaleopt = get(uih.popScale,'Value');
            scaledata = get(uih.popScale,'UserData');

            %get rotatio option
            rotopt = get(uih.chkRotate,'Value');

            %get flag option
            flagopt = get(uih.popFlags,'Value');
            switch flagopt
               case 1
                  showflags = 1;  %char flags
               case 2
                  showflags = 2;  %symbol flags
               case 3
                  showflags = 0;  %do not display
               otherwise
                  s = nullflags(s);  %remove flagged values
                  showflags = 0;   %suppress display
            end

            %get deblank option
            deblankopt = get(uih.chkDeblank,'Value');

            %get query option
            qry = get(uih.editQry,'String');
            if ~isempty(qry)
               qrystr = strrep(strrep(qry,'&','AND'),'|','OR');
               s2 = querydata(s,qry);
               if ~isempty(s2)
                  s = s2;
                  s.title = [s.title,' (',qrystr,')'];
               else
                  s.values = cell(1,length(s.name));
                  s.flags = repmat({''},1,length(s.name));
               end
            end
            
            %get x sorting option
            sortopt = get(uih.chkSort,'Value');
            
            %get plot options, lookup arrays
            plotopt = get(uih.txtSymbol,'UserData');
            symb = get(uih.popSymbol,'UserData');
            ln = get(uih.popLine,'UserData');
            clr = get(uih.popColor,'UserData');
            
            %save settings and close dialog
            ui_plotdata('savestate')
               
            %check for callback mode
            if isempty(uih.h_cb) || isempty(uih.cb)
               
               %check for data values
               if ~isempty(s.values{1})
                  
                  %generate plot, trapping errors
                  try
                     msg = plotdata(s,I_XCol,I_YCol, ...
                        clr([plotopt{I_YCol,3}]'), ...
                        symb([plotopt{I_YCol,1}]'), ...
                        ln([plotopt{I_YCol,2}]'), ...
                        [plotopt{I_YCol,4}]', ...
                        [plotopt{I_YCol,5}]', ...
                        scaledata{scaleopt}, ...
                        rotopt, ...
                        sortopt, ...
                        1, ...
                        showflags, ...
                        deblankopt);
                     if ~isempty(msg)
                        msg = ['  Plot could not be generated (',msg,')  '];
                     end
                  catch
                     msg = 'The plot could not be generated with current selections';
                  end
                  
                  if ~isempty(msg)
                     messagebox('init',msg,'','Error',[.9 .9 .9]);
                  end
                  
               else
                  messagebox('init','The plot could not be generated because the structure contains no data', ...
                     '','Error',[.9 .9 .9]);
               end
               
            else  %callback mode
               
               delete(h_dlg)
               
               %init settings structure
               plotinfo = struct( ...
                  'xcol','', ...
                  'ycol','', ...
                  'groupcol','', ...
                  'colors','', ...
                  'markers','', ...
                  'linestyles','', ...
                  'fillmarkers','', ...
                  'markersize','', ...
                  'scale','', ...
                  'rotateaxis','', ...
                  'sort','', ...
                  'showflags','', ...
                  'deblank','', ...
                  'query',qry);

                  plotinfo.xcol = s.name{I_XCol};
                  plotinfo.ycol = s.name(I_YCol)';
                  plotinfo.colors = clr([plotopt{I_YCol,3}]');
                  plotinfo.markers = symb([plotopt{I_YCol,1}]');
                  plotinfo.linestyles = ln([plotopt{I_YCol,2}]');
                  plotinfo.fillmarkers = [plotopt{I_YCol,4}]';
                  plotinfo.markersize = [plotopt{I_YCol,5}]';
                  plotinfo.scale = scaledata{scaleopt};
                  plotinfo.rotateaxis = rotopt;
                  plotinfo.sort = sortopt;
                  plotinfo.showflags = showflags;
                  plotinfo.deblank = deblankopt;
                              
               %return plotinfo to calling figure
               h_parent = parent_figure(uih.h_cb);
               if ~isempty(h_parent)
                  figure(h_parent)
                  set(uih_h_cb,'UserData',plotinfo)
                  try
                     eval(uih.cb)
                  catch
                     messagebox('init','An error occurred returning the plot information to the calling dialog', ...
                        '','Error',[0.95 0.95 0.95])
                  end
               end
               
            end
            
         case 'load'  %load new data to plot

            %cache path and change to last load path
            curpath = pwd;
            lastpath = get(uih.mnuLoad,'UserData');
            if ~isempty(lastpath)
               cd(lastpath)
            end

            %prompt for file
            [fn,pn] = uigetfile('*.mat;*.MAT','Select a file containing a GCE Data Structure');
            cd(curpath)
            drawnow

            %check for cancel
            if fn ~= 0

               %update cached path
               set(uih.mnuLoad,'UserData',pn)

               err = 0;
               vars = [];

               %load file
               pn = clean_path(pn);
               try
                  vars = load([pn,filesep,fn],'-mat');
               catch
                  err = 1;
               end

               if err == 0 && isstruct(vars)

                  vnames = fieldnames(vars);

                  %prompt for variable to load
                  if length(vnames) > 1
                     Isel = listdialog('liststring',vnames, ...
                        'selectionmode','single', ...
                        'promptstring','Select a variable from the list to load', ...
                        'name','Select Variable');
                  else
                     Isel = 1;
                  end

                  if ~isempty(Isel)

                     %load variable
                     s = vars.(vnames{Isel});

                     %cache data 
                     set(uih.cmdEval,'UserData',s)

                     %refresh dialog
                     ui_plotdata('newdata')

                  end

               else

                  messagebox('init', ...
                     ['''',fn,''' is not a valid Matlab data file'], ...
                     [], ...
                     'Error', ...
                     [.9 .9 .9]);

               end

            end

         case 'copysel'  %handle list-to-list transfers

            %get handles
            h_source = get(uih.cmdAddXCol,'UserData');
            h_target = get(uih.cmdRemXCol,'UserData');
            h_list = uih.listAvailable;

            if ~isempty(h_source) && ~isempty(h_target)

               %get indices
               I_target = get(h_target,'UserData');
               I_source = get(h_source,'UserData');
               I_sel = I_source(get(h_source,'Value'));

               %update indices
               I_target = [I_target,I_sel];
               I_source = I_source(find(I_source~=I_sel));

               %store indices
               set(h_target,'UserData',I_target)
               set(h_source,'UserData',I_source)

               %re-sort master list if adding rows back to list
               if h_target == h_list
                  Ilist = get(h_list,'UserData');
                  [Ilist,I] = sort(Ilist);
                  Isel = find(Ilist==I_target(end));
                  set(h_list,'UserData',sort(Ilist),'Value',Isel)
               else
                  set(h_target,'Value',length(I_target))
               end

               %update uicontrols
               ui_plotdata('update');

            end

         case 'XCol_add'

            %assign handles
            set(uih.cmdAddXCol,'UserData',uih.listAvailable);  %source
            set(uih.cmdRemXCol,'UserData',uih.listXCol);  %target

            %update listboxes
            ui_plotdata('copysel')

         case 'XCol_rem'

            %assign handles
            set(uih.cmdAddXCol,'UserData',uih.listXCol);  %source
            set(uih.cmdRemXCol,'UserData',uih.listAvailable);  %target

            %update listboxes
            ui_plotdata('copysel')

         case 'YCol_add'

            %get cached plot option info
            plotopt = get(uih.txtSymbol,'UserData');
            symval = get(uih.popSymbol,'Value');
            lnval = get(uih.popLine,'Value');
            clrval = get(uih.popColor,'Value');
            fillval = get(uih.chkFill,'Value');
            symsize = str2double(get(uih.editSymbolSize,'String'));

            %update plot option info
            Isel = get(uih.listAvailable,'Value');
            indx = get(uih.listAvailable,'UserData');
            plotopt(indx(Isel),:) = [{symval},{lnval},{clrval},{fillval},{symsize}];

            %assign handles
            set(uih.cmdAddXCol,'UserData',uih.listAvailable);  %source
            set(uih.cmdRemXCol,'UserData',uih.listYCol);  %target
            set(uih.txtSymbol,'UserData',plotopt);  %cache plot options

            %conditionally scroll plot symbols, lines, colors
            if symval > 1 && symval < size(get(uih.popSymbol,'UserData'),1)
               set(uih.popSymbol,'Value',symval+1)
            elseif symval > 1  %scroll to first symbol unless no symbol selected
               set(uih.popSymbol,'Value',2)
            end
            
            if clrval < size(get(uih.popColor,'UserData'),1)
               set(uih.popColor,'Value',clrval+1)
            else  %scroll to first color if at end of list
               set(uih.popColor,'Value',1)
            end

            %update listboxes
            ui_plotdata('copysel')

         case 'YCol_rem'

            %update cached plot option info
            plotopt = get(uih.txtSymbol,'UserData');
            Isel = get(uih.listYCol,'Value');
            indx = get(uih.listYCol,'UserData');
            plotopt(indx(Isel),:) = cell(1,5);

            %assign handles
            set(uih.cmdAddXCol,'UserData',uih.listYCol)  %source
            set(uih.cmdRemXCol,'UserData',uih.listAvailable)  %target
            set(uih.txtSymbol,'UserData',plotopt)  %update plot option array

            %update listboxes
            ui_plotdata('copysel')

         case 'editquery'  %create/edit query restriction

            s = get(uih.cmdEval,'UserData');
            qrystr = get(uih.editQry,'String');

            ui_querybuilder('init',s,uih.editQry,'ui_plotdata(''query'')',qrystr)

         case 'clearquery'  %clear query restrction

            set(uih.editQry,'String','')
            drawnow

         case 'query'  %respond to restriction edits

            qrystr = get(uih.editQry,'UserData');
            set(uih.editQry,'String',qrystr)
            drawnow

      end

   end

end