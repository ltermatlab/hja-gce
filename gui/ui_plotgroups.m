function ui_plotgroups(op,s,h_cb,cb)
%Dialog for creating a series of line/scatter plots from a single data set split by values in a grouping column
%
%syntax: ui_plotgroups(op,s)
%
%input:
%  op = operation ('init' to initialize dialog)
%  s = data structure to plot
%
%output:
%  none
%
%(c)2002-2013 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 02-Jun-2013

%check for no input or data structure as first argument
if nargin == 0
   op = 'init';
elseif isstruct(op)
   s = op;
   op = 'init';
end

if strcmp(op,'init')  %build gui
   
   %check for valid data to plot
   if exist('s','var') ~= 1 || gce_valid(s,'data') ~= 1
      s = [];
   end

   %check for callback info
   if exist('h_cb','var') ~= 1
      h_cb = [];
   end   
   if exist('cb','var') ~= 1
      cb = '';
   end

   %init default marker size, marker fill
   markerfill = 0;
   markersize = '6';
   displayflags = 1;
   enabledisplayflags = 'on';
   removeflags = 0;
   invertaxes = 0;
   maxgps = '10';

   %check for saved preferences file
   if exist('ui_plotgroups.mat','file') == 2
      try
         vars = load('ui_plotgroups.mat','-mat');
      catch
         vars = struct('null','');
      end
      if isfield(vars,'markerfill')
         markerfill = vars.markerfill;
      end
      if isfield(vars,'markersize')
         markersize = vars.markersize;
      end
      if isfield(vars,'displayflags')
         displayflags = vars.displayflags;
      end
      if isfield(vars,'removeflags')
         removeflags = vars.removeflags;
      end
      if isfield(vars,'invertaxes')
         invertaxes = vars.invertaxes;
      end
      if isfield(vars,'maxgroups')
         maxgps = vars.maxgroups;
      end
      if removeflags == 1  %disable display flags if flags removed
         displayflags = 0;
         enabledisplayflags = 'off';
      end
   end

   %init figure color/position vars
   bgcolor = [.95 .95 .95];
   res = get(0,'ScreenSize');
   figpos = [max(1,0.5.*(res(3)-500)) max(50,0.5.*(res(4)-500)) 500 500];

   %open dialog figure
   h_dlg = figure('Visible','off', ...
      'Color',bgcolor, ...
      'KeyPressFcn','figure(gcf)', ...
      'MenuBar','none', ...
      'Name','Plot Data by Groups', ...
      'NumberTitle','off', ...
      'PaperUnits','points', ...
      'Position',figpos, ...
      'Tag','dlgPlotGroups', ...
      'ToolBar','none', ...
      'Resize','off', ...
      'CloseRequestFcn','ui_plotgroups(''cancel'')', ...
      'DefaultuicontrolUnits','pixels');

   if mlversion >= 7
      set(h_dlg,'WindowStyle','normal')
      set(h_dlg,'DockControls','off')
   end

   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'ForegroundColor',[0 0 0], ...
      'BackgroundColor',bgcolor, ...
      'Position',[1 1 figpos(3) figpos(4)]);

   %create menus
   h_mnuFile = uimenu('Parent',h_dlg, ...
      'Label','File', ...
      'Tag','mnuFile');

   h_mnuLoad = uimenu('Parent',h_mnuFile, ...
      'Callback','ui_plotgroups(''load'')', ...
      'Label','Load', ...
      'Tag','mnuLoad', ...
      'UserData','C:\User Files\Wade\Programs\LTER');

   h_mnuClose = uimenu('Parent',h_mnuFile, ...
      'Callback','ui_plotgroups(''cancel'')', ...
      'Label','Close', ...
      'Separator','on', ...
      'Tag','mnuCancel');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[66 457 120 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','X Data Column', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[66 418 120 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Y Data Column', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[66 381 120 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Grouping Column', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[66 345 120 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Maximum Groups', ...
      'Tag','label');

   h_popXCol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 459 220 18], ...
      'BackgroundColor',[1 1 1], ...
      'Callback','ui_plotgroups(''query'')', ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popXCol', ...
      'TooltipString','Column to use for X values', ...
      'Callback','ui_plotgroups(''validate'')', ...
      'UserData',1, ...
      'Value',1);

   h_popYCol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 421 220 18], ...
      'BackgroundColor',[1 1 1], ...
      'Callback','ui_plotgroups(''query'')', ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popYCol', ...
      'TooltipString','Column to use for X values', ...
      'Callback','ui_plotgroups(''validate'')', ...
      'UserData',2, ...
      'Value',1);

   h_popGroup = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 383 220 18], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popGroup', ...
      'TooltipString','Column to use for row restriction', ...
      'Callback','ui_plotgroups(''validate'')', ...
      'UserData',3, ...
      'Value',1);

   h_editMaxGps = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'Position',[196 344 60 20], ...
      'BackgroundColor',[1 1 1], ...
      'HorizontalAlignment','left', ...
      'Fontsize',10, ...
      'String',maxgps, ...
      'Tag','editMaxGps', ...
      'Callback','ui_plotgroups(''maxgroups'')', ...
      'UserData',str2double(maxgps));

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[5 323 490 2], ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'Tag','separator');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[69 286 110 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Plot Symbol', ...
      'Tag','label');

   h_chkSymbol = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[194 284 100 20], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'String','Automatic', ...
      'Tag','chkSymbol', ...
      'Callback','ui_plotgroups(''autosymbol'')', ...
      'Value',1);

   h_popSymbol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[294 288 130 18], ...
      'BackgroundColor',[1 1 1], ...
      'Enable','off', ...
      'FontSize',10, ...
      'String',char([ ...
         {'(automatic)'}; ...
         {'(none)'}; ...
         {'d (diamond)'}; ...
         {'o (circle)'}; ...
         {'^ (triangle up)'}; ...
         {'v (triangle down)'}; ...
         {'< (triangle left)'}; ...
         {'> (triangle right)'}; ...
         {'s (square)'}; ...
         {'p (pentagram)'}; ...
         {'h (hexagram)'}; ...
         {'x (x-mark)'}; ...
         {'p (plus)'}; ...
         {'* (star)'}; ...
         {'. (point)'}]), ...
      'UserData',[ ...
         {''}; ...
         {'none'}; ...
         {'d'}; ...
         {'o'}; ...
         {'^'}; ...
         {'v'}; ...
         {'<'}; ...
         {'>'}; ...
         {'s'}; ...
         {'p'}; ...
         {'h'}; ...
         {'x'}; ...
         {'+'}; ...
         {'*'}; ...
         {'.'}], ...
      'Tag','popSymbol', ...
      'Value',1);

   h_chkFill = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[294 257 60 20], ...
      'BackgroundColor',bgcolor, ...
      'Fontsize',10, ...
      'ForegroundColor',[0 0 0], ...
      'String','Filled', ...
      'Value',markerfill, ...
      'Tag','chkFill');

   h_editSymbolSize = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'Position',[360 257 40 20], ...
      'Fontsize',10, ...
      'BackgroundColor',[1 1 1], ...
      'HorizontalAlignment','left', ...
      'String',markersize, ...
      'UserData',markersize, ...
      'Callback','ui_plotgroups(''symsize'')', ...
      'Tag','editSymbolSize');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[405 257 60 20], ...
      'Fontsize',10, ...
      'BackgroundColor',bgcolor, ...
      'HorizontalAlignment','left', ...
      'String','pts', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[69 226 110 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Line Style', ...
      'Tag','label');

   h_chkLine = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'Position',[194 224 100 20], ...
      'String','Automatic', ...
      'Tag','chkLine', ...
      'Callback','ui_plotgroups(''autoline'')', ...
      'Value',1);

   h_popLine = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[294 228 130 18], ...
      'BackgroundColor',[1 1 1], ...
      'Enable','off', ...
      'FontSize',10, ...
      'String',char([ ...
         {'(automatic)'}; ...
         {'(none)'}; ...
         {'-  (solid)'}; ...
         {':  (dotted)'}; ...
         {'-. (dashed)'}; ...
         {'-- (dash-dot)'}]), ...
      'UserData',[ ...
         {''}; ...
         {'none'}; ...
         {'-'}; ...
         {':'}; ...
         {'-.'}; ...
         {'--'}], ...
      'Value',1, ...
      'Tag','popLine');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[69 196 110 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Plot Color', ...
      'Tag','label');

   h_chkColor = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[194 194 100 20], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'String','Automatic', ...
      'Tag','chkColor', ...
      'Callback','ui_plotgroups(''autocolor'')', ...
      'Value',1);

   h_popColor = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[294 198 130 18], ...
      'BackgroundColor',[1 1 1], ...
      'Enable','off', ...
      'FontSize',10, ...
      'String',char([ ...
         {'(automatic)'}
         {'b (blue)'}; ...
         {'g (green)'}; ...
         {'k (black)'}; ...
         {'c (cyan)'}; ...
         {'m (magenta)'}; ...
         {'y (yellow)'}; ...
         {'r (red)'}]), ...
      'UserData',[ ...
         {''}; ...
         {'b'}; ...
         {'g'}; ...
         {'k'}; ...
         {'c'}; ...
         {'m'}; ...
         {'y'}; ...
         {'r'}], ...
      'Tag','popColor', ...
      'Value',1);

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[5 178 490 2], ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'Tag','separator');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[10 146 125 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Data Restriction', ...
      'Tag','label');

   h_editQry = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[135 144 252 23], ...
      'BackgroundColor',[1 1 1], ...
      'String','', ...
      'TooltipString','Query statement for restricting the data', ...
      'Tag','editQry');

   h_cmdQry = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[390 145 50 23], ...
      'String','Edit', ...
      'TooltipString','Open a graphical dialog to edit the query statement', ...
      'Callback','ui_plotgroups(''editquery'')', ...
      'Tag','cmdQry');

   uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[442 145 50 23], ...
      'String','Clear', ...
      'TooltipString','Clear the query statement', ...
      'Callback','ui_plotgroups(''clearquery'')', ...
      'Tag','cmdQry');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[20 109 115 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'ListboxTop',0, ...
      'String','Y-Axis Scaling', ...
      'Tag','label');

   h_popScale = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[135 111 130 18], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'String',['Linear';'Log10 '], ...
      'UserData',[{'linear'},{'log'}], ...
      'TooltipString','Y-Axis scaling option (autoscale multiplies low values by powers of 10 until in range)', ...
      'Tag','popScale', ...
      'Value',1);

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[20 76 115 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Other Options', ...
      'Tag','label');

   h_chkShowFlags = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[135 76 140 18], ...
      'BackgroundColor',bgcolor, ...
      'ForegroundColor',[0 0 .8], ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'String','Display Flags?', ...
      'TooltipString','Option to display QC flags above data points', ...
      'Value',displayflags, ...
      'Enable',enabledisplayflags, ...
      'Tag','chkShowFlags');

   h_chkFlags = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[280 76 200 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Remove flagged values?', ...
      'Tag','chkFlags', ...
      'Value',removeflags, ...
      'Callback','ui_plotgroups(''flags'')', ...
      'TooltipString','Option to null all values with QC flags assigned');

   h_chkRotate = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[135 54 300 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Invert plot axes (X on left, Y on top)?', ...
      'Value',invertaxes, ...
      'Tag','chkRotate', ...
      'TooltipString','Option to invert the plot so the X axis is on the left and values are reversed');

   h_cmdEval = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[430 10 60 25], ...
      'Callback','ui_plotgroups(''eval'')', ...
      'Enable','off', ...
      'FontSize',9, ...
      'String','Proceed', ...
      'Tag','cmdEval', ...
      'UserData',s, ...
      'TooltipString','Generate the plot with the selected options');

   h_cmdCancel = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Callback','ui_plotgroups(''cancel'')', ...
      'FontSize',9, ...
      'Position',[15 10 60 25], ...
      'String','Cancel', ...
      'Tag','cmdCancel', ...
      'TooltipString','Cancel plotting and close the dialog window');

   uih = struct( ...
      'mnuLoad',h_mnuLoad, ...
      'mnuClose',h_mnuClose, ...
      'popXCol',h_popXCol, ...
      'popYCol',h_popYCol, ...
      'popGroup',h_popGroup, ...
      'editMaxGps',h_editMaxGps, ...
      'chkSymbol',h_chkSymbol, ...
      'chkFill',h_chkFill, ...
      'editSymbolSize',h_editSymbolSize, ...
      'chkLine',h_chkLine, ...
      'chkColor',h_chkColor, ...
      'popSymbol',h_popSymbol, ...
      'popLine',h_popLine, ...
      'popColor',h_popColor, ...
      'editQry',h_editQry, ...
      'cmdQry',h_cmdQry, ...
      'popScale',h_popScale, ...
      'chkShowFlags',h_chkShowFlags, ...
      'chkFlags',h_chkFlags, ...
      'chkRotate',h_chkRotate, ...
      'cmdEval',h_cmdEval, ...
      'cmdCancel',h_cmdCancel', ...
      'h_cb',h_cb, ...
      'cb',cb);

   set(h_dlg,'Visible','on','UserData',uih)

   if ~isempty(s)
      ui_plotgroups('newdata')
   else
      drawnow
   end

else  %handle callbacks

   h_dlg = [];

   if length(findobj) > 2
      h_dlg = gcf;
      if ~strcmp(get(h_dlg,'Tag'),'dlgPlotGroups')
         h_dlg = [];
      end
   end

   if ~isempty(h_dlg)

      uih = get(h_dlg,'UserData');

      switch op

         case 'cancel'  %close dialog
            
            ui_plotgroups('savestate')  %save settings

            delete(h_dlg)

            ui_aboutgce('reopen')  %check for last window
            
         case 'savestate'  %save settings
            
            %try to save settings before closing dialog
            markerfill = get(uih.chkFill,'Value');
            markersize = get(uih.editSymbolSize,'String');
            displayflags = get(uih.chkShowFlags,'Value');
            removeflags = get(uih.chkFlags,'Value');
            invertaxes = get(uih.chkRotate,'Value');
            maxgroups = get(uih.editMaxGps,'String');

            %get path for settings file
            pn = fileparts(which('ui_plotgroups.mat'));  %use current settings file location first
            if ~isdir(pn)
               pn = [gce_homepath,filesep,'settings'];  %fall back to userdat directory
               if ~isdir(pn)
                  pn = fileparts(which('ui_plotgroups'));  %use function directory as last resort
               end
            end
            
            %save settings as variables
            try
               save([pn,filesep,'ui_plotgroups.mat'],'markerfill','markersize','displayflags','removeflags','invertaxes','maxgroups')
            catch
               %do nothing on error
            end            

         case 'newdata'  %load new data structure

            %get cached structure
            s = get(uih.cmdEval,'UserData');

            %validate structure
            if gce_valid(s,'data')

               %init name and non-string column indices
               I = 1:length(s.name);
               I_nonstring = find(~(strcmp(s.datatype,'s') & ~strcmp(s.variabletype,'datetime')));  %get index of non-string

               %check for minimum nonstring columns
               if length(I) >= 3 && length(I_nonstring) >= 2

                  %store data structure
                  set(uih.cmdEval,'UserData',s)

                  %format column names
                  colnames = cell(length(s.name),1);
                  for n = 1:length(s.name)
                     if ~isempty(s.units{n})
                        colnames{n} = [s.name{n},' (',s.units{n},')'];
                     else
                        colnames{n} = s.name{n};
                     end
                  end

                  %initialize controls
                  set(uih.popXCol,'String',[{'<choose column>'};colnames(I_nonstring)],'Value',1,'UserData',[{0},{I_nonstring}])
                  set(uih.popYCol,'String',[{'<choose column>'};colnames(I_nonstring)],'Value',1,'UserData',[{0},{I_nonstring}])
                  set(uih.popGroup,'String',[{'<choose column>'};colnames],'Value',1,'UserData',[{0},{I}])

                  %reset controls
                  set(uih.chkSymbol,'Value',1)
                  set(uih.popSymbol,'Enable','off','Value',1)
                  set(uih.chkLine,'Value',1)
                  set(uih.popLine,'Enable','off','Value',1)
                  set(uih.chkColor,'Value',1)
                  set(uih.popColor,'Enable','off','Value',1)
                  set(uih.editQry,'String','')

                  %disable proceed button until valid column selections made
                  set(uih.cmdEval,'Enable','off')

               else
                  messagebox('init', ...
                     '  Insufficient numerical columns in the data structure  ', ...
                     [], ...
                     'Error', ...
                     [.9 .9 .9]);
               end

            else
               messagebox('init', ...
                  '  Invalid GCE Data Structure - data not loaded  ', ...
                  [], ...
                  'Error', ...
                  [.9 .9 .9]);
            end

         case 'eval'

            %get cached structure, column indices
            s = get(uih.cmdEval,'UserData');
            xud = get(uih.popXCol,'UserData');
            yud = get(uih.popYCol,'UserData');
            gpud = get(uih.popGroup,'UserData');
            I_xcol = xud{2};
            I_ycol = yud{2};
            I_gpcol = gpud{2};
            xcol = I_xcol(xud{1});
            ycol = I_ycol(yud{1});
            gpcol = I_gpcol(gpud{1});
            markerfill = get(uih.chkFill,'Value');
            markersize = str2double(get(uih.editSymbolSize,'String'));
            if isempty(markersize)
               markersize = 6;
            end

            %get scaling options
            scaleopt = get(uih.popScale,'Value');
            scaledata = get(uih.popScale,'UserData');

            %get rotatio option
            rotopt = get(uih.chkRotate,'Value');

            %get flag option
            flagopt = get(uih.chkFlags,'Value');
            if flagopt == 1  %null flags if selected
               s = nullflags(s);
               showflags = 0;
            else
               showflags = get(uih.chkShowFlags,'Value');
            end

            %get default max group option
            maxgps = get(uih.editMaxGps,'UserData');
            
            %get plot options, lookup arrays
            if get(uih.chkSymbol,'Value') == 0
               symdata = get(uih.popSymbol,'UserData');
               markers = symdata(get(uih.popSymbol,'Value'));
            else
               markers = [];
            end
            if get(uih.chkLine,'Value') == 0
               linedata = get(uih.popLine,'UserData');
               styles = linedata(get(uih.popLine,'Value'));
            else
               styles = [];
            end
            if get(uih.chkColor,'Value') == 0
               clrdata = get(uih.popColor,'UserData');
               colors = clrdata(get(uih.popColor,'Value'));
            else
               colors = [];
            end
                  
            %get query option
            qry = get(uih.editQry,'String');
            if ~isempty(qry)
               qrystr = strrep(strrep(qry,'&','AND'),'|','OR');
               s2 = querydata(s,qry);
               if ~isempty(s2)
                  s = s2;
                  s.title = [s.title,' (',qrystr,')'];
               else
                  s.values = cell(1,length(s.name));
                  s.flags = repmat({''},1,length(s.name));
               end
            end
            
            %check for callback-mode
            if isempty(uih.h_cb) || isempty(uih.cb)
               
               if ~isempty(s.values{1})
                  
                  try
                     msg = plotgroups(s,xcol,ycol,gpcol,maxgps,colors,markers,styles,markerfill,markersize,rotopt,scaledata{scaleopt},showflags);
                     if ~isempty(msg)
                        msg = ['  Plot could not be generated (',msg,')  '];
                     end
                  catch
                     msg = 'An error occurred generating the plot (please contact the GCE Information Manager)';
                  end
                  
                  if ~isempty(msg)
                     messagebox('init',msg,'','Error',[.9 .9 .9]);
                  end
                  
               else
                  messagebox('init','The plot could not be generated because the structure contains no data', ...
                     '','Error',[.9 .9 .9]);
               end
               
            else  %callback mode - just return settings
               
               %save settings and close dialog
               ui_plotgroups('cancel')
                  
               %init settings structure
               plotinfo = struct( ...
                  'xcol',s.name{xcol}, ...
                  'ycol',s.name(ycol), ...
                  'groupcol',s.name{gpcol}, ...
                  'max_groups',maxgps, ...
                  'colors',colors, ...
                  'markers',markers, ...
                  'styles',styles, ...
                  'markerfill',markerfill, ...
                  'markersize',markersize, ...
                  'rotateaxis',rotopt, ...
                  'scale',scaledata{scaleopt}, ...
                  'showflags',showflags, ...
                  'query',qry);
               
               %return plotinfo to calling figure
               h_parent = parent_figure(uih.h_cb);
               if ~isempty(h_parent)
                  figure(h_parent)
                  set(uih_h_cb,'UserData',plotinfo)
                  try
                     eval(uih.cb)
                  catch
                     messagebox('init','An error occurred returning the plot information to the calling dialog', ...
                        '','Error',[0.95 0.95 0.95])
                  end
               end
               
            end

         case 'load'

            curpath = pwd;
            lastpath = get(uih.mnuLoad,'UserData');
            if ~isempty(lastpath)
               cd(lastpath)
            end

            [fn,pn] = uigetfile('*.mat;*.MAT','Select a file containing a GCE Data Structure');
            cd(curpath)
            drawnow

            if fn ~= 0

               set(uih.mnuLoad,'UserData',pn)  %update cached path

               err = 0;
               vars = [];

               pn = clean_path(pn);
               try
                  vars = load([pn,filesep,fn],'-mat');
               catch
                  err = 1;
               end

               if err == 0 && isstruct(vars)

                  vnames = fieldnames(vars);

                  if length(vnames) > 1
                     Isel = listdialog('liststring',vnames, ...
                        'selectionmode','single', ...
                        'promptstring','Select a variable from the list to load', ...
                        'name','Select Variable');
                  else
                     Isel = 1;
                  end

                  if ~isempty(Isel)

                     eval(['s = vars.',vnames{Isel},';'])

                     set(uih.cmdEval,'UserData',s)

                     ui_plotgroups('newdata')

                  end

               else

                  messagebox('init', ...
                     ['''',fn,''' is not a valid Matlab data file'], ...
                     [], ...
                     'Error', ...
                     [.9 .9 .9]);

               end

            end

         case 'validate'  %validate column selections

            h_active = gcbo;
            val = get(h_active,'Value') - 1;
            ud = get(h_active,'UserData');

            if val == 0
               ud{1} = 0;
               set(h_active,'UserData',ud)
            else
               flag_reset = 0;  %init reset flag
               col = ud{2}(val);  %look up selected column using embedded index
               h_all = [uih.popXCol,uih.popYCol,uih.popGroup];  %init array of all control handles
               for n = 1:length(h_all)
                  if h_active ~= h_all(n)
                     val2 = get(h_all(n),'Value') - 1;  %get selection of other control
                     if val2 > 0
                        ud2 = get(h_all(n),'UserData');
                        col2 = ud2{2}(val2);
                        if col == col2
                           flag_reset = 1;
                           break
                        end
                     end
                  end
               end
               if flag_reset == 0
                  ud{1} = val;
                  set(h_active,'UserData',ud)
               else  %reset value, issue warning
                  set(h_active,'Value',ud{1}+1)  %reset menu to prior selection
                  messagebox('init', ...
                     'Data column and group column selections must be distinct - value reset', ...
                     '', ...
                     'Warning', ...
                     [.9 .9 .9]);
               end
            end

            ui_plotgroups('buttons');

         case 'buttons'  %check control states, enable/disable proceed button

            xcol = get(uih.popXCol,'Value');
            ycol = get(uih.popYCol,'Value');
            gcol = get(uih.popGroup,'Value');
            gps = deblank(get(uih.editMaxGps,'String'));

            if xcol > 1 && ycol > 1 && gcol > 1 && ~isempty(gps)
               set(uih.cmdEval,'Enable','on')
            else
               set(uih.cmdEval,'Enable','off')
            end

         case 'symsize'  %validate symbol size edits

            str = get(uih.editSymbolSize,'String');
            val = str2num(str);
            if isempty(val)
               str = '';
            elseif val < 0
               str = '';
            end
            if ~isempty(str)
               set(uih.editSymbolSize,'UserData',str)  %cache new value
            else
               set(uih.editSymbolSize,'String',get(uih.editSymbolSize,'UserData'))  %reset string
               drawnow
               messagebox('init','Invalid symbol size - value reset',[],'Error',[.9 .9 .9])
            end

         case 'autosymbol'  %respond to automatic symbol checkbox changes

            h = uih.chkSymbol;
            h1 = uih.popSymbol;
            val = get(h,'Value');

            if val == 1
               set(h1,'Enable','off','Value',1)
            else
               set(h1,'Enable','on')
            end

         case 'autoline'  %respond to automatic line checkbox changes

            h = uih.chkLine;
            h1 = uih.popLine;
            val = get(h,'Value');

            if val == 1
               set(h1,'Enable','off','Value',1)
            else
               set(h1,'Enable','on')
            end

         case 'autocolor'  %respond to automatic color checkbox changes

            h = uih.chkColor;
            h1 = uih.popColor;
            val = get(h,'Value');

            if val == 1
               set(h1,'Enable','off','Value',1)
            else
               set(h1,'Enable','on')
            end

         case 'maxgroups'  %validate maximum group selection

            val = floor(str2num(get(uih.editMaxGps,'String')));

            if ~isempty(val)
               set(uih.editMaxGps,'String',int2str(val),'UserData',val)
            else
               set(uih.editMaxGps,'String',get(uih.editMaxGps,'UserData'))
               drawnow
               messagebox('init', ...
                  'Maximum Groups must be a valid integer - value reset', ...
                  '', ...
                  'Warning', ...
                  [.9 .9 .9]);
            end

            ui_plotgroups('buttons');

         case 'flags'  %respond to flag selections

            if get(uih.chkFlags,'Value') == 1
               set(uih.chkShowFlags,'Value',0,'Enable','off')
            else
               set(uih.chkShowFlags,'Enable','on')
            end

         case 'editquery'  %create/edit query restriction

            s = get(uih.cmdEval,'UserData');
            qrystr = get(uih.editQry,'String');

            ui_querybuilder('init',s,uih.editQry,'ui_plotgroups(''query'')',qrystr)

         case 'clearquery'  %clear query restrction

            set(uih.editQry,'String','')
            drawnow

         case 'query'  %respond to restriction edits

            qrystr = get(uih.editQry,'UserData');
            set(uih.editQry,'String',qrystr)
            drawnow

      end

   end

end
