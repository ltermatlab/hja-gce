function ui_plotvertprofile(op,s)
%Dialog for generating a 3D contour plot of parameter vs distance and depth
%
%syntax: ui_plotvertprofile(op,s)
%
%input:
%  op = operation ('init' to initialize dialog)
%  s = data structure to plot
%
%output:
%  none
%
%notes:
%  1) requires the plot_vertprofile.m function in the MATLAB path
%
%
%(c)2015 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 14-Apr-2015

%check for no input or data structure as first argument
if nargin == 0
   op = 'init';
elseif isstruct(op)
   s = op;
   op = 'init';
end

if strcmp(op,'init') && exist('plot_vertprofile','file') == 2  %build gui
   
   %check for valid data to plot
   if exist('s','var') ~= 1 || gce_valid(s,'data') ~= 1
      s = [];
   end

   %check for callback info
   if exist('h_cb','var') ~= 1
      h_cb = [];
   end   
   if exist('cb','var') ~= 1
      cb = '';
   end

   %init options
   cmap = 'jet';
   removeflags = 0;
   mindepth = 1;
   showpoints = 0;
   background = [0.9 0.9 0.9];

   %check for saved preferences file
   if exist('ui_plotvertprofile.mat','file') == 2
      try
         vars = load('ui_plotvertprofile.mat','-mat');
      catch
         vars = struct('null','');
      end
      if isfield(vars,'colormap')
         cmap = vars.colormap;
      end
      if isfield(vars,'removeflags')
         removeflags = vars.removeflags;
      end
      if isfield(vars,'mindepth')
         mindepth = vars.mindepth;
      end
      if isfield(vars,'showpoints')
         showpoints = vars.showpoints;
      end
      if isfield(vars,'background')
         background = vars.background;
      end
   end
   
   %generate mindepth string
   if isnan(mindepth)
      str_mindepth = '';
   else
      str_mindepth = num2str(mindepth);
   end

   %init figure color/position vars
   bgcolor = [.95 .95 .95];
   res = get(0,'ScreenSize');
   figpos = [max(1,0.5.*(res(3)-500)) max(50,0.5.*(res(4)-500)) 500 500];

   %open dialog figure
   h_dlg = figure('Visible','off', ...
      'Color',bgcolor, ...
      'KeyPressFcn','figure(gcf)', ...
      'MenuBar','none', ...
      'Name','Plot Vertical Profile', ...
      'NumberTitle','off', ...
      'PaperUnits','points', ...
      'Position',figpos, ...
      'Tag','dlgPlotVertProfile', ...
      'ToolBar','none', ...
      'Resize','off', ...
      'CloseRequestFcn','ui_plotvertprofile(''cancel'')', ...
      'DefaultuicontrolUnits','pixels');

   if mlversion >= 7
      set(h_dlg,'WindowStyle','normal')
      set(h_dlg,'DockControls','off')
   end

   uicontrol('Parent',h_dlg, ...
      'Style','frame', ...
      'ForegroundColor',[0 0 0], ...
      'BackgroundColor',bgcolor, ...
      'Position',[1 1 figpos(3) figpos(4)]);

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[50 455 135 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Distance Column', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[50 416 135 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Depth Column', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[50 379 135 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Parameter Column', ...
      'Tag','label');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[50 342 135 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Max Depth Column', ...
      'Tag','label');

   h_popDistCol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 459 220 20], ...
      'BackgroundColor',[1 1 1], ...
      'Callback','ui_plotvertprofile(''query'')', ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popDistCol', ...
      'TooltipString','Column to use for distance values', ...p
      'Callback','ui_plotvertprofile(''validate'')', ...
      'UserData',1, ...
      'Value',1);

   h_popDepCol = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 421 220 20], ...
      'BackgroundColor',[1 1 1], ...
      'Callback','ui_plotvertprofile(''query'')', ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popDepCol', ...
      'TooltipString','Column to use for depth values', ...
      'Callback','ui_plotvertprofile(''validate'')', ...
      'UserData',2, ...
      'Value',1);

   h_popParam = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 383 220 20], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popParam', ...
      'TooltipString','Parameter column to use for contouring', ...
      'Callback','ui_plotvertprofile(''validate'')', ...
      'UserData',3, ...
      'Value',1);

   h_popBottom = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 344 220 20], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'String','(no data)', ...
      'Tag','popBottom', ...
      'TooltipString','Column to use for maximum depth masking', ...
      'Callback','ui_plotvertprofile(''validate'')', ...
      'UserData',3, ...
      'Value',1);

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[5 310 490 2], ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'Tag','separator');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[69 266 110 20], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Contour Intervals', ...
      'Tag','label');
   
   h_editInterval = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'HorizontalAlignment','left', ...
      'Position',[196 266 260 24], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'String','auto', ...
      'Tag','editInterval', ...
      'TooltipString','Array of values to use for contour boundaries (empty for automatic)');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[50 226 135 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Contour Colormap', ...
      'Tag','label');

   %define colormap list array
   cmap_list = {'jet','(variant of hsv from blue to red)'; ...
      'hsv','(hue-saturation value' ; ...
      'hot','(black-red-yellow-white)' ; ...
      'gray','(linear gray scale)' ; ...
      'bone','(gray scale with tine of blue)'; ...
      'copper','(linear copper tone)'; ...
      'pink','(pastel shades of pink)'; ...
      'prism','(prism colormap)'; ...
      'cool','(shades of cyan and magenta)'; ...
      'autumn','(shades of red and yellow)'; ...
      'spring','(shades of magenta and yellow)'; ...
      'winter','(shades of blue and green)'; ...
      'summer','(shades of green and yellow)'};
   
   %look up selected color map
   cmap_val = find(strcmpi(cmap,cmap_list(:,1)));
   if isempty(cmap_val)
      cmap_val = 1;
   end
   
   h_popColor = uicontrol('Parent',h_dlg, ...
      'Style','popupmenu', ...
      'Position',[196 228 260 18], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'String',concatcellcols(cmap_list,' '), ...
      'UserData',cmap_list(:,1), ...
      'Tag','popColor', ...
      'Value',cmap_val);

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[5 190 490 2], ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'Tag','separator');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[10 140 125 20], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Data Restriction', ...
      'Tag','label');

   h_editQry = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'FontSize',10, ...
      'HorizontalAlignment','left', ...
      'Position',[135 140 252 23], ...
      'BackgroundColor',[1 1 1], ...
      'String','', ...
      'TooltipString','Query statement for restricting the data', ...
      'Tag','editQry');

   h_cmdQry = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[390 140 50 23], ...
      'String','Edit', ...
      'TooltipString','Open a graphical dialog to edit the query statement', ...
      'Callback','ui_plotvertprofile(''editquery'')', ...
      'Tag','cmdQry');

   uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[442 140 50 23], ...
      'String','Clear', ...
      'TooltipString','Clear the query statement', ...
      'Callback','ui_plotvertprofile(''clearquery'')', ...
      'Tag','cmdQry');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[10 100 125 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'FontWeight','bold', ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Plot Options', ...
      'Tag','label');

   h_chkFlags = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[135 100 180 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Remove flagged values?', ...
      'Tag','chkFlags', ...
      'Value',removeflags, ...
      'TooltipString','Option to null all values with QC flags assigned');

   h_chkPoints = uicontrol('Parent',h_dlg, ...
      'Style','checkbox', ...
      'Position',[320 100 180 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Display sample points?', ...
      'Tag','chkPoints', ...
      'Value',showpoints, ...
      'TooltipString','Option to display locations of sampled points on top of the contours');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[120 70 120 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Minimum Depth:', ...
      'Tag','label');
   
   h_editMinDepth = uicontrol('Parent',h_dlg, ...
      'Style','edit', ...
      'Position',[240 70 40 22], ...
      'BackgroundColor',[1 1 1], ...
      'FontSize',10, ...
      'ForegroundColor',[0 0 0], ...
      'HorizontalAlignment','left', ...
      'String',str_mindepth, ...
      'UserData',str_mindepth, ...
      'Callback','ui_plotvertprofile(''editdepth'')', ...
      'TooltipString','Specify a minimum depth for the profile (blank = automatic)', ...
      'Tag','editMinDepth');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[310 70 130 18], ...
      'BackgroundColor',bgcolor, ...
      'FontSize',10, ...
      'ForegroundColor',[0 0 0.8], ...
      'String','Background Color:', ...
      'Tag','label');
   
   h_cmdColor = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[440 70 40 22], ...
      'ForegroundColor',[0 0 0], ...
      'BackgroundColor',background, ...
      'FontSize',10, ...
      'String','Set', ...
      'Callback','ui_plotvertprofile(''setcolor'')', ...
      'TooltipString','Specify the color for the plot background', ...
      'Tag','cmdColor');

   uicontrol('Parent',h_dlg, ...
      'Style','text', ...
      'Position',[5 45 490 2], ...
      'BackgroundColor',[0.8 0.8 0.8], ...
      'Tag','separator');

   h_cmdEval = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Position',[430 10 60 25], ...
      'Callback','ui_plotvertprofile(''eval'')', ...
      'Enable','off', ...
      'FontSize',9, ...
      'String','Proceed', ...
      'Tag','cmdEval', ...
      'UserData',s, ...
      'TooltipString','Generate the plot with the selected options');

   h_cmdCancel = uicontrol('Parent',h_dlg, ...
      'Style','pushbutton', ...
      'Callback','ui_plotvertprofile(''cancel'')', ...
      'FontSize',9, ...
      'Position',[15 10 60 25], ...
      'String','Cancel', ...
      'Tag','cmdCancel', ...
      'TooltipString','Cancel plotting and close the dialog window');

   uih = struct( ...
      'popDistCol',h_popDistCol, ...
      'popDepCol',h_popDepCol, ...
      'popParam',h_popParam, ...
      'popBottom',h_popBottom, ...
      'popColor',h_popColor, ...
      'editInterval',h_editInterval, ...
      'editMinDepth',h_editMinDepth, ...
      'cmdColor',h_cmdColor, ...
      'editQry',h_editQry, ...
      'cmdQry',h_cmdQry, ...
      'chkFlags',h_chkFlags, ...
      'chkPoints',h_chkPoints, ...
      'cmdEval',h_cmdEval, ...
      'cmdCancel',h_cmdCancel', ...
      'h_cb',h_cb, ...
      'cb',cb);

   set(h_dlg,'Visible','on','UserData',uih)

   if ~isempty(s)
      ui_plotvertprofile('newdata')
   else
      drawnow
   end

else  %handle callbacks

   h_dlg = [];

   if length(findobj) > 2
      h_dlg = gcf;
      if ~strcmp(get(h_dlg,'Tag'),'dlgPlotVertProfile')
         h_dlg = [];
      end
   end

   if ~isempty(h_dlg)

      uih = get(h_dlg,'UserData');

      switch op

         case 'cancel'  %close dialog
            
            ui_plotvertprofile('savestate')  %save settings

            delete(h_dlg)

            ui_aboutgce('reopen')  %check for last window
            
         case 'savestate'  %save settings
            
            %try to save settings before closing dialog
            cmap_list = get(uih.popColor,'UserData');
            cmap = cmap_list{get(uih.popColor,'Value')}; %#ok<NASGU>
            removeflags = get(uih.chkFlags,'Value'); %#ok<NASGU>
            mindepth = str2double(get(uih.editMinDepth,'String')); %#ok<NASGU>
            showpoints = get(uih.chkPoints,'Value'); %#ok<NASGU>
            background = get(uih.cmdColor,'BackgroundColor'); %#ok<NASGU>

            %get path for settings file
            pn = fileparts(which('ui_plotvertprofile.mat'));  %use current settings file location first
            if ~isdir(pn)
               pn = [gce_homepath,filesep,'settings'];  %fall back to userdat directory
               if ~isdir(pn)
                  pn = fileparts(which('ui_plotvertprofile'));  %use function directory as last resort
               end
            end
            
            %save settings as variables
            try
               save([pn,filesep,'ui_plotvertprofile.mat'],'cmap','removeflags','mindepth','showpoints','background')
            catch
               %do nothing on error
            end            

         case 'newdata'  %load new data structure

            %get cached structure
            s = get(uih.cmdEval,'UserData');

            %validate structure
            if gce_valid(s,'data')

               %init name and non-string column indices
               I = 1:length(s.name);
               I_nonstring = find(~(strcmp(s.datatype,'s') & ~strcmp(s.variabletype,'datetime')));  %get index of non-string

               %check for minimum nonstring columns
               if length(I) >= 3 && length(I_nonstring) >= 2

                  %store data structure
                  set(uih.cmdEval,'UserData',s)

                  %format column names
                  colnames = cell(length(s.name),1);
                  for n = 1:length(s.name)
                     if ~isempty(s.units{n})
                        colnames{n} = [s.name{n},' (',s.units{n},')'];
                     else
                        colnames{n} = s.name{n};
                     end
                  end
                  
                  %look up default distance column
                  distcol = find(strncmpi('Transect_Distance',colnames(I_nonstring),17));
                  if isempty(distcol)
                     distcol = find(strncmpi('Distance',colnames(I_nonstring),8));
                  end
                  if ~isempty(distcol)
                     distcol = distcol(1);
                  else
                     distcol = 0;
                  end
                  
                  %look up default depth/pressure column
                  depcol = find(strncmpi('Depth',colnames(I_nonstring),5));
                  if isempty(depcol)
                     depcol = find(strncmpi('Pressure',colnames(I_nonstring),8));
                  end
                  if ~isempty(depcol)
                     depcol = depcol(1);
                  else
                     depcol = 0;
                  end                 
                  
                  %initialize controls
                  set(uih.popDistCol,'String',[{'<choose column>'};colnames(I_nonstring)],'Value',distcol+1,'UserData',[{distcol},{I_nonstring}])
                  set(uih.popDepCol,'String',[{'<choose column>'};colnames(I_nonstring)],'Value',depcol+1,'UserData',[{depcol},{I_nonstring}])
                  set(uih.popParam,'String',[{'<choose column>'};colnames(I_nonstring)],'Value',1,'UserData',[{0},{I_nonstring}])
                  set(uih.popBottom,'String',[{'<choose column>'};colnames(I_nonstring)],'Value',1,'UserData',[{0},{I_nonstring}])

                  %reset controls
                  set(uih.editInterval,'String','auto')
                  set(uih.editQry,'String','')

                  %disable proceed button until valid column selections made
                  set(uih.cmdEval,'Enable','off')

               else
                  messagebox('init', ...
                     '  Insufficient numerical columns in the data structure  ', ...
                     [], ...
                     'Error', ...
                     [.9 .9 .9]);
               end

            else
               messagebox('init', ...
                  '  Invalid GCE Data Structure - data not loaded  ', ...
                  [], ...
                  'Error', ...
                  [.9 .9 .9]);
            end

         case 'eval'

            %get cached structure
            s = get(uih.cmdEval,'UserData');
            
            %get column selections
            distcols = get(uih.popDistCol,'UserData');
            depcols = get(uih.popDepCol,'UserData');
            paramcols = get(uih.popParam,'UserData');
            bottomcols = get(uih.popBottom,'UserData');
            I_distcol = distcols{2};
            I_depcol = depcols{2};
            I_paramcol = paramcols{2};
            I_bottomcol = bottomcols{2};
            col = I_distcol(distcols{1});
            depcol = I_depcol(depcols{1});
            paramcol = I_paramcol(paramcols{1});
            if bottomcols{1} > 0
               botcol = I_bottomcol(bottomcols{1});
            else
               botcol = [];
            end
            
            %get contour intervals
            interval_str = strrep(deblank(get(uih.editInterval,'String')),'auto','');
            interval = [];
            if ~isempty(interval_str)
               interval = str2num(interval_str); %#ok<ST2NM>
            end
            
            %get colormap
            cmap_list = get(uih.popColor,'UserData');
            cmap_str = cmap_list{get(uih.popColor,'Value')};
            cmap = feval(cmap_str,128);  %generate 128-level color map based on function name

            %get options
            mindepth = str2double(get(uih.editMinDepth,'String'));
            showpoints = get(uih.chkPoints,'Value');
            background = get(uih.cmdColor,'BackgroundColor');
            
            %get query option
            qry = get(uih.editQry,'String');
            if ~isempty(qry)
               qrystr = strrep(strrep(qry,'&','AND'),'|','OR');
               s = querydata(s,qry);
               if ~isempty(s)
                  s.title = [s.title,' (',qrystr,')'];
               end
            end
            
            if ~isempty(s)
               
               try

                 axtitles = cell(4,1);
                 axtitles{1} = s.title;
                 axtitles{2} = [s.name{depcol},' (',s.units{depcol},')'];
                 axtitles{3} = [s.name{col},' (',s.units{col},')'];
                 axtitles{4} = [s.name{paramcol},' (',s.units{paramcol},')'];
                 
                 dist = extract(s,col);
                 dep = extract(s,depcol);
                 param = extract(s,paramcol);
                 
                 Ivalid = ~isnan(dist) & ~isnan(dep) & ~isnan(param);

                 bottom = [];
                 if ~isempty(botcol)
                    Ivalid2 = ~isnan(dist);
                    bot = extract(s,botcol);
                    bot = bot(Ivalid2);
                    [dist2,Isort] = sort(dist(Ivalid2));
                    bottom = [dist2,bot(Isort)];                    
                 end
                 
                  msg = plot_vertprofile( ...
                     dist(Ivalid), ...
                     dep(Ivalid), ...
                     param(Ivalid), ...
                     interval, ...
                     bottom, ...
                     axtitles, ...
                     cmap, ...
                     mindepth, ...
                     background, ...
                     showpoints ...
                     );
                  if ~isempty(msg)
                     msg = ['  Plot could not be generated (',msg,')  '];
                  end
                  
               catch
                  msg = 'An error occurred generating the plot (please contact the GCE Information Manager)';
               end
               
               if ~isempty(msg)
                  messagebox('init',msg,'','Error',[.9 .9 .9]);
               end
               
            else
               messagebox('init','The plot could not be generated because the structure contains no data', ...
                  '','Error',[.9 .9 .9]);
            end

         case 'validate'  %validate column selections

            h_active = gcbo;
            val = get(h_active,'Value') - 1;
            ud = get(h_active,'UserData');

            if val == 0
               ud{1} = 0;
               set(h_active,'UserData',ud)
            else
               flag_reset = 0;  %init reset flag
               col = ud{2}(val);  %look up selected column using embedded index
               h_all = [uih.popDistCol,uih.popDepCol,uih.popParam];  %init array of all control handles
               for n = 1:length(h_all)
                  if h_active ~= h_all(n)
                     val2 = get(h_all(n),'Value') - 1;  %get selection of other control
                     if val2 > 0
                        ud2 = get(h_all(n),'UserData');
                        col2 = ud2{2}(val2);
                        if col == col2
                           flag_reset = 1;
                           break
                        end
                     end
                  end
               end
               if flag_reset == 0
                  ud{1} = val;
                  set(h_active,'UserData',ud)
               else  %reset value, issue warning
                  set(h_active,'Value',ud{1}+1)  %reset menu to prior selection
                  messagebox('init', ...
                     'Data column and group column selections must be distinct - value reset', ...
                     '', ...
                     'Warning', ...
                     [.9 .9 .9]);
               end
            end

            ui_plotvertprofile('buttons');

         case 'buttons'  %check control states, enable/disable proceed button

            col = get(uih.popDistCol,'Value');
            depcol = get(uih.popDepCol,'Value');
            parm = get(uih.popParam,'Value');

            if col > 1 && depcol > 1 && parm > 1
               set(uih.cmdEval,'Enable','on')
            else
               set(uih.cmdEval,'Enable','off')
            end

         case 'editquery'  %create/edit query restriction

            s = get(uih.cmdEval,'UserData');
            qrystr = get(uih.editQry,'String');

            ui_querybuilder('init',s,uih.editQry,'ui_plotvertprofile(''query'')',qrystr)
            
         case 'editdepth'  %validate depth
            
            depstr = deblank(get(uih.editMinDepth,'String'));
            
            if isempty(depstr) || isnan(str2double(depstr))
               set(uih.editMinDepth,'String',get(uih.editMinDepth,'UserData'))
               messagebox('init', ...
                  'Invalid depth - value reset', ...
                  '', ...
                  'Warning', ...
                  [.9 .9 .9]);
            else
               set(uih.editMinDepth,'UserData',depstr)
            end

         case 'clearquery'  %clear query restrction

            set(uih.editQry,'String','')
            drawnow

         case 'query'  %respond to restriction edits

            qrystr = get(uih.editQry,'UserData');
            set(uih.editQry,'String',qrystr)
            drawnow
            
         case 'setcolor'  %respond to color button clicks
            
            clr = get(uih.cmdColor,'BackgroundColor');            
            c = uisetcolor(clr);            
            set(uih.cmdColor,'BackgroundColor',c)
            

      end

   end

end
