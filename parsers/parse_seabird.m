function [s,msg] = parse_seabird(fn,pn,template,cruise)
%Parses data and header metadata from processed Sea-Bird CTD data files and returns a GCE data structure
%
%Note that configuration options can be stored in 'parse_seabird.mat' to facilitate batch processing
%
%syntax: [s,msg] = parse_seabird(fn,pn,template,cruise)
%
%inputs:
%  fn = filename to process (text file generated by SBE data processing software, e.g. .cnv file)
%  pn = file path (default = pwd)
%  template = metadata template to apply (default = 'SeaBird_CTD')
%  cruise = cruise label to include as a nominal text column (option, default = '' for none)
%
%outputs:
%  s = data structure containing merged data from all files
%  msg = text of any error message
%
%(c)2002-2012 Wade M. Sheldon and the Georgia Coastal Ecosystems LTER Project
%
%This file is part of the GCE Data Toolbox for MATLAB(r) software library.
%
%The GCE Data Toolbox is free software: you can redistribute it and/or modify it under the terms
%of the GNU General Public License as published by the Free Software Foundation, either version 3
%of the License, or (at your option) any later version.
%
%The GCE Data Toolbox is distributed in the hope that it will be useful, but WITHOUT ANY
%WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
%PURPOSE. See the GNU General Public License for more details.
%
%You should have received a copy of the GNU General Public License along with The GCE Data Toolbox
%as 'license.txt'. If not, see <http://www.gnu.org/licenses/>.
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 04-Oct-2012

%init output
s = [];
msg = '';

%check for required arguments
if nargin >= 1

   %supply defaults for omitted parameters
   if exist('pn','var') ~= 1
      pn = pwd;
   else
      pn = clean_path(pn);  %strip terminal file separator
   end

   %check for valid filename
   if exist([pn,filesep,fn],'file') == 2

      if exist('template','var') ~= 1
         template = '';
      end
      if isempty(template)
         template = 'SeaBird_CTD';
      end

      if exist('cruise','var') ~= 1
         cruise = '';
      end

      %init runtime vars
      hdr = [];
      colnames = [];
      coldescs = [];
      colunits = [];
      hdrlines = 0;
      colnum = 0;

      %open file and read first line
      fid = fopen([pn,filesep,fn],'r');
      ln = fgetl(fid);
      
      %loop through file caching header text and parsing variable info until hit *END* or EOF
      while ischar(ln)
                  
         %increment header counter
         hdrlines = hdrlines + 1;
         
         %check for *END* marking start of data
         if ~strncmpi(ln,'*END*',5)
            
            %strip first 2 leading characters (* )
            ln  = ln(3:end);
            
            %append line to header array
            hdr = [hdr ; {ln}];
            
            %check for column name
            if strncmpi(ln,'name ',5)
               
               %increment variable name counter
               colnum = colnum + 1;  
               
               %get position indices of name token
               [Istart,Iend] = regexpi(ln,'name [0-9]+ = ');  
               
               %check for match to numbered variable name
               if ~isempty(Iend)
                  
                  %parse variable name
                  [colname,rem] = strtok(ln(Iend(1)+1:end),':');  
                  
                  %check for variable description info for non-flag columns
                  if length(rem) > 3 && ~strcmpi(colname,'flag')
                     
                     %try to parse units from description
                     coldesc = rem(3:end);
                     if strfind(rem,'[') > 0
                        [Iunits1,Iunits2] = regexpi(coldesc,'\[.*\]');
                        if ~isempty(Iunits1)
                           colunit = trimstr(coldesc(Iunits1+1:Iunits2-1));
                        end
                     else
                        colunit = 'none';
                     end
                     
                  else
                     coldesc = '';
                     colunit = 'none';
                  end
                  
               else
                  
                  %return empty strings if variables not matched
                  colname = '';
                  colunit = '';
                  coldesc = '';
                  
               end
               
               %supply dummy column name if not parsed
               if isempty(colname)
                  colname = ['column',int2str(colnum)];
                  colunit = 'unspecified';
                  coldesc = '';
               end
               
               %append parsed names, description, units to arrays
               colnames = [colnames,{colname}];
               coldescs = [coldescs,{coldesc}];
               colunits = [colunits,{colunit}];
               
            end
            
         else  %hit *END*
            
            %break out of loop
            break
            
         end
         
         %read next line
         ln = fgetl(fid);
         
      end
      
      %close file
      fclose(fid);

      %init array of header fields to parse
      header_tkns = {'software','Software Version'; ...
            'upload','System UpLoad Time ='; ...
            'instrument','SBE '; ...
            'interval','interval ='; ...
            'time_start','start_time ='};

      %init parsed info structure
      s_hdr = cell2struct(repmat({''},size(header_tkns,1),1),header_tkns(:,1),1);

      %parse fields from header
      for n = 1:size(header_tkns,1)
         fld = header_tkns{n,1};
         tkn = header_tkns{n,2};
         Imatch = find(strncmpi(tkn,hdr,length(tkn)));
         if ~isempty(Imatch)
            str = hdr{Imatch(1)};
            str = str(length(tkn)+1:end);
            s_hdr.(fld) = trimstr(str);
         end
      end

      %init metadata array with header info as user notes
      usernotes = ['|SeaBird data processing header:|   ',char(concatcellcols(hdr','|   '))];
      meta = {'Supplement','Validation',usernotes};

      %generate date and timestamp info if required header fields detected
      dt = [];
      interval = [];
      if ~isempty(s_hdr.time_start)
         dt = datenum(s_hdr.time_start);
      end
      if ~isempty(s_hdr.interval)
         str_int = s_hdr.interval;
         if strncmpi(str_int,'seconds: ',9)
            interval = str2double(str_int(10:end));
            if ~isempty(interval)
               interval = interval ./ (60 * 60 * 24);  %convert seconds to days
            end
         end
      end

      %generate title and abstract based on cruise and date range if available
      titlestr = 'CTD profile data';
      abstract = 'Vertical profiles were performed using a SeaBird CTD';
      if ~isempty(dt)
         meta = [meta ; {'Study','BeginDate',datestr(dt,1); 'Study','EndDate',datestr(dt,1)}];
         titlestr = [titlestr,' collected on ',datestr(dt,1)];
         abstract = [abstract,' on ',datestr(dt,1)];
         if ~isempty(cruise)
            titlestr = [titlestr,' during the ',cruise,' cruise'];
            abstract = [abstract,' during the ',cruise,' cruise'];
         end
      else
         if ~isempty(cruise)
            titlestr = [titlestr,' collected during the ',cruise,' cruise'];
            abstract = [abstract,' on the ',cruise,' cruise'];
         end
      end

      %split filename, pathname
      [tmp,fn_base] = fileparts(fn);
      castfile = strtok(fn_base,'_');  %use base filename as cast filename, omitting appended text after the underscore

      %generate format string
      fstr = deblank(repmat('%f ',1,length(colnames)));

      %import data using generic ascii parser
      [s,msg0] = imp_ascii(fn,pn,'','',fstr,colnames,hdrlines,'');

      %check for successful parsing
      if ~isempty(s)

         %insert upload history as processing step 1, parsing S/N and software version from header fields
         if ~isempty(s_hdr.upload) && ~isempty(s_hdr.instrument) && ~isempty(s_hdr.software)
            dt_upload = datestr(datenum(s_hdr.upload));
            instrument = s_hdr.instrument;
            Idtstart = regexp(instrument,'\d\d\/\d\d/\d\d');
            if ~isempty(Idtstart)
               instrument = strrep(deblank(instrument(1:Idtstart-1)),'  ',' ');
            end
            str_upload = ['data uploaded from SBE',instrument,' using Sea-Bird Data Processing Software version ',s_hdr.software];
            s.history = [ ...
                  {dt_upload},{str_upload} ; ...
                  s.history];
         end

         %delete SBE flag column
         flagcol = name2col(s,'Flag');
         if ~isempty(flagcol)
            s2 = deletecols(s,'Flag');
            if ~isempty(s2)
               s = s2;
            end
         end

         %generate timestamp from time-start, record number
         if ~isempty(dt) && ~isempty(interval)
            numrec = length(s.values{1});
            ts = linspace(dt,dt+(numrec.*interval),numrec)';
            [yr,mo,dy,hr,mn,sc] = datevec(ts);
            hr = hr + mn./60 + sc./3600;
         else
            ts = [];
         end

         %add derived data columns
         if ~isempty(ts)
            s = addcol(s,hr,'Hour','hours','Fractional hours representing beginning of cast (GMT)','f','datetime','continuous',3,'x<0=''I''',0);
            s = addcol(s,dy,'Day','DD','Calendar day of cast','d','datetime','discrete',0,'x<1=''I'';x>31=''I''',0);
            s = addcol(s,mo,'Month','MM','Calendar month of cast','d','datetime','discrete',0,'x<1=''I'';x>12=''I''',0);
            s = addcol(s,yr,'Year','YYYY','Calendar year of cast','d','datetime','discrete',0,'x<2000=''Q''',0);
            s = addcol(s,ts,'Date','serial day (base 1/1/0000) - GMT','Date of observation (GMT)','f','datetime','continuous',3,'x<0=''I''',0);
         end

         %add castfile
         s = addcol(s,castfile,'CastFile','none','Cast filename','s','nominal','none',0,'',0);

         %add cruise id
         if ~isempty(cruise)
            s = addcol(s,cruise,'Cruise','none','Research cruise identifier (LTER[MM][YY])','s','nominal','none',0,'',0);
         end

         %apply template after adding columns
         [s2,msg] = apply_template(s,template);

         %check for template errors
         if ~isempty(s2)

            %use updated structure as output
            s = s2;

            %add parsed descriptions, units for any unmatched variables (i.e. final column name = original variable name)
            for n = 1:length(colnames)
               Icol = name2col(s,colnames{n},1);  %match names case sensitively
               if ~isempty(Icol)
                  s.description{Icol(1)} = coldescs{n};
                  s.units{Icol(1)} = colunits{n};
               end
            end

            %add data columns to abstract
            Idatacols = strcmp(s.variabletype,'data') | strcmp(s.variabletype,'calculation');
            datacols = cell2commas(s.name(Idatacols),1);
            abstract = [abstract,'. Measured variables included ',datacols,'.'];
            meta = [meta ; {'Dataset','Abstract',abstract}];

            %update metadata
            if ~isempty(meta)
               s = addmeta(s,meta,0,'parse_seabird');
            end

            %update title
            if ~isempty(titlestr)
               s = newtitle(s,titlestr);
            end

            %propagate Depth flags to dependent cols
            Idep = name2col(s,'Depth');
            Icols = find(strcmp(s.variabletype,'data') | strcmp(s.variabletype,'calculation'));
            if ~isempty(Idep) && ~isempty(Icols)
               s = flag_locks(s,'lock',Idep);  %lock Depth flags for subsequent merge operations
               Icols = setdiff(Icols,Idep);  %remove depth column from copy list
               [s2,msg0] = copyflags(s,Idep,Icols,'add');  %propagate flags to all other data/calc columns
               if ~isempty(s2)
                  s = s2;
               else
                  if isempty(msg)
                     msg = ['an error occurred copying Depth flags to dependent columns: ',msg0];
                  else
                     msg = [msg,' and an error occurred copying Depth flags to dependent columns: ',msg0];
                  end
               end
            end

         else
            msg = 'an error occurred applying the specified template';
         end

      else
         msg = ['an error occurred parsing the file: ',msg0];
      end

   else
      msg = 'invalid filename';
   end

else
   msg = 'insufficient arguments for function';
end